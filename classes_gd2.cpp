class AccountHelpLayer : GJDropDownLayer, GJAccountDelegate, FLAlertLayerProtocol {
  FLAlert_Clicked(FLAlertLayer*, bool)
  accountStatusChanged()
  create()
  customSetup()
  doUnlink()
  exitLayer()
  layerHidden()
  onAccountManagement(cocos2d::CCObject*)
  onReLogin(cocos2d::CCObject*)
  onUnlink(cocos2d::CCObject*)
  updatePage()
  verifyUnlink()
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual accountStatusChanged(void)
  virtual customSetup(void)
  virtual layerHidden(void)
}
class AccountLayer : GJDropDownLayer, GJAccountDelegate, GJAccountBackupDelegate, GJAccountSyncDelegate, FLAlertLayerProtocol {
  FLAlert_Clicked(FLAlertLayer*, bool)
  accountStatusChanged()
  backupAccountFailed(BackupAccountError)
  backupAccountFinished()
  create()
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint)
  customSetup()
  doBackup()
  doSync()
  exitLayer()
  hideLoadingUI()
  layerHidden()
  onBackup(cocos2d::CCObject*)
  onHelp(cocos2d::CCObject*)
  onLogin(cocos2d::CCObject*)
  onMore(cocos2d::CCObject*)
  onRegister(cocos2d::CCObject*)
  onSync(cocos2d::CCObject*)
  showLoadingUI()
  syncAccountFailed(BackupAccountError)
  syncAccountFinished()
  toggleUI(bool)
  updatePage(bool)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual accountStatusChanged(void)
  virtual backupAccountFailed(BackupAccountError)
  virtual backupAccountFinished(void)
  virtual customSetup(void)
  virtual layerHidden(void)
  virtual syncAccountFailed(BackupAccountError)
  virtual syncAccountFinished(void)
}
class AccountLoginLayer : FLAlertLayer, TextInputDelegate, GJAccountLoginDelegate, FLAlertLayerProtocol {
  FLAlert_Clicked(FLAlertLayer*, bool)
  create(std::string)
  createTextBackground(cocos2d::CCPoint, char const*, cocos2d::CCSize)
  createTextInput(cocos2d::CCPoint, cocos2d::CCSize, char const*, int)
  createTextLabel(cocos2d::CCPoint, char const*, cocos2d::CCSize)
  disableNodes()
  hideLoadingUI()
  init(std::string)
  keyBackClicked()
  loginAccountFailed(AccountError)
  loginAccountFinished(int, int)
  onClose(cocos2d::CCObject*)
  onForgotPassword(cocos2d::CCObject*)
  onForgotUser(cocos2d::CCObject*)
  onSubmit(cocos2d::CCObject*)
  registerWithTouchDispatcher()
  resetLabel(int)
  resetLabels()
  showLoadingUI()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputOpened(CCTextInputNode*)
  toggleUI(bool)
  updateLabel(AccountError)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual keyBackClicked(void)
  virtual loginAccountFailed(AccountError)
  virtual loginAccountFinished(int,int)
  virtual registerWithTouchDispatcher(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputOpened(CCTextInputNode *)
}
class AccountRegisterLayer : FLAlertLayer, TextInputDelegate, GJAccountRegisterDelegate, FLAlertLayerProtocol {
  FLAlert_Clicked(FLAlertLayer*, bool)
  allowTextInput(CCTextInputNode*)
  create()
  createTextBackground(cocos2d::CCPoint, cocos2d::CCSize)
  createTextInput(cocos2d::CCPoint, cocos2d::CCSize, std::string, int)
  createTextLabel(cocos2d::CCPoint, std::string, cocos2d::CCSize)
  disableNodes()
  hideLoadingUI()
  init()
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onSubmit(cocos2d::CCObject*)
  registerAccountFailed(AccountError)
  registerAccountFinished()
  registerWithTouchDispatcher()
  resetLabel(int)
  resetLabels()
  showLoadingUI()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputOpened(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  toggleUI(bool)
  updateLabel(AccountError)
  validEmail(std::string)
  validPassword(std::string)
  validUser(std::string)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual allowTextInput(CCTextInputNode *)
  virtual init(void)
  virtual keyBackClicked(void)
  virtual registerAccountFailed(AccountError)
  virtual registerAccountFinished(void)
  virtual registerWithTouchDispatcher(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputOpened(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class AchievementBar : cocos2d::CCNodeRGBA {
  create(char const*, char const*, char const*, bool)
  init(char const*, char const*, char const*, bool)
  setOpacity(unsigned char)
  show()
  virtual setOpacity(uchar)
}
class AchievementCell : TableViewCell {
  draw()
  init()
  loadFromDict(cocos2d::CCDictionary*)
  updateBGColor(int)
  virtual draw(void)
  virtual init(void)
}
class AchievementManager : cocos2d::CCNode {
  achievementForUnlock(int, UnlockType)
  areAchievementsEarned(cocos2d::CCArray*)
  checkAchFromUnlock(char const*)
  dataLoaded(DS_Dictionary*)
  encodeDataTo(DS_Dictionary*)
  firstSetup()
  getAchievementRewardDict()
  getAchievementsWithID(char const*)
  getAllAchievements()
  getAllAchievementsSorted()
  init()
  isAchievementEarned(char const*)
  notifyAchievement(char const*, char const*, char const*)
  notifyAchievementWithID(char const*)
  percentForAchievement(char const*)
  percentageForCount(int, int)
  reportAchievementWithID(char const*, int, bool)
  reportPlatformAchievementWithID(char const*, int)
  resetAchievement(char const*)
  resetAchievements()
  setReportedAchievements(cocos2d::CCDictionary*)
  setup()
  sharedState()
  storeAchievementUnlocks()
  virtual init(void)
}
class AchievementNotifier : cocos2d::CCNode {
  achievementDisplayFinished()
  init()
  notifyAchievement(char const*, char const*, char const*, bool)
  sharedState()
  showNextAchievement()
  willSwitchToScene(cocos2d::CCScene*)
  virtual init(void)
}
class AchievementsLayer : GJDropDownLayer {
  create()
  customSetup()
  keyDown(cocos2d::enumKeyCodes)
  loadPage(int)
  onNextPage(cocos2d::CCObject*)
  onPrevPage(cocos2d::CCObject*)
  setupLevelBrowser(cocos2d::CCArray*)
  setupPageInfo(int, int, int)
  virtual customSetup(void)
  virtual keyDown(cocos2d::enumKeyCodes)
}
class AnimatedGameObject : GameObject, AnimatedSpriteDelegate, SpritePartDelegate {
  activateObject()
  animationFinished(char const*)
  animationForID(int, int)
  create(int)
  deactivateObject(bool)
  displayFrameChanged(cocos2d::CCObject*, std::string)
  getTweenTime(int, int)
  init(int)
  playAnimation(int)
  resetObject()
  setObjectColor(cocos2d::_ccColor3B const&)
  setOpacity(unsigned char)
  setupAnimatedSize(int)
  setupChildSprites()
  updateChildSpriteColor(cocos2d::_ccColor3B)
  virtual activateObject(void)
  virtual animationFinished(char const*)
  virtual deactivateObject(bool)
  virtual displayFrameChanged(cocos2d::CCObject *,std::string)
  virtual resetObject(void)
  virtual setObjectColor(cocos2d::_ccColor3B const&)
  virtual setOpacity(uchar)
}
class AnimatedShopKeeper : CCAnimatedSprite {
  animationFinished(char const*)
  create(ShopType)
  init(ShopType)
  startAnimating()
  virtual animationFinished(char const*)
}
class AnimatedSpriteDelegate {
  animationFinished(char const*)
  virtual animationFinished(char const*)
}
class AppDelegate : cocos2d::CCSceneDelegate {
  applicationDidEnterBackground()
  applicationDidFinishLaunching()
  applicationWillBecomeActive()
  applicationWillEnterForeground()
  applicationWillResignActive()
  bgScale()
  checkSound()
  get()
  hideLoadingCircle()
  loadingIsFinished()
  musicTest()
  pauseGame()
  platformShutdown()
  resumeSound()
  setIdleTimerDisabled(bool)
  setupGLView()
  showLoadingCircle(bool, bool, bool)
  trySaveGame()
  willSwitchToScene(cocos2d::CCScene*)
  virtual applicationDidEnterBackground(void)
  virtual applicationDidFinishLaunching(void)
  virtual applicationWillBecomeActive(void)
  virtual applicationWillEnterForeground(void)
  virtual applicationWillResignActive(void)
  virtual trySaveGame(void)
  virtual willSwitchToScene(cocos2d::CCScene *)
}
class ArtistCell : TableViewCell {
  draw()
  init()
  loadFromObject(SongInfoObject*)
  onNewgrounds(cocos2d::CCObject*)
  onYouTube(cocos2d::CCObject*)
  updateBGColor(int)
  virtual draw(void)
  virtual init(void)
}
class AudioEffectsLayer : cocos2d::CCLayerColor {
  audioStep(float)
  create(std::string)
  draw()
  getBGSquare()
  goingDown()
  init(std::string)
  resetAudioVars()
  triggerEffect(float)
  updateTweenAction(float, char const*)
  virtual draw(void)
  virtual updateTweenAction(float,char const*)
}
class BitmapFontCache : cocos2d::CCObject {
  fontWithConfigFile(char const*, float)
  init()
  purgeSharedFontCache()
  sharedFontCache()
}
class BonusDropdown : cocos2d::CCNode {
  create(std::string, int)
  init(std::string, int)
  show()
}
class BoomListLayer : cocos2d::CCLayerColor {
  create(BoomListView*, char const*)
  init(BoomListView*, char const*)
}
class BoomListView : cocos2d::CCLayer, TableViewDelegate, TableViewDataSource {
  TableViewCommitCellEditingStyleForRowAtIndexPath(TableView*, TableViewCellEditingStyle, CCIndexPath&)
  TableViewWillDisplayCellForRowAtIndexPath(CCIndexPath&, TableViewCell*, TableView*)
  TableViewWillReloadCellForRowAtIndexPath(CCIndexPath&, TableViewCell*, TableView*)
  cellForRowAtIndexPath(CCIndexPath&, TableView*)
  cellHeightForRowAtIndexPath(CCIndexPath&, TableView*)
  create(cocos2d::CCArray*, float, float, int, BoomListType)
  didSelectRowAtIndexPath(CCIndexPath&, TableView*)
  draw()
  getListCell(char const*)
  init(cocos2d::CCArray*, float, float, int, BoomListType)
  loadCell(TableViewCell*, int)
  numberOfRowsInSection(unsigned int, TableView*)
  numberOfSectionsInTableView(TableView*)
  setupList()
  virtual TableViewCommitCellEditingStyleForRowAtIndexPath(TableView *,TableViewCellEditingStyle,CCIndexPath &)
  virtual TableViewWillDisplayCellForRowAtIndexPath(CCIndexPath &,TableViewCell *,TableView *)
  virtual TableViewWillReloadCellForRowAtIndexPath(CCIndexPath &,TableViewCell *,TableView *)
  virtual cellForRowAtIndexPath(CCIndexPath &,TableView *)
  virtual cellHeightForRowAtIndexPath(CCIndexPath &,TableView *)
  virtual didSelectRowAtIndexPath(CCIndexPath &,TableView *)
  virtual draw(void)
  virtual getListCell(char const*)
  virtual loadCell(TableViewCell *,int)
  virtual numberOfRowsInSection(uint,TableView *)
  virtual numberOfSectionsInTableView(TableView *)
  virtual setupList(void)
}
class BoomScrollLayer : cocos2d::CCLayer {
  addPage(cocos2d::CCLayer*)
  addPage(cocos2d::CCLayer*, int)
  cancelAndStoleTouch(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  claimTouch(cocos2d::CCTouch*)
  create(cocos2d::CCArray*, int, bool)
  create(cocos2d::CCArray*, int, bool, cocos2d::CCArray*, DynamicScrollDelegate*)
  getPage(int)
  getRelativePageForNum(int)
  getRelativePosForPage(int)
  getTotalPages()
  init(cocos2d::CCArray*, int, bool, cocos2d::CCArray*, DynamicScrollDelegate*)
  instantMoveToPage(int)
  moveToPage(int)
  moveToPageEnded()
  pageNumberForPosition(cocos2d::CCPoint)
  positionForPageWithNumber(int)
  postVisit()
  preVisitWithClippingRect(cocos2d::CCRect)
  quickUpdate()
  registerWithTouchDispatcher()
  removePage(cocos2d::CCLayer*)
  removePageWithNumber(int)
  repositionPagesLooped()
  selectPage(int)
  setDotScale(float)
  setPagesIndicatorPosition(cocos2d::CCPoint)
  setupDynamicScrolling(cocos2d::CCArray*, DynamicScrollDelegate*)
  togglePageIndicators(bool)
  updateDots(float)
  updatePages()
  visit()
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual registerWithTouchDispatcher(void)
  virtual visit(void)
}
class BoomScrollLayerDelegate {
  scrollLayerMoved(cocos2d::CCPoint)
  scrollLayerScrolledToPage(BoomScrollLayer*, int)
  scrollLayerScrollingStarted(BoomScrollLayer*)
  scrollLayerWillScrollToPage(BoomScrollLayer*, int)
  virtual scrollLayerMoved(cocos2d::CCPoint)
  virtual scrollLayerScrolledToPage(BoomScrollLayer *,int)
  virtual scrollLayerScrollingStarted(BoomScrollLayer *)
  virtual scrollLayerWillScrollToPage(BoomScrollLayer *,int)
}
class ButtonPage : cocos2d::CCLayer {
  create(cocos2d::CCArray*, cocos2d::CCPoint, int, float)
  init(cocos2d::CCArray*, cocos2d::CCPoint, int, float)
}
class ButtonSprite : cocos2d::CCSprite {
  create(char const*)
  create(char const*, float)
  create(char const*, int, int, float, bool)
  create(char const*, int, int, float, bool, char const*, char const*)
  create(char const*, int, int, float, bool, char const*, char const*, float)
  create(cocos2d::CCSprite*)
  create(cocos2d::CCSprite*, int, int, float, float, bool)
  create(cocos2d::CCSprite*, int, int, float, float, bool, char const*, bool)
  init(char const*, int, int, float, bool, char const*, char const*, float)
  init(cocos2d::CCSprite*, int, int, float, float, bool, char const*, bool)
  setColor(cocos2d::_ccColor3B)
  setString(char const*)
  updateBGImage(char const*)
  updateSpriteBGSize()
  updateSpriteOffset(cocos2d::CCPoint)
}
class CCAlertCircle : cocos2d::CCNode {
  create()
  draw()
  init()
  virtual draw(void)
  virtual init(void)
}
class CCAnimatedSprite : cocos2d::CCSprite {
  animationFinished(char const*)
  animationFinishedO(cocos2d::CCObject*)
  cleanupSprite()
  createWithType(char const*)
  initWithType(char const*)
  loadType(char const*)
  runAnimation(std::string)
  runAnimationForced(std::string)
  setColor(cocos2d::_ccColor3B)
  setOpacity(unsigned char)
  stopTween()
  switchToMode(spriteMode)
  tweenToAnimation(std::string, float)
  tweenToAnimationFinished()
  willPlayAnimation()
  virtual animationFinished(char const*)
  virtual animationFinishedO(cocos2d::CCObject *)
  virtual setOpacity(uchar)
}
class CCAnimateFrameCache : cocos2d::CCObject {
  addCustomSpriteFramesWithFile(char const*)
  addDict(DS_Dictionary*, char const*)
  addDict(cocos2d::CCDictionary*, char const*)
  addSpriteFramesWithFile(char const*)
  init()
  purgeSharedSpriteFrameCache()
  removeSpriteFrames()
  sharedSpriteFrameCache()
  spriteFrameByName(char const*)
}
class CCBlockLayer : cocos2d::CCLayerColor {
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create()
  customSetup()
  disableUI()
  draw()
  enableUI()
  enterAnimFinished()
  enterLayer()
  exitLayer()
  hideLayer(bool)
  init()
  keyBackClicked()
  layerHidden()
  layerVisible()
  registerWithTouchDispatcher()
  showLayer(bool)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual customSetup(void)
  virtual disableUI(void)
  virtual draw(void)
  virtual enableUI(void)
  virtual enterAnimFinished(void)
  virtual enterLayer(void)
  virtual exitLayer(void)
  virtual hideLayer(bool)
  virtual init(void)
  virtual keyBackClicked(void)
  virtual layerHidden(void)
  virtual layerVisible(void)
  virtual registerWithTouchDispatcher(void)
  virtual showLayer(bool)
}
class CCCircleAlert : CCCircleWave {
  create(float, float, float)
  init(float, float, float)
}
class CCCircleWave : cocos2d::CCNode {
  baseSetup(float)
  create(float, float, float, bool)
  create(float, float, float, bool, bool)
  draw()
  followObject(cocos2d::CCNode*, bool)
  init(float, float, float, bool, bool)
  removeMeAndCleanup()
  setPosition(cocos2d::CCPoint const&)
  updatePosition(float)
  updateTweenAction(float, char const*)
  virtual draw(void)
  virtual removeMeAndCleanup(void)
  virtual setPosition(cocos2d::CCPoint const&)
  virtual updateTweenAction(float,char const*)
}
class CCCircleWaveDelegate {
  circleWaveWillBeRemoved(CCCircleWave*)
  virtual circleWaveWillBeRemoved(CCCircleWave *)
}
class CCContentLayer : cocos2d::CCLayerColor {
  create(cocos2d::_ccColor4B const&, float, float)
  setPosition(cocos2d::CCPoint const&)
  virtual setPosition(cocos2d::CCPoint const&)
}
class CCContentManager : cocos2d::CCObject {
  addDict(char const*, bool)
  addDictDS(char const*)
  clearCache()
  init()
  sharedManager()
}
class CCCountdown : cocos2d::CCSprite {
  create()
  init()
  lapFinished()
  setOpacity(unsigned char)
  startTimerWithSeconds(float, void (cocos2d::CCObject::*)(), cocos2d::CCNode*)
  virtual init(void)
  virtual setOpacity(uchar)
}
class CCCounterLabel : cocos2d::CCLabelBMFont {
  calculateStepSize()
  create(int, char const*, FormatterType)
  disableCounter()
  enableCounter()
  fastUpdateCounter()
  getTargetCount()
  init(int, char const*, FormatterType)
  setTargetCount(int)
  setupFormatter(FormatterType)
  updateCounter(float)
  updateString()
}
class CCIndexPath : cocos2d::CCObject {
  CCIndexPathWithSectionRow(int, int)
  operator=(CCIndexPath const&)
}
class CCLightFlash : cocos2d::CCNode {
  cleanupFlash()
  create()
  fadeAndRemove()
  init()
  playEffect(cocos2d::CCPoint, cocos2d::_ccColor3B, float, float, float, float, float, float, float, float, float, float, float, float, float, float, int, bool, bool, float)
  removeLights()
  showFlash()
  virtual init(void)
}
class CCLightStrip : cocos2d::CCNode {
  create(float, float, float, float, float)
  draw()
  init(float, float, float, float, float)
  updateTweenAction(float, char const*)
  virtual draw(void)
  virtual updateTweenAction(float,char const*)
}
class CCMenuItemSpriteExtra : cocos2d::CCMenuItemSprite {
  activate()
  create(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  init(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  selected()
  setSizeMult(float)
  unselected()
  useAnimationType(MenuAnimationType)
  virtual activate(void)
  virtual selected(void)
  virtual unselected(void)
}
class CCMenuItemToggler : cocos2d::CCMenuItem {
  activate()
  activeItem()
  create(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  init(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  normalTouch(cocos2d::CCObject*)
  selected()
  selectedTouch(cocos2d::CCObject*)
  setEnabled(bool)
  setSizeMult(float)
  toggle(bool)
  unselected()
  virtual activate(void)
  virtual selected(void)
  virtual setEnabled(bool)
  virtual unselected(void)
}
class CCMoveCNode : cocos2d::CCNode {
  create()
  init()
  virtual init(void)
}
class CCNodeContainer : cocos2d::CCNode {
  create()
  init()
  visit()
  virtual init(void)
  virtual visit(void)
}
class CCPartAnimSprite : cocos2d::CCSprite {
  changeTextureOfID(char const*, char const*)
  countParts()
  createWithAnimDesc(char const*, cocos2d::CCTexture2D*)
  dirtify()
  displayFrame()
  getSpriteForKey(char const*)
  initWithAnimDesc(char const*, cocos2d::CCTexture2D*)
  isFrameDisplayed(cocos2d::CCSpriteFrame*)
  setBlendFunc(cocos2d::_ccBlendFunc)
  setColor(cocos2d::_ccColor3B)
  setDisplayFrame(cocos2d::CCSpriteFrame*)
  setFlipX(bool)
  setFlipY(bool)
  setOpacity(unsigned char)
  setScale(float)
  setScaleX(float)
  setScaleY(float)
  transformSprite(frameValues)
  tweenSpriteTo(frameValues, float)
  tweenToFrame(cocos2d::CCSpriteFrame*, float)
  virtual displayFrame(void)
  virtual isFrameDisplayed(cocos2d::CCSpriteFrame *)
  virtual setBlendFunc(cocos2d::_ccBlendFunc)
  virtual setDisplayFrame(cocos2d::CCSpriteFrame *)
  virtual setOpacity(uchar)
  virtual setScale(float)
  virtual setScaleX(float)
  virtual setScaleY(float)
}
class CCScrollLayerExt : cocos2d::CCLayer {
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  constraintContent()
  getMaxY()
  getMinY()
  moveToTop()
  moveToTopWithOffset(float)
  postVisit()
  preVisitWithClippingRect(cocos2d::CCRect)
  registerWithTouchDispatcher()
  scrollLayer(float)
  scrollingEnd()
  setContentLayerSize(cocos2d::CCSize)
  setContentOffset(cocos2d::CCPoint, bool)
  updateIndicators(float)
  visit()
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual postVisit(void)
  virtual preVisitWithClippingRect(cocos2d::CCRect)
  virtual registerWithTouchDispatcher(void)
  virtual visit(void)
}
class CCScrollLayerExtDelegate {
  scrllViewWillBeginDecelerating(CCScrollLayerExt*)
  scrollViewDidEndDecelerating(CCScrollLayerExt*)
  scrollViewDidEndMoving(CCScrollLayerExt*)
  scrollViewTouchBegin(CCScrollLayerExt*)
  scrollViewTouchEnd(CCScrollLayerExt*)
  scrollViewTouchMoving(CCScrollLayerExt*)
  virtual scrllViewWillBeginDecelerating(CCScrollLayerExt *)
  virtual scrollViewDidEndDecelerating(CCScrollLayerExt *)
  virtual scrollViewDidEndMoving(CCScrollLayerExt *)
  virtual scrollViewTouchBegin(CCScrollLayerExt *)
  virtual scrollViewTouchEnd(CCScrollLayerExt *)
  virtual scrollViewTouchMoving(CCScrollLayerExt *)
}
class CCSpritePart : CCSpritePlus {
  create(cocos2d::CCTexture2D*)
  createWithSpriteFrameName(char const*)
  frameChanged(std::string)
  getBeingUsed()
  hideInactive()
  resetTextureRect()
  setBeingUsed(bool)
  updateDisplayFrame(char const*)
}
class CCSpritePlus : cocos2d::CCSprite {
  addFollower(cocos2d::CCNode*)
  createWithSpriteFrame(cocos2d::CCSpriteFrame*)
  createWithSpriteFrameName(char const*)
  followSprite(CCSpritePlus*)
  getFollower()
  initWithSpriteFrameName(char const*)
  initWithTexture(cocos2d::CCTexture2D*)
  removeFollower(cocos2d::CCNode*)
  setFlipX(bool)
  setFlipY(bool)
  setPosition(cocos2d::CCPoint const&)
  setRotation(float)
  setScale(float)
  setScaleX(float)
  setScaleY(float)
  stopFollow()
  virtual initWithSpriteFrameName(char const*)
  virtual initWithTexture(cocos2d::CCTexture2D *)
  virtual setFlipX(bool)
  virtual setFlipY(bool)
  virtual setPosition(cocos2d::CCPoint const&)
  virtual setRotation(float)
  virtual setScale(float)
  virtual setScaleX(float)
  virtual setScaleY(float)
}
class CCSpriteWithHue : cocos2d::CCSprite {
  create(std::string const&)
  create(std::string const&, cocos2d::CCRect const&)
  createWithSpriteFrame(cocos2d::CCSpriteFrame*)
  createWithSpriteFrameName(std::string const&)
  createWithTexture(cocos2d::CCTexture2D*)
  createWithTexture(cocos2d::CCTexture2D*, cocos2d::CCRect const&, bool)
  draw()
  getAlpha()
  getHue()
  getUniformLocations()
  initShader()
  initWithSpriteFrame(cocos2d::CCSpriteFrame*)
  initWithTexture(cocos2d::CCTexture2D*)
  initWithTexture(cocos2d::CCTexture2D*, cocos2d::CCRect const&)
  initWithTexture(cocos2d::CCTexture2D*, cocos2d::CCRect const&, bool)
  setHue(float)
  setHueDegrees(float)
  setupDefaultSettings()
  shaderBody()
  updateColor()
  updateColorMatrix()
  updateHue(float)
  virtual draw(void)
  virtual initWithSpriteFrame(cocos2d::CCSpriteFrame *)
  virtual initWithTexture(cocos2d::CCTexture2D *)
  virtual initWithTexture(cocos2d::CCTexture2D *,cocos2d::CCRect const&)
  virtual initWithTexture(cocos2d::CCTexture2D *,cocos2d::CCRect const&,bool)
  virtual updateColor(void)
}
class CCTextInputNode : cocos2d::CCLayer, cocos2d::CCIMEDelegate, cocos2d::CCTextFieldDelegate {
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create(float, float, char const*, char const*, int, char const*)
  forceOffset()
  getString()
  init(float, float, char const*, char const*, int, char const*)
  keyboardWillHide(cocos2d::CCIMEKeyboardNotificationInfo&)
  keyboardWillShow(cocos2d::CCIMEKeyboardNotificationInfo&)
  onClickTrackNode(bool)
  onTextFieldAttachWithIME(cocos2d::CCTextFieldTTF*)
  onTextFieldDetachWithIME(cocos2d::CCTextFieldTTF*)
  onTextFieldInsertText(cocos2d::CCTextFieldTTF*, char const*, int)
  refreshLabel()
  registerWithTouchDispatcher()
  setAllowedChars(std::string)
  setLabelNormalColor(cocos2d::_ccColor3B)
  setLabelPlaceholderColor(cocos2d::_ccColor3B)
  setLabelPlaceholderScale(float)
  setMaxLabelScale(float)
  setMaxLabelWidth(float)
  setString(std::string)
  textChanged()
  updateBlinkLabel()
  updateLabel(std::string)
  visit()
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual keyboardWillHide(cocos2d::CCIMEKeyboardNotificationInfo &)
  virtual keyboardWillShow(cocos2d::CCIMEKeyboardNotificationInfo &)
  virtual onClickTrackNode(bool)
  virtual onTextFieldAttachWithIME(cocos2d::CCTextFieldTTF *)
  virtual onTextFieldDetachWithIME(cocos2d::CCTextFieldTTF *)
  virtual onTextFieldInsertText(cocos2d::CCTextFieldTTF *,char const*,int)
  virtual registerWithTouchDispatcher(void)
  virtual textChanged(void)
  virtual visit(void)
}
class ChallengeNode : cocos2d::CCNode {
  create(GJChallengeItem*, ChallengesPage*, bool)
  init(GJChallengeItem*, ChallengesPage*, bool)
  onClaimReward(cocos2d::CCObject*)
  updateTimeLabel(std::string)
}
class ChallengesPage : FLAlertLayer, FLAlertLayerProtocol, GJChallengeDelegate, CurrencyRewardDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  challengeStatusFailed()
  challengeStatusFinished()
  claimItem(ChallengeNode*, GJChallengeItem*, cocos2d::CCPoint)
  create()
  createChallengeNode(int, bool, float, bool)
  currencyWillExit(CurrencyRewardLayer*)
  exitNodeAtSlot(int, float)
  init()
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  registerWithTouchDispatcher()
  show()
  tryGetChallenges()
  updateDots()
  updateTimers(float)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual challengeStatusFailed(void)
  virtual challengeStatusFinished(void)
  virtual currencyWillExit(CurrencyRewardLayer *)
  virtual init(void)
  virtual keyBackClicked(void)
  virtual registerWithTouchDispatcher(void)
  virtual show(void)
}
class CheckpointObject : cocos2d::CCNode {
  create()
  getColorAction(ColorAction*, cocos2d::_ccColor3B)
  getObject()
  init()
  setObject(GameObject*)
  virtual init(void)
}
class CollisionBlockPopup : FLAlertLayer, TextInputDelegate {
  create(EffectGameObject*, cocos2d::CCArray*)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onDynamicBlock(cocos2d::CCObject*)
  onItemIDArrow(cocos2d::CCObject*)
  onNextItemID(cocos2d::CCObject*)
  show()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateEditorLabel()
  updateItemID()
  updateTextInputLabel()
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class CollisionTriggerAction : cocos2d::CCNode {
  create(int, int, int, bool, bool)
  createFromString(std::string)
  getSaveString()
  init(int, int, int, bool, bool)
}
class ColorAction : cocos2d::CCNode {
  create(cocos2d::_ccColor3B, bool, int)
  create(cocos2d::_ccColor3B, cocos2d::_ccColor3B, float, double, bool)
  create(cocos2d::_ccColor3B, cocos2d::_ccColor3B, float, double, bool, int, float, float)
  create()
  getCopy()
  getSaveString()
  init(cocos2d::_ccColor3B, cocos2d::_ccColor3B, float, double, bool, int, float, float)
  resetAction()
  setupFromDict(cocos2d::CCDictionary*)
  setupFromString(std::string)
  step(float)
  updateCustomColor(cocos2d::_ccColor3B, cocos2d::_ccColor3B)
}
class ColorActionSprite : cocos2d::CCNode {
  create()
  init()
  virtual init(void)
}
class ColorChannelSprite : cocos2d::CCSprite {
  create()
  init()
  updateBlending(bool)
  updateCopyLabel(int, bool)
  updateOpacity(float)
  updateValues(ColorAction*)
  virtual init(void)
}
class ColoredSection : cocos2d::CCObject {
  create(cocos2d::_ccColor3B, int, int)
  init(cocos2d::_ccColor3B, int, int)
}
class ColorSelectDelegate {
  colorSelectClosed(cocos2d::CCNode*)
  virtual colorSelectClosed(cocos2d::CCNode *)
}
class ColorSelectLiveOverlay : FLAlertLayer {
  closeColorSelect(cocos2d::CCObject*)
  colorValueChanged(cocos2d::_ccColor3B)
  create(ColorAction*, ColorAction*, EffectGameObject*)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint)
  createWithActions(ColorAction*, ColorAction*)
  createWithObject(EffectGameObject*)
  determineStartValues()
  getColorValue()
  init(ColorAction*, ColorAction*, EffectGameObject*)
  keyBackClicked()
  onSelectTab(cocos2d::CCObject*)
  selectColor(cocos2d::_ccColor3B)
  show()
  sliderChanged(cocos2d::CCObject*)
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  toggleControls(bool)
  updateColorLabel()
  updateColorValue()
  updateOpacity()
  virtual keyBackClicked(void)
  virtual show(void)
}
class ColorSelectPopup : FLAlertLayer, cocos2d::extension::ColorPickerDelegate, TextInputDelegate, GJSpecialColorSelectDelegate {
  closeColorSelect(cocos2d::CCObject*)
  colorSelectClosed(GJSpecialColorSelect*, int)
  colorValueChanged(cocos2d::_ccColor3B)
  create(ColorAction*)
  create(EffectGameObject*, cocos2d::CCArray*)
  create(EffectGameObject*, cocos2d::CCArray*, ColorAction*)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCArray*)
  determineStartValues()
  getColorValue()
  init(EffectGameObject*, cocos2d::CCArray*, ColorAction*)
  keyBackClicked()
  onCopy(cocos2d::CCObject*)
  onCopyOpacity(cocos2d::CCObject*)
  onDefault(cocos2d::CCObject*)
  onMultiTrigger(cocos2d::CCObject*)
  onPaste(cocos2d::CCObject*)
  onPlayerColor1(cocos2d::CCObject*)
  onPlayerColor2(cocos2d::CCObject*)
  onSelectSpecialColor(cocos2d::CCObject*)
  onSpawnedByTrigger(cocos2d::CCObject*)
  onTintGround(cocos2d::CCObject*)
  onToggleHSVMode(cocos2d::CCObject*)
  onToggleTintMode(cocos2d::CCObject*)
  onTouchTriggered(cocos2d::CCObject*)
  onUpdateCopyColor(cocos2d::CCObject*)
  onUpdateCustomColor(cocos2d::CCObject*)
  selectColor(cocos2d::_ccColor3B)
  show()
  sliderChanged(cocos2d::CCObject*)
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateColorValue()
  updateCopyColor()
  updateCopyColorTextInputLabel()
  updateCustomColorIdx()
  updateDurLabel()
  updateDuration()
  updateEditorLabel()
  updateHSVMode()
  updateHSVValue()
  updateMultiTriggerBtn()
  updateOpacity()
  updateOpacityLabel()
  updateSpawnedByTrigger()
  updateTextInputLabel()
  updateTouchTriggered()
  virtual colorSelectClosed(GJSpecialColorSelect *,int)
  virtual colorValueChanged(cocos2d::_ccColor3B)
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class ColorSetupDelegate {
  colorSetupClosed(int)
  virtual colorSetupClosed(int)
}
class CommentCell : TableViewCell, LikeItemDelegate, FLAlertLayerProtocol {
  FLAlert_Clicked(FLAlertLayer*, bool)
  draw()
  incrementDislikes()
  incrementLikes()
  init()
  likedItem(LikeItemType, int, bool)
  loadFromComment(GJComment*)
  onConfirmDelete(cocos2d::CCObject*)
  onDelete()
  onGoToLevel(cocos2d::CCObject*)
  onLike(cocos2d::CCObject*)
  onUndelete()
  onUnhide(cocos2d::CCObject*)
  onViewProfile(cocos2d::CCObject*)
  updateBGColor(int)
  updateLabelValues()
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual draw(void)
  virtual init(void)
  virtual likedItem(LikeItemType,int,bool)
}
class CommentUploadDelegate {
  commentDeleteFailed(int, int)
  commentUploadFailed(int, CommentError)
  commentUploadFinished(int)
  virtual commentDeleteFailed(int,int)
  virtual commentUploadFailed(int,CommentError)
  virtual commentUploadFinished(int)
}
class CommunityCreditNode : cocos2d::CCNode {
  create(int, int, int, std::string)
  init(int, int, int, std::string)
}
class CommunityCreditsPage : FLAlertLayer {
  FLAlert_Clicked(FLAlertLayer*, bool)
  create()
  goToPage(int)
  init()
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onSwitchPage(cocos2d::CCObject*)
  registerWithTouchDispatcher()
  show()
  virtual init(void)
  virtual keyBackClicked(void)
  virtual registerWithTouchDispatcher(void)
  virtual show(void)
}
class ConfigureHSVWidget : cocos2d::CCNode {
  create(cocos2d::_ccHSVValue, bool)
  init(cocos2d::_ccHSVValue, bool)
  onResetHSV(cocos2d::CCObject*)
  onToggleSConst(cocos2d::CCObject*)
  onToggleVConst(cocos2d::CCObject*)
  sliderChanged(cocos2d::CCObject*)
  updateLabels()
}
class ConfigureValuePopup : FLAlertLayer, TextInputDelegate {
  create(ConfigureValuePopupDelegate*, float, float, float, std::string, std::string)
  init(ConfigureValuePopupDelegate*, float, float, float, std::string, std::string)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  sliderChanged(cocos2d::CCObject*)
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  updateTextInputLabel()
  virtual keyBackClicked(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
}
class ConfigureValuePopupDelegate {
  valuePopupClosed(ConfigureValuePopup*, float)
  virtual valuePopupClosed(ConfigureValuePopup *,float)
}
class CountTriggerAction : cocos2d::CCNode {
  create(int, int, bool, bool)
  createFromString(std::string)
  getSaveString()
  init(int, int, bool, bool)
}
class CreateGuidelinesLayer : FLAlertLayer, FLAlertLayerProtocol {
  FLAlert_Clicked(FLAlertLayer*, bool)
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create(LevelSettingsObject*)
  doClearGuidelines()
  getMergedRecordString(std::string, std::string)
  init(LevelSettingsObject*)
  keyBackClicked()
  keyDown(cocos2d::enumKeyCodes)
  keyUp(cocos2d::enumKeyCodes)
  onClearGuidelines(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  onInfo(cocos2d::CCObject*)
  onRecord(cocos2d::CCObject*)
  onStop(cocos2d::CCObject*)
  registerTouch()
  registerWithTouchDispatcher()
  toggleItems(bool)
  update(float)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual keyBackClicked(void)
  virtual keyDown(cocos2d::enumKeyCodes)
  virtual keyUp(cocos2d::enumKeyCodes)
  virtual registerWithTouchDispatcher(void)
  virtual update(float)
}
class CreateMenuItem : CCMenuItemSpriteExtra {
  create(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  init(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
}
class CreatorLayer : cocos2d::CCLayer, cocos2d::CCSceneTransitionDelegate, DialogDelegate {
  canPlayOnlineLevels()
  create()
  dialogClosed(DialogLayer*)
  init()
  keyBackClicked()
  onBack(cocos2d::CCObject*)
  onChallenge(cocos2d::CCObject*)
  onDailyLevel(cocos2d::CCObject*)
  onFameLevels(cocos2d::CCObject*)
  onFeaturedLevels(cocos2d::CCObject*)
  onGauntlets(cocos2d::CCObject*)
  onLeaderboards(cocos2d::CCObject*)
  onMapPacks(cocos2d::CCObject*)
  onMyLevels(cocos2d::CCObject*)
  onOnlineLevels(cocos2d::CCObject*)
  onOnlyFullVersion(cocos2d::CCObject*)
  onSavedLevels(cocos2d::CCObject*)
  onSecretVault(cocos2d::CCObject*)
  onTreasureRoom(cocos2d::CCObject*)
  onWeeklyLevel(cocos2d::CCObject*)
  scene()
  sceneWillResume()
  virtual dialogClosed(DialogLayer *)
  virtual init(void)
  virtual keyBackClicked(void)
  virtual sceneWillResume(void)
}
class CurrencyRewardDelegate {
  currencyWillExit(CurrencyRewardLayer*)
  virtual currencyWillExit(CurrencyRewardLayer *)
}
class CurrencyRewardLayer : cocos2d::CCLayer {
  create(int, int, int, CurrencySpriteType, int, CurrencySpriteType, int, cocos2d::CCPoint, CurrencyRewardType, float)
  createObjects(CurrencySpriteType, int, cocos2d::CCPoint, float)
  createObjectsFull(CurrencySpriteType, int, cocos2d::CCSprite*, cocos2d::CCPoint, float)
  createUnlockObject(cocos2d::CCSprite*, cocos2d::CCPoint, float)
  incrementCount(int)
  incrementDiamondsCount(int)
  incrementSpecialCount1(int)
  incrementSpecialCount2(int)
  incrementStarsCount(int)
  init(int, int, int, CurrencySpriteType, int, CurrencySpriteType, int, cocos2d::CCPoint, CurrencyRewardType, float)
  pulseSprite(cocos2d::CCSprite*)
  update(float)
  virtual update(float)
}
class CurrencySprite : CCSpritePlus {
  create(CurrencySpriteType, bool)
  createWithSprite(cocos2d::CCSprite*)
  init(CurrencySpriteType, bool)
  initWithSprite(cocos2d::CCSprite*)
  rewardToSpriteType(int)
  spriteTypeToStat(CurrencySpriteType)
}
class CustomizeObjectLayer : FLAlertLayer, TextInputDelegate, HSVWidgetPopupDelegate, ColorSelectDelegate, ColorSetupDelegate {
  colorSelectClosed(cocos2d::CCNode*)
  colorSetupClosed(int)
  create(GameObject*, cocos2d::CCArray*)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint)
  determineStartValues()
  getActiveMode(bool)
  getButtonByTag(int)
  getHSV()
  highlightSelected(ButtonSprite*)
  hsvPopupClosed(HSVWidgetPopup*, cocos2d::_ccHSVValue)
  init(GameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onBreakApart(cocos2d::CCObject*)
  onBrowse(cocos2d::CCObject*)
  onClear(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  onCopy(cocos2d::CCObject*)
  onEditColor(cocos2d::CCObject*)
  onHSV(cocos2d::CCObject*)
  onNextColorChannel(cocos2d::CCObject*)
  onPaste(cocos2d::CCObject*)
  onSelectColor(cocos2d::CCObject*)
  onSelectMode(cocos2d::CCObject*)
  onToggleGlow(cocos2d::CCObject*)
  onUpdateCustomColor(cocos2d::CCObject*)
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputOpened(CCTextInputNode*)
  toggleVisible()
  updateChannelLabel(int)
  updateColorSprite()
  updateCurrentSelection()
  updateCustomColorLabels()
  updateHSVButtons()
  updateSelected(int)
  virtual colorSelectClosed(cocos2d::CCNode *)
  virtual colorSetupClosed(int)
  virtual hsvPopupClosed(HSVWidgetPopup *,cocos2d::_ccHSVValue)
  virtual keyBackClicked(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputOpened(CCTextInputNode *)
}
class CustomListView : BoomListView {
  create(cocos2d::CCArray*, float, float, int, BoomListType)
  getListCell(char const*)
  loadCell(TableViewCell*, int)
  reloadAll()
  setupList()
  virtual getListCell(char const*)
  virtual loadCell(TableViewCell *,int)
  virtual setupList(void)
}
class CustomSongCell : TableViewCell {
  draw()
  init()
  loadFromObject(SongInfoObject*)
  onDelete(cocos2d::CCObject*)
  updateBGColor(int)
  virtual draw(void)
  virtual init(void)
}
class CustomSongLayer : FLAlertLayer, FLAlertLayerProtocol, TextInputDelegate, GJDropDownLayerDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  create(LevelSettingsObject*)
  dropDownLayerWillClose(GJDropDownLayer*)
  init(LevelSettingsObject*)
  keyBackClicked()
  onArtists(cocos2d::CCObject*)
  onChanges(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  onCreateLines(cocos2d::CCObject*)
  onGuidelines(cocos2d::CCObject*)
  onInfo(cocos2d::CCObject*)
  onNewgrounds(cocos2d::CCObject*)
  onOptions(cocos2d::CCObject*)
  onSearch(cocos2d::CCObject*)
  onSongBrowser(cocos2d::CCObject*)
  onSupporter(cocos2d::CCObject*)
  show()
  showNewgroundsMessage()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputOpened(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual dropDownLayerWillClose(GJDropDownLayer *)
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputOpened(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class CustomSongLayerDelegate {
  customSongLayerClosed()
  virtual customSongLayerClosed(void)
}
class CustomSongWidget : cocos2d::CCNode, MusicDownloadDelegate, FLAlertLayerProtocol {
  FLAlert_Clicked(FLAlertLayer*, bool)
  create(SongInfoObject*, LevelSettingsObject*, bool, bool, bool, bool, bool)
  downloadFailed()
  downloadSongFailed(int, GJSongError)
  downloadSongFinished(SongInfoObject*)
  getSongInfoIfUnloaded()
  init(SongInfoObject*, LevelSettingsObject*, bool, bool, bool, bool, bool)
  loadSongInfoFailed(int, GJSongError)
  loadSongInfoFinished(SongInfoObject*)
  onCancelDownload(cocos2d::CCObject*)
  onDownload(cocos2d::CCObject*)
  onGetSongInfo(cocos2d::CCObject*)
  onMore(cocos2d::CCObject*)
  onPlayback(cocos2d::CCObject*)
  onSelect(cocos2d::CCObject*)
  setSongObject(SongInfoObject*)
  songStateChanged()
  startDownload()
  startMonitorDownload()
  toggleUpdateButton(bool)
  updateDownloadProgress(float)
  updateError(GJSongError)
  updatePlaybackBtn()
  updateProgressBar(int)
  updateSongInfo()
  updateSongObject(SongInfoObject*)
  verifySongID(int)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual downloadSongFailed(int,GJSongError)
  virtual downloadSongFinished(SongInfoObject *)
  virtual loadSongInfoFailed(int,GJSongError)
  virtual loadSongInfoFinished(SongInfoObject *)
  virtual songStateChanged(void)
}
class DailyLevelNode : cocos2d::CCNode, FLAlertLayerProtocol {
  FLAlert_Clicked(FLAlertLayer*, bool)
  create(GJGameLevel*, DailyLevelPage*, bool)
  init(GJGameLevel*, DailyLevelPage*, bool)
  onClaimReward(cocos2d::CCObject*)
  onSkipLevel(cocos2d::CCObject*)
  showSkipButton()
  updateTimeLabel(std::string)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
}
class DailyLevelPage : FLAlertLayer, FLAlertLayerProtocol, GJDailyLevelDelegate, LevelDownloadDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  claimLevelReward(DailyLevelNode*, GJGameLevel*, cocos2d::CCPoint)
  create(bool)
  createDailyNode(GJGameLevel*, bool, float, bool)
  createNodeIfLoaded()
  dailyStatusFailed(bool)
  dailyStatusFinished(bool)
  downloadAndCreateNode()
  exitDailyNode(DailyLevelNode*, float)
  getDailyTime()
  getDailyTimeString(int)
  init(bool)
  keyBackClicked()
  levelDownloadFailed(int)
  levelDownloadFinished(GJGameLevel*)
  onClose(cocos2d::CCObject*)
  refreshDailyPage()
  registerWithTouchDispatcher()
  show()
  skipDailyLevel(DailyLevelNode*, GJGameLevel*)
  tryGetDailyStatus()
  updateTimers(float)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual dailyStatusFailed(bool)
  virtual dailyStatusFinished(bool)
  virtual keyBackClicked(void)
  virtual levelDownloadFailed(int)
  virtual levelDownloadFinished(GJGameLevel *)
  virtual registerWithTouchDispatcher(void)
  virtual show(void)
}
class DelayedSpawnNode : cocos2d::CCObject {
  create()
  init()
}
class DelaySection : cocos2d::CCObject {
  create(int, float)
  init(int, float)
}
class DemonFilterDelegate {
  demonFilterSelectClosed(int)
  virtual demonFilterSelectClosed(int)
}
class DemonFilterSelectLayer : FLAlertLayer {
  create()
  init()
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  selectRating(cocos2d::CCObject*)
  virtual init(void)
  virtual keyBackClicked(void)
}
class DialogDelegate {
  dialogClosed(DialogLayer*)
  virtual dialogClosed(DialogLayer *)
}
class DialogLayer : cocos2d::CCLayerColor, TextAreaDelegate {
  animateIn(DialogAnimationType)
  animateInDialog()
  animateInRandomSide()
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create(DialogObject*, int)
  createDialogLayer(DialogObject*, cocos2d::CCArray*, int)
  createWithObjects(cocos2d::CCArray*, int)
  displayDialogObject(DialogObject*)
  displayNextObject()
  fadeInTextFinished(TextArea*)
  finishCurrentAnimation()
  handleDialogTap()
  init(DialogObject*, cocos2d::CCArray*, int)
  keyBackClicked()
  keyDown(cocos2d::enumKeyCodes)
  onClose()
  onEnter()
  registerWithTouchDispatcher()
  updateChatPlacement(DialogChatPlacement)
  updateNavButtonFrame()
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual fadeInTextFinished(TextArea *)
  virtual keyBackClicked(void)
  virtual keyDown(cocos2d::enumKeyCodes)
  virtual onEnter(void)
  virtual registerWithTouchDispatcher(void)
}
class DialogObject : cocos2d::CCObject {
  create(std::string, std::string, int, float, bool, cocos2d::_ccColor3B)
  init(std::string, std::string, int, float, bool, cocos2d::_ccColor3B)
}
class DownloadMessageDelegate {
  downloadMessageFailed(int)
  downloadMessageFinished(GJUserMessage*)
  virtual downloadMessageFailed(int)
  virtual downloadMessageFinished(GJUserMessage *)
}
class DrawGridLayer : cocos2d::CCLayer {
  addPlayer2Point(cocos2d::CCPoint, bool)
  addPlayerPoint(cocos2d::CCPoint)
  addToEffects(EffectGameObject*)
  addToGuides(GameObject*)
  addToSpeedObjects(GameObject*)
  clearPlayerPoints()
  create(cocos2d::CCNode*, LevelEditorLayer*)
  draw()
  getPortalMinMax(GameObject*)
  init(cocos2d::CCNode*, LevelEditorLayer*)
  loadTimeMarkers(std::string)
  removeFromEffects(EffectGameObject*)
  removeFromGuides(GameObject*)
  removeFromSpeedObjects(GameObject*)
  sortSpeedObjects()
  timeForXPos(float)
  update(float)
  updateMusicGuideTime(float)
  updateTimeMarkers()
  xPosForTime(float)
  virtual draw(void)
  virtual update(float)
}
class DungeonBarsSprite : cocos2d::CCNode {
  animateOutBars()
  create()
  init()
  visit()
  virtual init(void)
  virtual visit(void)
}
class DynamicScrollDelegate {
}
class EditButtonBar : cocos2d::CCNode {
  create(cocos2d::CCArray*, cocos2d::CCPoint, int, bool, int, int)
  getPage()
  goToPage(int)
  init(cocos2d::CCArray*, cocos2d::CCPoint, int, bool, int, int)
  loadFromItems(cocos2d::CCArray*, int, int, bool)
  onLeft(cocos2d::CCObject*)
  onRight(cocos2d::CCObject*)
  reloadItems(int, int)
}
class EditGameObjectPopup : FLAlertLayer {
  create(EffectGameObject*, cocos2d::CCArray*)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onAllowMultiActivate(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  show()
  virtual keyBackClicked(void)
  virtual show(void)
}
class EditLevelLayer : cocos2d::CCLayer, TextInputDelegate, FLAlertLayerProtocol, UploadActionDelegate, UploadPopupDelegate, SetIDPopupDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  closeTextInputs()
  confirmClone(cocos2d::CCObject*)
  confirmDelete(cocos2d::CCObject*)
  confirmMoveToTop(cocos2d::CCObject*)
  create(GJGameLevel*)
  init(GJGameLevel*)
  keyBackClicked()
  keyDown(cocos2d::enumKeyCodes)
  onBack(cocos2d::CCObject*)
  onClone()
  onClosePopup(UploadActionPopup*)
  onDelete()
  onEdit(cocos2d::CCObject*)
  onHelp(cocos2d::CCObject*)
  onLevelInfo(cocos2d::CCObject*)
  onLowDetailMode(cocos2d::CCObject*)
  onMoveToTop()
  onPlay(cocos2d::CCObject*)
  onSetFolder(cocos2d::CCObject*)
  onShare(cocos2d::CCObject*)
  onTest(cocos2d::CCObject*)
  onUpdateDescription(cocos2d::CCObject*)
  playStep2()
  playStep3()
  scene(GJGameLevel*)
  setIDPopupClosed(SetIDPopup*, int)
  setupLevelInfo()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputOpened(CCTextInputNode*)
  updateDescText(char const*)
  uploadActionFailed(int, int)
  uploadActionFinished(int, int)
  verifyLevelName()
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual keyBackClicked(void)
  virtual keyDown(cocos2d::enumKeyCodes)
  virtual onClosePopup(UploadActionPopup *)
  virtual setIDPopupClosed(SetIDPopup *,int)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputOpened(CCTextInputNode *)
  virtual uploadActionFailed(int,int)
  virtual uploadActionFinished(int,int)
}
class EditorOptionsLayer : GJOptionsLayer {
  create()
  init()
  onButtonRows(cocos2d::CCObject*)
  onButtonsPerRow(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  setupOptions()
  virtual init(void)
  virtual onClose(cocos2d::CCObject *)
  virtual setupOptions(void)
}
class EditorPauseLayer : CCBlockLayer, FLAlertLayerProtocol {
  FLAlert_Clicked(FLAlertLayer*, bool)
  create(LevelEditorLayer*)
  customSetup()
  doResetUnused()
  init(LevelEditorLayer*)
  keyBackClicked()
  keyDown(cocos2d::enumKeyCodes)
  onAlignX(cocos2d::CCObject*)
  onAlignY(cocos2d::CCObject*)
  onBuildHelper(cocos2d::CCObject*)
  onCreateBase(cocos2d::CCObject*)
  onCreateEdges(cocos2d::CCObject*)
  onCreateOutline(cocos2d::CCObject*)
  onExitEditor(cocos2d::CCObject*)
  onExitNoSave(cocos2d::CCObject*)
  onHelp(cocos2d::CCObject*)
  onKeybindings(cocos2d::CCObject*)
  onOptions(cocos2d::CCObject*)
  onResetUnusedColors(cocos2d::CCObject*)
  onResume(cocos2d::CCObject*)
  onSave(cocos2d::CCObject*)
  onSaveAndExit(cocos2d::CCObject*)
  onSaveAndPlay(cocos2d::CCObject*)
  onSaveAndTest(cocos2d::CCObject*)
  onSelectAll(cocos2d::CCObject*)
  onSelectAllLeft(cocos2d::CCObject*)
  onSelectAllRight(cocos2d::CCObject*)
  onSong(cocos2d::CCObject*)
  onUnlockAllLayers(cocos2d::CCObject*)
  playStep2()
  playStep3()
  saveLevel()
  toggleDebugDraw(cocos2d::CCObject*)
  toggleEditorBackground(cocos2d::CCObject*)
  toggleEditorColorMode(cocos2d::CCObject*)
  toggleEditorGrid(cocos2d::CCObject*)
  toggleEditorGround(cocos2d::CCObject*)
  toggleEffectDuration(cocos2d::CCObject*)
  toggleEffectLines(cocos2d::CCObject*)
  toggleFollowPlayer(cocos2d::CCObject*)
  toggleGridOnTop(cocos2d::CCObject*)
  toggleIgnoreDamage(cocos2d::CCObject*)
  togglePlaytestMusic(cocos2d::CCObject*)
  toggleSelectFilter(cocos2d::CCObject*)
  toggleShowObjectInfo(cocos2d::CCObject*)
  uncheckAllPortals(cocos2d::CCObject*)
  updateSongButton()
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual customSetup(void)
  virtual keyBackClicked(void)
  virtual keyDown(cocos2d::enumKeyCodes)
}
class EditorUI : cocos2d::CCLayer, FLAlertLayerProtocol, ColorSelectDelegate, GJRotationControlDelegate, GJScaleControlDelegate, MusicDownloadDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  activateRotationControl(cocos2d::CCObject*)
  activateScaleControl(cocos2d::CCObject*)
  addSnapPosition(cocos2d::CCPoint)
  alignObjects(cocos2d::CCArray*, bool)
  angleChangeBegin()
  angleChangeEnded()
  angleChanged(float)
  applyOffset(GameObject*)
  applySpecialOffset(cocos2d::CCPoint, GameObject*, cocos2d::CCPoint)
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  changeSelectedObjects(cocos2d::CCArray*, bool)
  clickOnPosition(cocos2d::CCPoint)
  closeLiveColorSelect()
  colorSelectClosed(cocos2d::_ccColor3B)
  colorSelectClosed(cocos2d::CCNode*)
  constrainGameLayerPosition(float, float)
  constrainGameLayerPosition()
  copyObjects(cocos2d::CCArray*)
  create(LevelEditorLayer*)
  createCustomItems()
  createEdgeForObject(GameObject*, int)
  createGlow()
  createMoveMenu()
  createRockBase()
  createRockEdges()
  createRockOutline()
  createUndoSelectObject(bool)
  deactivateRotationControl()
  deactivateScaleControl()
  deleteObject(GameObject*, bool)
  deselectAll()
  deselectObject(GameObject*)
  deselectObject()
  deselectTargetPortals()
  disableButton(CreateMenuItem*)
  draw()
  dynamicGroupUpdate(bool)
  edgeForObject(int, int)
  editButton2Usable()
  editButtonUsable()
  editColor(cocos2d::CCObject*)
  editGroup(cocos2d::CCObject*)
  editObject(cocos2d::CCObject*)
  editObject2(cocos2d::CCObject*)
  editorLayerForArray(cocos2d::CCArray*, bool)
  enableButton(CreateMenuItem*)
  findSnapObject(cocos2d::CCPoint, float)
  findSnapObject(cocos2d::CCArray*, float)
  flipObjectsX(cocos2d::CCArray*)
  flipObjectsY(cocos2d::CCArray*)
  getButton(char const*, int, void (cocos2d::CCObject::*)(cocos2d::CCObject*), cocos2d::CCMenu*)
  getCreateBtn(int, int)
  getCreateMenuItemButton(cocos2d::CCSprite*, void (cocos2d::CCObject::*)(cocos2d::CCObject*), cocos2d::CCMenu*, float, int, cocos2d::CCPoint)
  getCycledObject(cocos2d::CCArray*, bool)
  getGridSnappedPos(cocos2d::CCPoint)
  getGroupCenter(cocos2d::CCArray*, bool)
  getLimitedPosition(cocos2d::CCPoint)
  getModeBtn(char const*, int)
  getRelativeOffset(GameObject*)
  getSelectedObjects()
  getSimpleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), cocos2d::CCMenu*)
  getSpriteButton(char const*, void (cocos2d::CCObject::*)(cocos2d::CCObject*), cocos2d::CCMenu*, float)
  getSpriteButton(char const*, void (cocos2d::CCObject::*)(cocos2d::CCObject*), cocos2d::CCMenu*, float, int, cocos2d::CCPoint)
  getSpriteButton(cocos2d::CCSprite*, void (cocos2d::CCObject::*)(cocos2d::CCObject*), cocos2d::CCMenu*, float, int, cocos2d::CCPoint)
  getTouchPoint(cocos2d::CCTouch*, cocos2d::CCEvent*)
  getXMin(int)
  init(LevelEditorLayer*)
  isLiveColorSelectTrigger(GameObject*)
  isSpecialSnapObject(int)
  keyBackClicked()
  keyDown(cocos2d::enumKeyCodes)
  keyUp(cocos2d::enumKeyCodes)
  liveEditColorUsable()
  menuItemFromObjectString(std::string, int)
  moveForCommand(EditCommand)
  moveGamelayer(cocos2d::CCPoint)
  moveObject(GameObject*, cocos2d::CCPoint)
  moveObjectCall(EditCommand)
  moveObjectCall(cocos2d::CCObject*)
  offsetForKey(int)
  onCopy(cocos2d::CCObject*)
  onCopyState(cocos2d::CCObject*)
  onCreate()
  onCreateButton(cocos2d::CCObject*)
  onCreateObject(int)
  onDelete(cocos2d::CCObject*)
  onDeleteAll(cocos2d::CCObject*)
  onDeleteCustomItem(cocos2d::CCObject*)
  onDeleteInfo(cocos2d::CCObject*)
  onDeleteSelected(cocos2d::CCObject*)
  onDeleteSelectedType(cocos2d::CCObject*)
  onDeleteStartPos(cocos2d::CCObject*)
  onDeselectAll(cocos2d::CCObject*)
  onDuplicate(cocos2d::CCObject*)
  onGoToBaseLayer(cocos2d::CCObject*)
  onGoToLayer(cocos2d::CCObject*)
  onGroupDown(cocos2d::CCObject*)
  onGroupSticky(cocos2d::CCObject*)
  onGroupUp(cocos2d::CCObject*)
  onLockLayer(cocos2d::CCObject*)
  onNewCustomItem(cocos2d::CCObject*)
  onPaste(cocos2d::CCObject*)
  onPasteColor(cocos2d::CCObject*)
  onPasteState(cocos2d::CCObject*)
  onPause(cocos2d::CCObject*)
  onPlayback(cocos2d::CCObject*)
  onPlaytest(cocos2d::CCObject*)
  onSelectBuildTab(cocos2d::CCObject*)
  onSettings(cocos2d::CCObject*)
  onStopPlaytest(cocos2d::CCObject*)
  onToggleGuide(cocos2d::CCObject*)
  onUngroupSticky(cocos2d::CCObject*)
  onUpdateDeleteFilter(cocos2d::CCObject*)
  orderDownCustomItem(cocos2d::CCObject*)
  orderUpCustomItem(cocos2d::CCObject*)
  pasteObjects(std::string)
  playerTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  playerTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  playtestStopped()
  positionIsInSnapped(cocos2d::CCPoint)
  positionWithoutOffset(GameObject*)
  processSelectObjects(cocos2d::CCArray*)
  recreateButtonTabs()
  redoLastAction(cocos2d::CCObject*)
  registerWithTouchDispatcher()
  reloadCustomItems()
  removeOffset(GameObject*)
  replaceGroupID(GameObject*, int, int)
  repositionObjectsToCenter(cocos2d::CCArray*, cocos2d::CCPoint, bool)
  resetUI()
  rotateObjects(cocos2d::CCArray*, float, cocos2d::CCPoint)
  rotationforCommand(EditCommand)
  scaleChangeBegin()
  scaleChangeEnded()
  scaleChanged(float)
  scaleObjects(cocos2d::CCArray*, float, cocos2d::CCPoint)
  scrollWheel(float, float)
  selectAll()
  selectAllWithDirection(bool)
  selectBuildTab(int)
  selectObject(GameObject*, bool)
  selectObjects(cocos2d::CCArray*, bool)
  selectObjectsInRect(cocos2d::CCRect)
  setStoredUndoObject(UndoObject*)
  setupCreateMenu()
  setupDeleteMenu()
  setupEditMenu()
  setupTransformControl()
  shouldDeleteObject(GameObject*)
  shouldSnap(GameObject*)
  showDeleteConfirmation()
  showLiveColorSelectForMode(int)
  showMaxBasicError()
  showMaxCoinError()
  showMaxError()
  showUI(bool)
  sliderChanged(cocos2d::CCObject*)
  songStateChanged()
  toggleDuplicateButton()
  toggleEditObjectButton()
  toggleEnableRotate(cocos2d::CCObject*)
  toggleFreeMove(cocos2d::CCObject*)
  toggleGuideButton()
  toggleMode(cocos2d::CCObject*)
  toggleObjectInfoLabel()
  toggleSnap(cocos2d::CCObject*)
  toggleSpecialEditButtons()
  toggleStickyControls(bool)
  toggleSwipe(cocos2d::CCObject*)
  transformObject(GameObject*, EditCommand, bool)
  transformObjectCall(EditCommand)
  transformObjectCall(cocos2d::CCObject*)
  triggerSwipeMode()
  tryUpdateTimeMarkers()
  undoLastAction(cocos2d::CCObject*)
  updateButtons()
  updateCreateMenu(bool)
  updateDeleteButtons()
  updateDeleteMenu()
  updateEditMenu()
  updateGridNodeSize(int)
  updateGridNodeSize()
  updateGroupIDBtn2()
  updateGroupIDLabel()
  updateObjectInfoLabel()
  updatePlaybackBtn()
  updateScaleControl()
  updateSlider()
  updateSpecialUIElements()
  updateZoom(float)
  valueFromXPos(float)
  xPosFromValue(float)
  zoomGameLayer(bool)
  zoomIn(cocos2d::CCObject*)
  zoomOut(cocos2d::CCObject*)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual angleChangeBegin(void)
  virtual angleChangeEnded(void)
  virtual angleChanged(float)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual colorSelectClosed(cocos2d::CCNode *)
  virtual draw(void)
  virtual keyBackClicked(void)
  virtual keyDown(cocos2d::enumKeyCodes)
  virtual keyUp(cocos2d::enumKeyCodes)
  virtual registerWithTouchDispatcher(void)
  virtual scaleChangeBegin(void)
  virtual scaleChangeEnded(void)
  virtual scaleChanged(float)
  virtual scrollWheel(float,float)
  virtual songStateChanged(void)
}
class EditTriggersPopup : FLAlertLayer {
  create(EffectGameObject*, cocos2d::CCArray*)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCArray*)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onMultiTrigger(cocos2d::CCObject*)
  onSpawnedByTrigger(cocos2d::CCObject*)
  onTouchTriggered(cocos2d::CCObject*)
  show()
  updateMultiTriggerBtn()
  updateSpawnedByTrigger()
  updateTouchTriggered()
  virtual keyBackClicked(void)
  virtual show(void)
}
class EffectGameObject : GameObject {
  create(char const*)
  customObjectSetup(std::map<std::string, std::string, std::less<std::string >, std::allocator<std::pair<std::string const, std::string > > >&)
  customSetup()
  getSaveString()
  getTargetColorIndex()
  init(char const*)
  resetSpawnTrigger()
  spawnXPosition()
  triggerActivated(float)
  triggerObject(GJBaseGameLayer*)
  updateSpecialColor()
  virtual customObjectSetup(std::map<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string const,std::string>>> &)
  virtual customSetup(void)
  virtual getSaveString(void)
  virtual spawnXPosition(void)
  virtual triggerActivated(float)
  virtual triggerObject(GJBaseGameLayer *)
}
class EndLevelLayer : GJDropDownLayer {
  coinEnterFinished(cocos2d::CCPoint)
  coinEnterFinishedO(cocos2d::CCObject*)
  create()
  currencyEnterFinished()
  customSetup()
  diamondEnterFinished()
  enterAnimFinished()
  getCoinString()
  getEndText()
  goEdit()
  keyBackClicked()
  keyDown(cocos2d::enumKeyCodes)
  keyUp(cocos2d::enumKeyCodes)
  onEdit(cocos2d::CCObject*)
  onEveryplay(cocos2d::CCObject*)
  onMenu(cocos2d::CCObject*)
  onReplay(cocos2d::CCObject*)
  playCoinEffect(float)
  playCurrencyEffect(float)
  playDiamondEffect(float)
  playEndEffect()
  playStarEffect(float)
  showLayer(bool)
  starEnterFinished()
  tryShowBanner(float)
  virtual customSetup(void)
  virtual enterAnimFinished(void)
  virtual keyBackClicked(void)
  virtual keyDown(cocos2d::enumKeyCodes)
  virtual keyUp(cocos2d::enumKeyCodes)
  virtual showLayer(bool)
}
class EndPortalObject : GameObject {
  calculateSpawnXPos()
  create()
  init()
  setPosition(cocos2d::CCPoint const&)
  setVisible(bool)
  triggerObject(GJBaseGameLayer*)
  updateColors(cocos2d::_ccColor3B)
  virtual calculateSpawnXPos(void)
  virtual init(void)
  virtual setPosition(cocos2d::CCPoint const&)
  virtual setVisible(bool)
  virtual triggerObject(GJBaseGameLayer *)
}
class ExtendedLayer : cocos2d::CCLayer {
  create()
  init()
  setPosition(cocos2d::CCPoint const&)
  virtual init(void)
  virtual setPosition(cocos2d::CCPoint const&)
}
class FileSaveManager : GManager {
  firstLoad()
  getStoreData()
  init()
  loadDataFromFile(char const*)
  sharedState()
  virtual firstLoad(void)
  virtual init(void)
}
class FLAlertLayer : cocos2d::CCLayerColor {
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create(FLAlertLayerProtocol*, char const*, std::string, char const*, char const*)
  create(FLAlertLayerProtocol*, char const*, std::string, char const*, char const*, float)
  create(FLAlertLayerProtocol*, char const*, std::string, char const*, char const*, float, bool, float)
  init(FLAlertLayerProtocol*, char const*, std::string, char const*, char const*, float, bool, float)
  keyBackClicked()
  keyDown(cocos2d::enumKeyCodes)
  onBtn1(cocos2d::CCObject*)
  onBtn2(cocos2d::CCObject*)
  onEnter()
  registerWithTouchDispatcher()
  show()
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual keyBackClicked(void)
  virtual keyDown(cocos2d::enumKeyCodes)
  virtual onEnter(void)
  virtual registerWithTouchDispatcher(void)
  virtual show(void)
}
class FLAlertLayerProtocol {
  FLAlert_Clicked(FLAlertLayer*, bool)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
}
class FMODAudioEngine : cocos2d::CCNode {
  disableMetering()
  enableMetering()
  fadeBackgroundMusic(bool, float)
  getBackgroundMusicTime()
  getBackgroundMusicVolume()
  getEffectsVolume()
  isBackgroundMusicPlaying(std::string)
  isBackgroundMusicPlaying()
  pauseAllEffects()
  pauseBackgroundMusic()
  pauseEffect(unsigned int)
  playBackgroundMusic(std::string, bool, bool)
  playEffect(std::string, bool, float, float, float)
  preloadBackgroundMusic(std::string)
  preloadEffect(std::string)
  printResult(FMOD_RESULT)
  resumeAllEffects()
  resumeBackgroundMusic()
  resumeEffect(unsigned int)
  rewindBackgroundMusic()
  setBackgroundMusicTime(float)
  setBackgroundMusicVolume(float)
  setEffectsVolume(float)
  setupAudioEngine()
  sharedEngine()
  start()
  stop()
  stopAllEffects()
  stopBackgroundMusic(bool)
  stopEffect(unsigned int)
  unloadEffect(std::string)
  update(float)
  willPlayBackgroundMusic()
  virtual update(float)
}
class FMODSound : cocos2d::CCNode {
  create(FMOD::Sound*)
  init(FMOD::Sound*)
}
class FollowRewardPage : FLAlertLayer, FLAlertLayerProtocol, GameRateDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  create()
  init()
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onSpecialItem(cocos2d::CCObject*)
  registerWithTouchDispatcher()
  show()
  switchToOpenedState(CCMenuItemSpriteExtra*)
  updateRate()
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual init(void)
  virtual keyBackClicked(void)
  virtual registerWithTouchDispatcher(void)
  virtual show(void)
  virtual updateRate(void)
}
class FontObject : cocos2d::CCObject {
  createWithConfigFile(char const*, float)
  getFontWidth(int)
  initWithConfigFile(char const*, float)
  parseConfigFile(char const*, float)
}
class FRequestProfilePage : FLAlertLayer, FLAlertLayerProtocol, UploadActionDelegate, UploadPopupDelegate, FriendRequestDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  create(bool)
  deleteSelected()
  forceReloadRequests(bool)
  init(bool)
  isCorrect(char const*)
  keyBackClicked()
  loadFRequestsFailed(char const*, GJErrorCode)
  loadFRequestsFinished(cocos2d::CCArray*, char const*)
  loadPage(int)
  onClose(cocos2d::CCObject*)
  onClosePopup(UploadActionPopup*)
  onDeleteSelected(cocos2d::CCObject*)
  onNextPage(cocos2d::CCObject*)
  onPrevPage(cocos2d::CCObject*)
  onSentRequests(cocos2d::CCObject*)
  onToggleAllObjects(cocos2d::CCObject*)
  onUpdate(cocos2d::CCObject*)
  registerWithTouchDispatcher()
  setupCommentsBrowser(cocos2d::CCArray*)
  setupPageInfo(std::string, char const*)
  untoggleAll()
  updateLevelsLabel()
  updatePageArrows()
  uploadActionFailed(int, int)
  uploadActionFinished(int, int)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual forceReloadRequests(bool)
  virtual keyBackClicked(void)
  virtual loadFRequestsFailed(char const*,GJErrorCode)
  virtual loadFRequestsFinished(cocos2d::CCArray *,char const*)
  virtual onClosePopup(UploadActionPopup *)
  virtual registerWithTouchDispatcher(void)
  virtual setupPageInfo(std::string,char const*)
  virtual uploadActionFailed(int,int)
  virtual uploadActionFinished(int,int)
}
class FriendRequestDelegate {
  forceReloadRequests(bool)
  loadFRequestsFailed(char const*, GJErrorCode)
  loadFRequestsFinished(cocos2d::CCArray*, char const*)
  setupPageInfo(std::string, char const*)
  virtual forceReloadRequests(bool)
  virtual loadFRequestsFailed(char const*,GJErrorCode)
  virtual loadFRequestsFinished(cocos2d::CCArray *,char const*)
  virtual setupPageInfo(std::string,char const*)
}
class FriendRequestPopup : FLAlertLayer, UploadActionDelegate, UploadPopupDelegate, FLAlertLayerProtocol {
  FLAlert_Clicked(FLAlertLayer*, bool)
  blockUser()
  create(GJFriendRequest*)
  init(GJFriendRequest*)
  keyBackClicked()
  loadFromGJFriendRequest(GJFriendRequest*)
  onAccept(cocos2d::CCObject*)
  onBlock(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  onClosePopup(UploadActionPopup*)
  onRemove(cocos2d::CCObject*)
  uploadActionFailed(int, int)
  uploadActionFinished(int, int)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual keyBackClicked(void)
  virtual onClosePopup(UploadActionPopup *)
  virtual uploadActionFailed(int,int)
  virtual uploadActionFinished(int,int)
}
class FriendsProfilePage : FLAlertLayer, FLAlertLayerProtocol, UploadActionDelegate, UploadPopupDelegate, UserListDelegate {
  create(UserListType)
  forceReloadList(UserListType)
  getUserListFailed(UserListType, GJErrorCode)
  getUserListFinished(cocos2d::CCArray*, UserListType)
  init(UserListType)
  keyBackClicked()
  onBlocked(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  onUpdate(cocos2d::CCObject*)
  registerWithTouchDispatcher()
  setupUsersBrowser(cocos2d::CCArray*, UserListType)
  userListChanged(cocos2d::CCArray*, UserListType)
  virtual forceReloadList(UserListType)
  virtual getUserListFailed(UserListType,GJErrorCode)
  virtual getUserListFinished(cocos2d::CCArray *,UserListType)
  virtual keyBackClicked(void)
  virtual registerWithTouchDispatcher(void)
  virtual userListChanged(cocos2d::CCArray *,UserListType)
}
class GameCell : TableViewCell {
  draw()
  init()
  loadFromString(std::string)
  onTouch(cocos2d::CCObject*)
  updateBGColor(int)
  virtual draw(void)
  virtual init(void)
}
class GameEffectsManager : cocos2d::CCNode {
  addParticleEffect(cocos2d::CCParticleSystemQuad*, int)
  create(PlayLayer*)
  init(PlayLayer*)
  scaleParticle(cocos2d::CCParticleSystemQuad*, float)
}
class GameLevelManager : cocos2d::CCNode {
  ProcessHttpRequest(std::string, std::string, std::string, GJHttpType)
  acceptFriendRequest(int, int)
  accountIDForUserID(int)
  addDLToActive(char const*)
  areGauntletsLoaded()
  banUser(int)
  blockUser(int)
  cleanupDailyLevels()
  createAndGetAccountComments(std::string, int)
  createAndGetCommentsFull(std::string, int, bool)
  createAndGetLevelComments(std::string, int)
  createAndGetLevels(std::string)
  createAndGetMapPacks(std::string)
  createAndGetScores(std::string, GJScoreType)
  createNewLevel()
  createPageInfo(int, int, int)
  dataLoaded(DS_Dictionary*)
  deleteAccountComment(int)
  deleteComment(int, CommentType, int)
  deleteFriendRequests(int, cocos2d::CCArray*, bool)
  deleteLevel(GJGameLevel*)
  deleteLevelComment(int, int)
  deleteSentFriendRequest(int)
  deleteServerLevel(int)
  deleteUserMessages(GJUserMessage*, cocos2d::CCArray*, bool)
  downloadLevel(int, bool)
  downloadUserMessage(int, bool)
  encodeDataTo(DS_Dictionary*)
  firstSetup()
  followUser(int)
  friendRequestFromAccountID(int)
  friendRequestWasRemoved(int, bool)
  getAccountCommentKey(int, int)
  getAccountComments(int, int, int)
  getActiveDailyID(bool)
  getAllUsedSongIDs()
  getBasePostString(bool)
  getBasePostStringFull()
  getBoolForKey(char const*)
  getCommentKey(int, int, int, bool)
  getCompletedLevels(bool)
  getDailyID(bool)
  getDailyTimer(bool)
  getDeleteCommentKey(int, int, int)
  getDeleteMessageKey(int, bool)
  getDescKey(int)
  getDiffKey(int)
  getDiffVal(int)
  getDifficultyStr(bool, bool, bool, bool, bool, bool, bool, bool)
  getFolderName(int, bool)
  getFriendRequestKey(bool, int)
  getFriendRequests(bool, int, int)
  getGJChallenges()
  getGJDailyLevelState(bool)
  getGJRewards(int)
  getGJUserInfo(int)
  getGauntletKey(int)
  getGauntletLevels(int)
  getGauntletSearchKey(int)
  getGauntlets()
  getHighestLevelOrder()
  getIntForKey(char const*)
  getLeaderboardScores(char const*)
  getLenKey(int)
  getLenVal(int)
  getLengthStr(bool, bool, bool, bool, bool)
  getLevelComments(int, int, int, int, bool)
  getLevelDownloadKey(int, bool)
  getLevelKey(int)
  getLevelLeaderboard(GJGameLevel*, LevelLeaderboardType)
  getLevelLeaderboardKey(int, LevelLeaderboardType)
  getLevelSaveData()
  getLikeAccountItemKey(LikeItemType, int, bool, int)
  getLikeItemKey(LikeItemType, int, bool, int)
  getLocalLevel(int)
  getLowestLevelOrder()
  getMainLevel(int, bool)
  getMapPackKey(int)
  getMapPacks(GJSearchObject*)
  getMessageKey(int)
  getMessagesKey(bool, int)
  getNextLevelName(std::string)
  getOnlineLevels(GJSearchObject*)
  getPageInfo(char const*)
  getPostCommentKey(int)
  getRateStarsKey(int)
  getReportKey(int)
  getSavedDailyLevel(int)
  getSavedDailyLevelFromLevelID(int)
  getSavedGauntlet(int)
  getSavedGauntletLevel(int)
  getSavedLevel(int)
  getSavedLevel(GJGameLevel*)
  getSavedLevels(bool, int)
  getSavedMapPack(int)
  getSearchScene(char const*)
  getSplitIntFromKey(char const*, int)
  getStoredLevelComments(char const*)
  getStoredOnlineLevels(char const*)
  getStoredUserList(UserListType)
  getStoredUserMessage(int)
  getStoredUserMessageReply(int)
  getTimeLeft(char const*, float)
  getTopArtists(int, int)
  getTopArtistsKey(int)
  getUploadMessageKey(int)
  getUserInfoKey(int)
  getUserList(UserListType)
  getUserMessages(bool, int, int)
  getUsers(GJSearchObject*)
  gotoLevelPage(GJGameLevel*)
  handleIt(bool, std::string, std::string, GJHttpType)
  handleItDelayed(bool, std::string, std::string, GJHttpType)
  handleItND(cocos2d::CCNode*, void*)
  hasDailyStateBeenLoaded(bool)
  hasDownloadedLevel(int)
  hasLikedAccountItem(LikeItemType, int, bool, int)
  hasLikedItem(LikeItemType, int, bool, int)
  hasLikedItemFullCheck(LikeItemType, int, int)
  hasRatedDemon(int)
  hasRatedLevelStars(int)
  hasReportedLevel(int)
  init()
  invalidateMessages(bool, bool)
  invalidateRequests(bool, bool)
  invalidateUserList(UserListType, bool)
  isDLActive(char const*)
  isFollowingUser(int)
  isTimeValid(char const*, float)
  isUpdateValid(int)
  itemIDFromLikeKey(char const*)
  keyHasTimer(char const*)
  levelIDFromCommentKey(char const*)
  levelIDFromPostCommentKey(char const*)
  likeFromLikeKey(char const*)
  likeItem(LikeItemType, int, bool, int)
  limitSavedLevels()
  makeTimeStamp(char const*)
  markItemAsLiked(LikeItemType, int, bool, int)
  markLevelAsDownloaded(int)
  markLevelAsRatedDemon(int)
  markLevelAsRatedStars(int)
  markLevelAsReported(int)
  messageWasRemoved(int, bool)
  onAcceptFriendRequestCompleted(std::string, std::string)
  onBanUserCompleted(std::string, std::string)
  onBlockUserCompleted(std::string, std::string)
  onDeleteCommentCompleted(std::string, std::string)
  onDeleteFriendRequestCompleted(std::string, std::string)
  onDeleteServerLevelCompleted(std::string, std::string)
  onDeleteUserMessagesCompleted(std::string, std::string)
  onDownloadLevelCompleted(std::string, std::string)
  onDownloadUserMessageCompleted(std::string, std::string)
  onGetAccountCommentsCompleted(std::string, std::string)
  onGetFriendRequestsCompleted(std::string, std::string)
  onGetGJChallengesCompleted(std::string, std::string)
  onGetGJRewardsCompleted(std::string, std::string)
  onGetGJUserInfoCompleted(std::string, std::string)
  onGetGauntletsCompleted(std::string, std::string)
  onGetLeaderboardScoresCompleted(std::string, std::string)
  onGetLevelCommentsCompleted(std::string, std::string)
  onGetLevelLeaderboardCompleted(std::string, std::string)
  onGetLevelSaveDataCompleted(std::string, std::string)
  onGetMapPacksCompleted(std::string, std::string)
  onGetOnlineLevelsCompleted(std::string, std::string)
  onGetTopArtistsCompleted(std::string, std::string)
  onGetUserListCompleted(std::string, std::string)
  onGetUserMessagesCompleted(std::string, std::string)
  onGetUsersCompleted(std::string, std::string)
  onLikeItemCompleted(std::string, std::string)
  onProcessHttpRequestCompleted(cocos2d::extension::CCHttpClient*, cocos2d::extension::CCHttpResponse*)
  onRateDemonCompleted(std::string, std::string)
  onRateStarsCompleted(std::string, std::string)
  onReadFriendRequestCompleted(std::string, std::string)
  onRemoveFriendCompleted(std::string, std::string)
  onReportLevelCompleted(std::string, std::string)
  onRequestUserAccessCompleted(std::string, std::string)
  onRestoreItemsCompleted(std::string, std::string)
  onSetLevelFeaturedCompleted(std::string, std::string)
  onSetLevelStarsCompleted(std::string, std::string)
  onSubmitUserInfoCompleted(std::string, std::string)
  onSuggestLevelStarsCompleted(std::string, std::string)
  onUnblockUserCompleted(std::string, std::string)
  onUpdateDescriptionCompleted(std::string, std::string)
  onUpdateLevelCompleted(std::string, std::string)
  onUpdateUserScoreCompleted(std::string, std::string)
  onUploadCommentCompleted(std::string, std::string)
  onUploadFriendRequestCompleted(std::string, std::string)
  onUploadLevelCompleted(std::string, std::string)
  onUploadUserMessageCompleted(std::string, std::string)
  ongetGJDailyLevelStateCompleted(std::string, std::string)
  pageFromCommentKey(char const*)
  parseRestoreData(std::string)
  processOnDownloadLevelCompleted(std::string, std::string, bool)
  purgeUnusedLevels()
  rateDemon(int, int, bool)
  rateStars(int, int)
  readFriendRequest(int)
  removeDLFromActive(char const*)
  removeDelimiterChars(std::string, bool)
  removeFriend(int)
  removeLevelDownloadedKeysFromDict(cocos2d::CCDictionary*)
  removeUserFromList(int, UserListType)
  reportLevel(int)
  requestUserAccess()
  resetAccountComments(int)
  resetAllTimers()
  resetCommentTimersForLevelID(int, bool)
  resetDailyLevelState(bool)
  resetGauntlets()
  resetStoredUserInfo(int)
  resetStoredUserList(UserListType)
  resetTimerForKey(char const*)
  responseToDict(std::string, bool)
  restoreItems()
  saveFetchedLevels(cocos2d::CCArray*)
  saveFetchedMapPacks(cocos2d::CCArray*)
  saveGauntlet(GJMapPack*)
  saveLevel(GJGameLevel*)
  saveMapPack(GJMapPack*)
  setBoolForKey(bool, char const*)
  setDiffVal(int, bool)
  setDownloadedLevelsDict(cocos2d::CCDictionary*)
  setFolderName(int, std::string, bool)
  setFolderNamesCreatedDict(cocos2d::CCDictionary*)
  setFolderNamesDict(cocos2d::CCDictionary*)
  setFollowedUsersDict(cocos2d::CCDictionary*)
  setIntForKey(int, char const*)
  setLenVal(int, bool)
  setLevelFeatured(int, int, bool)
  setLevelStars(int, int, bool)
  setLikedItemsDict(cocos2d::CCDictionary*)
  setMainLevels(cocos2d::CCDictionary*)
  setRatedDemonsDict(cocos2d::CCDictionary*)
  setRatedLevelsDict(cocos2d::CCDictionary*)
  setReportedLevelsDict(cocos2d::CCDictionary*)
  setSavedDailyLevelsDict(cocos2d::CCDictionary*)
  setSavedGauntletLevelsDict(cocos2d::CCDictionary*)
  setSavedLevelsDict(cocos2d::CCDictionary*)
  setSettingsDict(cocos2d::CCDictionary*)
  sharedState()
  specialFromLikeKey(char const*)
  storeCommentsResult(cocos2d::CCArray*, std::string, char const*)
  storeDailyLevelState(int, int, bool)
  storeFriendRequest(GJFriendRequest*)
  storeSearchResult(cocos2d::CCArray*, std::string, char const*)
  storeUserInfo(GJUserScore*)
  storeUserMessage(GJUserMessage*)
  storeUserMessageReply(int, GJUserMessage*)
  storeUserName(int, int, std::string)
  storeUserNames(std::string)
  submitUserInfo()
  suggestLevelStars(int, int, bool)
  typeFromCommentKey(char const*)
  typeFromLikeKey(char const*)
  unblockUser(int)
  unfollowUser(int)
  updateDescription(int, std::string)
  updateLevel(GJGameLevel*)
  updateLevelOrders()
  updateLevelRewards(GJGameLevel*)
  updateUserScore()
  updateUsernames()
  uploadAccountComment(std::string)
  uploadComment(std::string, CommentType, int, int)
  uploadFriendRequest(int, std::string)
  uploadLevel(GJGameLevel*)
  uploadLevelComment(int, std::string, int)
  uploadUserMessage(int, std::string, std::string)
  userIDForAccountID(int)
  userInfoForAccountID(int)
  userNameForUserID(int)
  verifyLevelState(GJGameLevel*)
  virtual init(void)
}
class GameManager : GManager {
  accountStatusChanged()
  addNewCustomObject(std::string)
  applicationDidEnterBackground()
  applicationWillEnterForeground()
  canShowRewardedVideoAd()
  checkSteamAchievementUnlock()
  checkUsedIcons()
  claimItemsResponse(std::string)
  colorForIdx(int)
  colorForPos(int)
  colorKey(int, bool)
  completedAchievement(char const*)
  dataLoaded(DS_Dictionary*)
  didExitPlayscene()
  doQuickSave()
  encodeDataTo(DS_Dictionary*)
  eventUnlockFeature(char const*)
  fadeInMusic(char const*)
  firstLoad()
  followTwitter()
  generateSecretNumber()
  getBGTexture(int)
  getFontFile(int)
  getFontTexture(int)
  getGTexture(int)
  getGameVariable(char const*)
  getIntGameVariable(char const*)
  getNextUniqueObjectKey()
  getNextUsedKey(int, bool)
  getOrderedCustomObjectKeys()
  getPlayerUDID()
  getUGV(char const*)
  hasRatingPower()
  hasShownAdRecently()
  iconKey(int, IconType)
  iconTypeToUnlockType(IconType)
  init()
  isColorUnlocked(int, bool)
  isIconUnlocked(int, IconType)
  itemPurchased(char const*)
  levelIsPremium(int, int)
  likeFacebook()
  loadBackground(int)
  loadDeathEffect(int)
  loadFont(int)
  loadGround(int)
  loadVideoSettings()
  lockColor(int, bool)
  lockIcon(int, IconType)
  openEditorGuide()
  rateGame()
  recountUserStats(std::string)
  reloadAll(bool, bool, bool)
  reloadAllStep2()
  reloadAllStep3()
  reloadAllStep4()
  reloadAllStep5()
  removeCustomObject(int)
  reorderKey(int, bool)
  reportAchievementWithID(char const*, int, bool)
  reportPercentageForLevel(int, int, bool)
  resetAchievement(char const*)
  resetAllIcons()
  resetCoinUnlocks()
  resolutionForKey(int)
  returnToLastScene(GJGameLevel*)
  rewardedVideoAdFinished(int)
  rewardedVideoHidden()
  rewardedVideoHiddenDelayed()
  safePopScene()
  setCustomObjectDict(cocos2d::CCDictionary*)
  setGameVariable(char const*, bool)
  setHasRatingPower(int)
  setIntGameVariable(char const*, int)
  setPlayerBall(int)
  setPlayerBird(int)
  setPlayerColor(int)
  setPlayerColor2(int)
  setPlayerDart(int)
  setPlayerDeathEffect(int)
  setPlayerFrame(int)
  setPlayerRobot(int)
  setPlayerShip(int)
  setPlayerSpider(int)
  setPlayerStreak(int)
  setPlayerUserID(int)
  setUGV(char const*, bool)
  setUnlockValueKeeper(cocos2d::CCDictionary*)
  setValueKeeper(cocos2d::CCDictionary*)
  sharedState()
  shortenAdTimer(float)
  shouldShowInterstitial()
  showInterstitial()
  showInterstitialForced()
  showMainMenuAd()
  startUpdate()
  stringForCustomObject(int)
  subYouTube()
  switchCustomObjects(int, int)
  switchScreenMode(bool, bool)
  syncPlatformAchievements()
  toggleGameVariable(char const*)
  tryCacheAd()
  tryResetAdTimer()
  unloadBackground()
  unlockColor(int, bool)
  unlockIcon(int, IconType)
  unlockTypeToIconType(int)
  unlockedPremium()
  update(float)
  updateMusic()
  verifyAchievementUnlocks()
  verifyCoinUnlocks()
  verifyStarUnlocks()
  verifySyncedCoins()
  videoAdHidden()
  videoAdShowed()
  virtual dataLoaded(DS_Dictionary *)
  virtual encodeDataTo(DS_Dictionary *)
  virtual firstLoad(void)
  virtual init(void)
  virtual update(float)
}
class GameObject : CCSpritePlus {
  activateObject()
  activatedByPlayer(GameObject*)
  addColorSprite()
  addColorSpriteToParent(bool)
  addCustomBlackChild(std::string, float, bool)
  addCustomChild(std::string, cocos2d::CCPoint, int)
  addCustomColorChild(std::string)
  addEmptyGlow()
  addGlow()
  addInternalChild(cocos2d::CCSprite*, std::string, cocos2d::CCPoint, int)
  addInternalCustomColorChild(std::string, cocos2d::CCPoint, int)
  addInternalGlowChild(std::string, cocos2d::CCPoint)
  addMainSpriteToParent(bool)
  addNewSlope01(bool)
  addNewSlope01Glow(bool)
  addNewSlope02(bool)
  addNewSlope02Glow(bool)
  addToColorGroup(int)
  addToGroup(int)
  addToOpacityGroup(int)
  addToTempOffset(float, float)
  belongsToGroup(int)
  calculateOrientedBox()
  calculateSpawnXPos()
  canAllowMultiActivate()
  canChangeCustomColor()
  canChangeMainColor()
  canChangeSecondaryColor()
  canRotateFree()
  colorForMode(int, bool)
  commonSetup()
  copyGroups(GameObject*)
  createAndAddParticle(int, char const*, int, cocos2d::tCCPositionType)
  createColorGroupContainer(int)
  createGlow(std::string)
  createGroupContainer(int)
  createOpacityGroupContainer(int)
  createRotateAction(float, int)
  createSpriteColor(int)
  createWithFrame(char const*)
  createWithKey(int)
  createWithTexture(cocos2d::CCTexture2D*)
  customObjectSetup(std::map<std::string, std::string, std::less<std::string >, std::allocator<std::pair<std::string const, std::string > > >&)
  customScaleMod(char const*)
  customSetup()
  deactivateObject(bool)
  deselectObject()
  destroyObject()
  determineSlopeDirection()
  disableObject()
  dontCountTowardsLimit()
  duplicateAttributes(GameObject*)
  duplicateColorMode(GameObject*)
  duplicateValues(GameObject*)
  editorColorForCustomMode(int)
  editorColorForMode(int)
  getActiveColorForMode(int, bool)
  getBallFrame(int)
  getBoxOffset()
  getColorFrame(std::string)
  getColorIndex()
  getDidUpdateLastPosition()
  getGlowFrame(std::string)
  getGroupDisabled()
  getGroupID(int)
  getGroupString()
  getLastPosition()
  getMainColor()
  getMainColorMode()
  getObjectRadius()
  getObjectRect(float, float)
  getObjectRect()
  getObjectRect2(float, float)
  getObjectRectDirty()
  getObjectTextureRect()
  getObjectZLayer()
  getObjectZOrder()
  getOrientedBox()
  getOrientedRectDirty()
  getOuterObjectRect()
  getParentMode()
  getRScaleX()
  getRScaleY()
  getRealPosition()
  getRelativeSpriteColor(int)
  getSaveString()
  getSecondaryColor()
  getSecondaryColorMode()
  getSectionIdx()
  getStartPos()
  getType()
  getUpdateLastPos()
  groupColor(cocos2d::_ccColor3B const&, bool)
  groupOpacityMod()
  groupWasDisabled()
  groupWasEnabled()
  hasBeenActivated()
  hasBeenActivatedByPlayer(GameObject*)
  hasSecondaryColor()
  ignoreEditorDuration()
  ignoreEnter()
  ignoreFade()
  init(char const*)
  initWithTexture(cocos2d::CCTexture2D*)
  isBasicTrigger()
  isColorObject()
  isColorTrigger()
  isEditorSpawnableTrigger()
  isFacingDown()
  isFlipX()
  isFlipY()
  isSpawnableTrigger()
  isSpecialObject()
  isStoppableTrigger()
  isTrigger()
  loadGroupsFromString(std::string)
  objectFromString(std::string, bool)
  opacityModForMode(int, bool)
  parentForZLayer(int, bool, int)
  perspectiveColorFrame(char const*, int)
  perspectiveFrame(char const*, int)
  playShineEffect()
  powerOffObject()
  powerOnObject()
  quickUpdatePosition()
  quickUpdatePosition2()
  removeColorSprite()
  removeFromGroup(int)
  removeGlow()
  reorderColorSprite()
  resetGroupDisabled()
  resetMainColorMode()
  resetObject()
  resetSecondaryColorMode()
  saveActiveColors()
  selectObject(cocos2d::_ccColor3B)
  setChildColor(cocos2d::_ccColor3B const&)
  setDefaultMainColorMode(int)
  setDefaultSecondaryColorMode(int)
  setDidUpdateLastPosition(bool const&)
  setFlipX(bool)
  setFlipY(bool)
  setGlowColor(cocos2d::_ccColor3B const&)
  setGlowOpacity(unsigned char)
  setLastPosition(cocos2d::CCPoint const&)
  setMainColorMode(int)
  setMyAction(cocos2d::CCAction*)
  setObjectColor(cocos2d::_ccColor3B const&)
  setObjectRectDirty(bool)
  setOpacity(unsigned char)
  setOrientedRectDirty(bool)
  setPosition(cocos2d::CCPoint const&)
  setRScale(float)
  setRScaleX(float)
  setRScaleY(float)
  setRotation(float)
  setScale(float)
  setScaleX(float)
  setScaleY(float)
  setSecondaryColorMode(int)
  setSectionIdx(int const&)
  setStartPos(cocos2d::CCPoint)
  setTempOffset(float, float)
  setType(GameObjectType)
  setUpdateLastPos(bool const&)
  setVisible(bool)
  setupCoinAnimation()
  setupCoinArt()
  setupColorSprite(int, bool)
  setupCustomSprites()
  setupSpriteSize()
  shouldBlendColor(GJSpriteColor*, bool)
  shouldNotSave()
  slopeFloorTop()
  slopeWallLeft()
  slopeYPos(float)
  slopeYPos(cocos2d::CCRect)
  slopeYPos(GameObject*)
  spawnXPosition()
  triggerActivated(float)
  triggerObject(GJBaseGameLayer*)
  update(float)
  updateCustomScale(float)
  updateMainColor(cocos2d::_ccColor3B const&)
  updateMainColor()
  updateObjectEditorColor()
  updateOrientedBox()
  updateParticleColor(cocos2d::_ccColor3B const&)
  updateSecondaryColor(cocos2d::_ccColor3B const&)
  updateSecondaryColor()
  updateStartPos()
  updateStartValues()
  updateState()
  updateSyncedAnimation(float)
  updateTextObject(std::string, bool)
  waitingForActivation()
  virtual activateObject(void)
  virtual addMainSpriteToParent(bool)
  virtual addToGroup(int)
  virtual calculateSpawnXPos(void)
  virtual customObjectSetup(std::map<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string const,std::string>>> &)
  virtual customSetup(void)
  virtual deactivateObject(bool)
  virtual getObjectRect(void)
  virtual getObjectRect(float,float)
  virtual getObjectRect2(float,float)
  virtual getObjectRectDirty(void)
  virtual getObjectTextureRect(void)
  virtual getOrientedBox(void)
  virtual getOrientedRectDirty(void)
  virtual getRScaleX(void)
  virtual getRScaleY(void)
  virtual getRealPosition(void)
  virtual getSaveString(void)
  virtual getStartPos(void)
  virtual getType(void)
  virtual initWithTexture(cocos2d::CCTexture2D *)
  virtual isFlipX(void)
  virtual isFlipY(void)
  virtual powerOffObject(void)
  virtual powerOnObject(void)
  virtual removeFromGroup(int)
  virtual resetObject(void)
  virtual setChildColor(cocos2d::_ccColor3B const&)
  virtual setFlipX(bool)
  virtual setFlipY(bool)
  virtual setGlowColor(cocos2d::_ccColor3B const&)
  virtual setObjectColor(cocos2d::_ccColor3B const&)
  virtual setObjectRectDirty(bool)
  virtual setOpacity(uchar)
  virtual setOrientedRectDirty(bool)
  virtual setPosition(cocos2d::CCPoint const&)
  virtual setRScale(float)
  virtual setRScaleX(float)
  virtual setRScaleY(float)
  virtual setRotation(float)
  virtual setScale(float)
  virtual setScaleX(float)
  virtual setScaleY(float)
  virtual setStartPos(cocos2d::CCPoint)
  virtual setType(GameObjectType)
  virtual setVisible(bool)
  virtual setupCustomSprites(void)
  virtual spawnXPosition(void)
  virtual triggerActivated(float)
  virtual triggerObject(GJBaseGameLayer *)
  virtual update(float)
  virtual updateStartValues(void)
}
class GameObjectCopy : cocos2d::CCObject {
  create(GameObject*)
  init(GameObject*)
  resetObject()
}
class GameRateDelegate {
  updateRate()
  virtual updateRate(void)
}
class GameSoundManager : cocos2d::CCNode {
  asynchronousSetup()
  disableMetering()
  enableMetering()
  fadeInMusic(bool)
  fadeOutMusic(bool)
  getMeteringValue()
  init()
  isLoopedSoundPlaying(std::string)
  pauseAllLoopedSounds()
  pauseLoopedSound(std::string)
  playBackgroundMusic(std::string, bool, bool)
  playEffect(std::string, float, float, float)
  playLoopedSound(std::string, std::string, float, float, bool, bool, bool)
  playUniqueEffect(std::string)
  playUniqueEffect(std::string, float, float, float)
  preload()
  removeLoopedSound(std::string)
  resetUniqueEffects()
  resumeAllLoopedSounds()
  resumeSound()
  setup()
  sharedManager()
  stopAllLoopedSounds()
  stopBackgroundMusic()
  stopLoopedSound(std::string, bool)
  updateLoopedVolume(std::string, float)
  updateMetering(float)
  virtual init(void)
}
class GameStatsManager : cocos2d::CCNode {
  addStoreItem(int, int, int, int, ShopType)
  areChallengesLoaded()
  areRewardsLoaded()
  awardCurrencyForLevel(GJGameLevel*)
  awardDiamondsForLevel(GJGameLevel*)
  awardSecretKey()
  checkAchievement(char const*)
  checkCoinAchievement(GJGameLevel*)
  checkCoinsForLevel(GJGameLevel*)
  collectReward(GJRewardType, GJRewardItem*)
  collectVideoReward(int)
  completedChallenge(GJChallengeItem*)
  completedDailyLevel(GJGameLevel*)
  completedDemonLevel(GJGameLevel*)
  completedLevel(GJGameLevel*)
  completedMapPack(GJMapPack*)
  completedStarLevel(GJGameLevel*)
  createSecretChestItems()
  createSecretChestRewards()
  createSpecialChestItems()
  createStoreItems()
  dataLoaded(DS_Dictionary*)
  encodeDataTo(DS_Dictionary*)
  firstSetup()
  generateItemUnlockableData()
  getAwardedCurrencyForLevel(GJGameLevel*)
  getAwardedDiamondsForLevel(GJGameLevel*)
  getBaseCurrency(int, bool, int)
  getBaseCurrencyForLevel(GJGameLevel*)
  getBaseDiamonds(int)
  getBonusDiamonds(int)
  getBonusShardCount()
  getChallenge(int)
  getChallengeKey(GJChallengeItem*)
  getCollectedCoinsForLevel(GJGameLevel*)
  getCompletedMapPacks()
  getCurrencyKey(GJGameLevel*)
  getDailyLevelKey(int)
  getDemonLevelKey(GJGameLevel*)
  getGauntletRewardKey(int)
  getItemKey(int, UnlockType)
  getItemUnlockState(int, UnlockType)
  getLevelKey(int, bool, bool, bool)
  getLevelKey(GJGameLevel*)
  getLiteAchievements()
  getMapPackKey(int)
  getQueuedChallenge(int)
  getRewardForSecretChest(int)
  getRewardForSpecialChest(std::string)
  getRewardItem(GJRewardType)
  getRewardKey(GJRewardType, int)
  getSecondaryQueuedChallenge(int)
  getSecretChestForItem(int, UnlockType)
  getSecretCoinKey(char const*)
  getSpecialChestKeyForItem(int, UnlockType)
  getStarLevelKey(GJGameLevel*)
  getStat(char const*)
  getStoreItem(int)
  getStoreItem(int, int)
  getStoreItemKey(int, int)
  getTotalCollectedCurrency()
  getTotalCollectedDiamonds()
  hasCompletedChallenge(GJChallengeItem*)
  hasCompletedDailyLevel(int)
  hasCompletedDemonLevel(GJGameLevel*)
  hasCompletedGauntletLevel(int)
  hasCompletedLevel(GJGameLevel*)
  hasCompletedMainLevel(int)
  hasCompletedMapPack(int)
  hasCompletedOnlineLevel(int)
  hasCompletedStarLevel(GJGameLevel*)
  hasPendingUserCoin(char const*)
  hasRewardBeenCollected(GJRewardType, int)
  hasSecretCoin(char const*)
  hasUserCoin(char const*)
  incrementChallenge(GJChallengeType, int)
  incrementStat(char const*)
  incrementStat(char const*, int)
  init()
  isItemUnlocked(UnlockType, int)
  isLiteUnlockable(std::string)
  isSecretChestUnlocked(int)
  isSecretCoin(std::string)
  isSecretCoinValid(std::string)
  isSpecialChestUnlocked(std::string)
  isStoreItemUnlocked(int)
  logCoins()
  markLevelAsCompletedAndClaimed(GJGameLevel*)
  postLoadGameStats()
  preProcessReward(GJRewardItem*)
  preSaveGameStats()
  processChallengeQueue(int)
  purchaseItem(int)
  recountSpecialStats()
  recountUserCoins(bool)
  registerRewardsFromItem(GJRewardItem*)
  removeChallenge(int)
  removeErrorFromSpecialChests()
  removeQueuedChallenge(int)
  removeQueuedSecondaryChallenge(int)
  resetChallengeTimer()
  resetPreSync()
  resetSpecialStatAchievements()
  resetUserCoins()
  restorePostSync()
  setAwardedBonusKeys(int)
  setChallengeItemDict(cocos2d::CCDictionary*)
  setChallengeItemQueuedDict(cocos2d::CCDictionary*)
  setCollectedRewards(cocos2d::CCDictionary*)
  setCollectedVideoRewards(cocos2d::CCDictionary*)
  setCollectedWeeklyLevelRewards(cocos2d::CCDictionary*)
  setCompletedLevels(cocos2d::CCDictionary*)
  setCurrencyAwardDict(cocos2d::CCDictionary*)
  setCurrencyDailyLevelDict(cocos2d::CCDictionary*)
  setCurrencyDailyLevelStarsDict(cocos2d::CCDictionary*)
  setCurrencyGauntletLevelDict(cocos2d::CCDictionary*)
  setCurrencyLevelDict(cocos2d::CCDictionary*)
  setCurrencyLevelStarsDict(cocos2d::CCDictionary*)
  setCurrencyMainLevelDict(cocos2d::CCDictionary*)
  setCurrencyUnlockDict(cocos2d::CCDictionary*)
  setDiamondAwardDict(cocos2d::CCDictionary*)
  setDiamondsDailyLevelDict(cocos2d::CCDictionary*)
  setDiamondsLevelDict(cocos2d::CCDictionary*)
  setPendingUserCoinsDict(cocos2d::CCDictionary*)
  setRandomContainer(cocos2d::CCDictionary*)
  setRewardItemDict(cocos2d::CCDictionary*)
  setStarsForMapPack(int, int)
  setStat(char const*, int)
  setStatIfHigher(char const*, int)
  setUnlockedSecretChests(cocos2d::CCDictionary*)
  setUnlockedSpecialChests(cocos2d::CCDictionary*)
  setUserCoinsDict(cocos2d::CCDictionary*)
  setValueDict(cocos2d::CCDictionary*)
  sharedState()
  shouldAwardSecretKey()
  starsForMapPack(int)
  storeChallenge(int, GJChallengeItem*)
  storeChallengeTime(int)
  storePendingUserCoin(char const*)
  storeQueuedChallenge(int, GJChallengeItem*)
  storeRewardState(GJRewardType, int, int, std::string)
  storeSecondaryQueuedChallenge(int, GJChallengeItem*)
  storeSecretCoin(char const*)
  storeUserCoin(char const*)
  tempClear()
  uncompleteLevel(GJGameLevel*)
  unlockSecretChest(int)
  unlockSpecialChest(std::string)
  verifyUserCoins()
  virtual init(void)
}
class GaragePage : cocos2d::CCLayer, ListButtonBarDelegate {
  create(IconType, GJGarageLayer*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  init(IconType, GJGarageLayer*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  listButtonBarSwitchedPage(ListButtonBar*, int)
  onGlow(cocos2d::CCObject*)
  onSelect(cocos2d::CCObject*)
  updateSelect(cocos2d::CCNode*)
  virtual listButtonBarSwitchedPage(ListButtonBar *,int)
}
class GauntletLayer : cocos2d::CCLayer, LevelManagerDelegate {
  create(GauntletType)
  init(GauntletType)
  keyBackClicked()
  loadLevelsFailed(char const*)
  loadLevelsFinished(cocos2d::CCArray*, char const*)
  onBack(cocos2d::CCObject*)
  onLevel(cocos2d::CCObject*)
  scene(GauntletType)
  setupGauntlet(cocos2d::CCArray*)
  unlockActiveItem()
  virtual keyBackClicked(void)
  virtual loadLevelsFailed(char const*)
  virtual loadLevelsFinished(cocos2d::CCArray *,char const*)
}
class GauntletNode : cocos2d::CCNode {
  create(GJMapPack*)
  frameForType(GauntletType)
  init(GJMapPack*)
  nameForType(GauntletType)
  onClaimReward()
}
class GauntletSelectLayer : cocos2d::CCLayer, BoomScrollLayerDelegate, LevelManagerDelegate {
  create(int)
  goToPage(int, bool)
  init(int)
  keyBackClicked()
  loadLevelsFailed(char const*)
  loadLevelsFinished(cocos2d::CCArray*, char const*)
  onBack(cocos2d::CCObject*)
  onExit()
  onNext(cocos2d::CCObject*)
  onPlay(cocos2d::CCObject*)
  onPrev(cocos2d::CCObject*)
  onRefresh(cocos2d::CCObject*)
  scene(int)
  scrollLayerScrolledToPage(BoomScrollLayer*, int)
  scrollLayerWillScrollToPage(BoomScrollLayer*, int)
  setupGauntlets()
  updateArrows()
  virtual keyBackClicked(void)
  virtual loadLevelsFailed(char const*)
  virtual loadLevelsFinished(cocos2d::CCArray *,char const*)
  virtual onExit(void)
  virtual scrollLayerScrolledToPage(BoomScrollLayer *,int)
  virtual scrollLayerWillScrollToPage(BoomScrollLayer *,int)
}
class GhostTrailEffect : cocos2d::CCNode {
  create()
  doBlendAdditive()
  draw()
  init()
  runWithTarget(cocos2d::CCSprite*, float, float, float, float, bool)
  stopTrail()
  trailSnapshot(float)
  virtual draw(void)
  virtual init(void)
}
class GJAccountBackupDelegate {
  backupAccountFailed(BackupAccountError)
  backupAccountFinished()
  virtual backupAccountFailed(BackupAccountError)
  virtual backupAccountFinished(void)
}
class GJAccountDelegate {
  accountStatusChanged()
  virtual accountStatusChanged(void)
}
class GJAccountLoginDelegate {
  loginAccountFailed(AccountError)
  loginAccountFinished(int, int)
  virtual loginAccountFailed(AccountError)
  virtual loginAccountFinished(int,int)
}
class GJAccountManager : cocos2d::CCNode {
  ProcessHttpRequest(std::string, std::string, std::string, GJHttpType)
  addDLToActive(char const*)
  addDLToActive(char const*, cocos2d::CCObject*)
  backupAccount(std::string)
  dataLoaded(DS_Dictionary*)
  encodeDataTo(DS_Dictionary*)
  firstSetup()
  getAccountBackupURL()
  getAccountSyncURL()
  getDLObject(char const*)
  getGJP()
  handleIt(bool, std::string, std::string, GJHttpType)
  handleItDelayed(bool, std::string, std::string, GJHttpType)
  handleItND(cocos2d::CCNode*, void*)
  init()
  isDLActive(char const*)
  linkToAccount(std::string, std::string, int, int)
  loginAccount(std::string, std::string)
  onBackupAccountCompleted(std::string, std::string)
  onGetAccountBackupURLCompleted(std::string, std::string)
  onGetAccountSyncURLCompleted(std::string, std::string)
  onLoginAccountCompleted(std::string, std::string)
  onProcessHttpRequestCompleted(cocos2d::extension::CCHttpClient*, cocos2d::extension::CCHttpResponse*)
  onRegisterAccountCompleted(std::string, std::string)
  onSyncAccountCompleted(std::string, std::string)
  onUpdateAccountSettingsCompleted(std::string, std::string)
  registerAccount(std::string, std::string, std::string)
  removeDLFromActive(char const*)
  sharedState()
  syncAccount(std::string)
  unlinkFromAccount()
  updateAccountSettings(int, int, int, std::string, std::string, std::string)
  virtual init(void)
}
class GJAccountRegisterDelegate {
  registerAccountFailed(AccountError)
  registerAccountFinished()
  virtual registerAccountFailed(AccountError)
  virtual registerAccountFinished(void)
}
class GJAccountSettingsDelegate {
  updateSettingsFailed()
  updateSettingsFinished()
  virtual updateSettingsFailed(void)
  virtual updateSettingsFinished(void)
}
class GJAccountSettingsLayer : FLAlertLayer, TextInputDelegate {
  create(int)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint, float, float)
  init(int)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onCommentSetting(cocos2d::CCObject*)
  onFriendRequests(cocos2d::CCObject*)
  onMessageSetting(cocos2d::CCObject*)
  onUpdate(cocos2d::CCObject*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateScoreValues()
  virtual keyBackClicked(void)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class GJAccountSyncDelegate {
  syncAccountFailed(BackupAccountError)
  syncAccountFinished()
  virtual syncAccountFailed(BackupAccountError)
  virtual syncAccountFinished(void)
}
class GJBaseGameLayer : cocos2d::CCLayer, TriggerEffectDelegate {
  addObjectCounter(LabelGameObject*, int)
  addToGroup(GameObject*, int, bool)
  addToGroups(GameObject*, bool)
  addToSection(GameObject*)
  atlasValue(int)
  bumpPlayer(PlayerObject*, GameObject*)
  calculateColorValues(EffectGameObject*, EffectGameObject*, int, float, ColorActionSprite*, GJEffectManager*)
  calculateOpacityValues(EffectGameObject*, EffectGameObject*, float, GJEffectManager*)
  checkSpawnObjects()
  collectItem(int, int)
  collectedObject(EffectGameObject*)
  createMoveCommand(cocos2d::CCPoint, int, float, int, float, bool, bool, int)
  createTextLayers()
  damagingObjectsInRect(cocos2d::CCRect)
  enableHighCapacityMode()
  flipGravity(PlayerObject*, bool, bool)
  getCapacityString()
  getGroundHeightForMode(int)
  getGroup(int)
  getMoveDeltaForObjects(int, int)
  getOptimizedGroup(int)
  getStaticGroup(int)
  init()
  isGroupDisabledForObject(GameObject*)
  isGroupDisabledForObjectFull(GameObject*, cocos2d::CCArray*)
  loadUpToPosition(float)
  objectIntersectsCircle(GameObject*, GameObject*)
  objectTriggered(EffectGameObject*)
  objectsCollided(int, int)
  optimizeMoveGroups()
  parentForZLayer(int, bool, int)
  playerTouchedRing(PlayerObject*, GameObject*)
  processColorObject(EffectGameObject*, int, cocos2d::CCDictionary*, float, GJEffectManager*)
  processFollowActions()
  processMoveActions()
  processMoveActionsStep(float)
  processOpacityObject(EffectGameObject*, cocos2d::CCDictionary*, float, GJEffectManager*)
  processPlayerFollowActions(float)
  processRotationActions()
  pushButton(int, bool)
  rectIntersectsCircle(cocos2d::CCRect, cocos2d::CCPoint, float)
  refreshCounterLabels()
  releaseButton(int, bool)
  removeFromGroup(GameObject*, int)
  removeFromGroups(GameObject*)
  removeObjectFromSection(GameObject*)
  reorderObjectSection(GameObject*)
  resetGroupCounters(bool)
  resetMoveOptimizedValue()
  sectionForPos(float)
  setupLayers()
  shouldExitHackedLevel()
  spawnGroup(int)
  spawnGroupTriggered(int, float, int)
  staticObjectsInRect(cocos2d::CCRect)
  stopTriggersInGroup(int)
  testInstantCountTrigger(int, int, int, bool, int)
  toggleGroup(int, bool)
  toggleGroupTriggered(int, bool)
  togglePlayerVisibility(bool)
  triggerMoveCommand(EffectGameObject*)
  updateCollisionBlocks()
  updateColor(cocos2d::_ccColor3B, float, int, bool, float, cocos2d::_ccHSVValue, int, bool, int, EffectGameObject*)
  updateCounters(int, int)
  updateDisabledObjectsLastPos(cocos2d::CCArray*)
  updateLayerCapacity(std::string)
  updateLegacyLayerCapacity(int, int, int, int)
  updateOBB2(cocos2d::CCRect)
  updateQueuedLabels()
  virtual addToGroup(GameObject *,int,bool)
  virtual addToSection(GameObject *)
  virtual calculateColorValues(EffectGameObject *,EffectGameObject *,int,float,ColorActionSprite *,GJEffectManager *)
  virtual createMoveCommand(cocos2d::CCPoint,int,float,int,float,bool,bool,int)
  virtual flipGravity(PlayerObject *,bool,bool)
  virtual init(void)
  virtual objectsCollided(int,int)
  virtual removeFromGroup(GameObject *,int)
  virtual spawnGroup(int)
  virtual toggleGroupTriggered(int,bool)
  virtual updateColor(cocos2d::_ccColor3B,float,int,bool,float,cocos2d::_ccHSVValue,int,bool,int,EffectGameObject *)
}
class GJChallengeDelegate {
  challengeStatusFailed()
  challengeStatusFinished()
  virtual challengeStatusFailed(void)
  virtual challengeStatusFinished(void)
}
class GJChallengeItem : cocos2d::CCObject {
  canEncode()
  create(GJChallengeType, int, int, int, std::string)
  create()
  createFromString(std::string)
  createWithCoder(DS_Dictionary*)
  dataLoaded(DS_Dictionary*)
  encodeWithCoder(DS_Dictionary*)
  incrementCount(int)
  init(GJChallengeType, int, int, int, std::string)
  setCount(int)
  virtual canEncode(void)
  virtual encodeWithCoder(DS_Dictionary *)
}
class GJChestSprite : cocos2d::CCSprite {
  create(int)
  init(int)
  setColor(cocos2d::_ccColor3B const&)
  switchToState(ChestSpriteState, bool)
  virtual setColor(cocos2d::_ccColor3B const&)
}
class GJColorSetupLayer : FLAlertLayer, ColorSelectDelegate, FLAlertLayerProtocol {
  colorSelectClosed(cocos2d::CCNode*)
  create(LevelSettingsObject*)
  init(LevelSettingsObject*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onColor(cocos2d::CCObject*)
  onPage(cocos2d::CCObject*)
  showPage(int)
  updateSpriteColor(ColorChannelSprite*, cocos2d::CCLabelBMFont*, int)
  updateSpriteColors()
  virtual colorSelectClosed(cocos2d::CCNode *)
  virtual keyBackClicked(void)
}
class GJComment : cocos2d::CCNode {
  create(cocos2d::CCDictionary*)
  create()
  init()
  virtual init(void)
}
class GJCommentListLayer : cocos2d::CCLayerColor {
  create(BoomListView*, char const*, cocos2d::_ccColor4B, float, float, bool)
  init(BoomListView*, char const*, cocos2d::_ccColor4B, float, float, bool)
}
class GJDailyLevelDelegate {
  dailyStatusFailed(bool)
  dailyStatusFinished(bool)
  virtual dailyStatusFailed(bool)
  virtual dailyStatusFinished(bool)
}
class GJDropDownLayer : cocos2d::CCLayerColor {
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create(char const*)
  create(char const*, float)
  customSetup()
  disableUI()
  draw()
  enableUI()
  enterAnimFinished()
  enterLayer()
  exitLayer(cocos2d::CCObject*)
  hideLayer(bool)
  init(char const*)
  init(char const*, float)
  keyBackClicked()
  layerHidden()
  layerVisible()
  registerWithTouchDispatcher()
  showLayer(bool)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual customSetup(void)
  virtual disableUI(void)
  virtual draw(void)
  virtual enableUI(void)
  virtual enterAnimFinished(void)
  virtual enterLayer(void)
  virtual exitLayer(cocos2d::CCObject *)
  virtual hideLayer(bool)
  virtual keyBackClicked(void)
  virtual layerHidden(void)
  virtual layerVisible(void)
  virtual registerWithTouchDispatcher(void)
  virtual showLayer(bool)
}
class GJDropDownLayerDelegate {
  dropDownLayerWillClose(GJDropDownLayer*)
  virtual dropDownLayerWillClose(GJDropDownLayer *)
}
class GJEffectManager : cocos2d::CCNode {
  activeColorForIndex(int)
  activeOpacityForIndex(int)
  addAllInheritedColorActions(cocos2d::CCArray*)
  addGroupPulseEffect(PulseEffectAction*)
  calculateBaseActiveColors()
  calculateInheritedColor(int, ColorAction*)
  calculateLightBGColor(cocos2d::_ccColor3B)
  colorActionChanged(ColorAction*)
  colorExists(int)
  colorForEffect(cocos2d::_ccColor3B, cocos2d::_ccHSVValue)
  colorForGroupID(int, cocos2d::_ccColor3B const&, bool)
  colorForIndex(int)
  colorForPulseEffect(cocos2d::_ccColor3B const&, PulseEffectAction*)
  countChangedForItem(int)
  countForItem(int)
  create()
  createFollowCommand(float, float, float, int, int, bool, int)
  createMoveCommand(cocos2d::CCPoint, int, float, int, float, bool, bool, int)
  createPlayerFollowCommand(float, float, int, float, float, int, int)
  createRotateCommand(int, float, int, int, int, float, bool, int)
  decrementCountForItem(int)
  getAllColorActions()
  getAllColorSprites()
  getColorAction(int)
  getColorSprite(int)
  getCurrentStateString()
  getLoadedMoveOffset()
  getMixedColor(cocos2d::_ccColor3B, cocos2d::_ccColor3B, float)
  getOpacityActionForGroup(int)
  getSaveString()
  handleObjectCollision(bool, int, int)
  hasActiveDualTouch()
  hasBeenTriggered(int)
  hasPulseEffectForGroupID(int)
  incrementCountForItem(int)
  init()
  isGroupEnabled(int)
  keyForGroupIDColor(int, cocos2d::_ccColor3B const&, bool)
  loadState(std::string)
  objectsCollided(int, int)
  opacityForIndex(int)
  opacityModForGroup(int)
  playerButton(bool, bool)
  playerDied()
  postCollisionCheck()
  preCollisionCheck()
  prepareMoveActions(float, bool)
  processColors()
  processCopyColorPulseActions()
  processInheritedColors()
  processPulseActions()
  registerCollisionTrigger(int, int, int, bool, bool, int)
  removeAllPulseActions()
  removeColorAction(int)
  reset()
  resetColorCache()
  resetEffects()
  resetMoveActions()
  resetToggledGroups()
  resetTriggeredIDs()
  runCountTrigger(int, int, bool, int, bool, int)
  runDeathTrigger(int, bool, int)
  runOpacityActionOnGroup(int, float, float, int)
  runPulseEffect(int, bool, float, float, float, PulseEffectType, cocos2d::_ccColor3B, cocos2d::_ccHSVValue, int, bool, bool, bool, int)
  runTouchTriggerCommand(int, bool, TouchTriggerType, bool, int)
  setColorAction(ColorAction*, int)
  setFollowing(int, int, bool)
  setupFromString(std::string)
  shouldBlend(int)
  spawnGroup(int, float, int)
  stopActionsForTrigger(EffectGameObject*)
  stopMoveActionsForGroup(int)
  storeTriggeredID(int)
  toggleGroup(int, bool)
  traverseInheritanceChain(InheritanceNode*)
  updateActiveOpacityEffects()
  updateColorAction(ColorAction*)
  updateColorEffects(float)
  updateColors(cocos2d::_ccColor3B, cocos2d::_ccColor3B)
  updateEffects(float)
  updateOpacityAction(OpacityEffectAction*)
  updateOpacityEffects(float)
  updatePulseEffects(float)
  updateSpawnTriggers(float)
  wasFollowing(int, int)
  wouldCreateLoop(InheritanceNode*, int)
  virtual init(void)
}
class GJFlyGroundLayer : GJGroundLayer {
  create()
  init()
  virtual init(void)
}
class GJFollowCommandLayer : FLAlertLayer, TextInputDelegate {
  create(EffectGameObject*, cocos2d::CCArray*)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onFollowRotation(cocos2d::CCObject*)
  onMultiTrigger(cocos2d::CCObject*)
  onSpawnedByTrigger(cocos2d::CCObject*)
  onTouchTriggered(cocos2d::CCObject*)
  onUpdateGroupID(cocos2d::CCObject*)
  onUpdateGroupID2(cocos2d::CCObject*)
  sliderChanged(cocos2d::CCObject*)
  sliderXModChanged(cocos2d::CCObject*)
  sliderYModChanged(cocos2d::CCObject*)
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateDurLabel(bool)
  updateDuration()
  updateEditorLabel()
  updateMultiTriggerBtn()
  updateSpawnedByTrigger()
  updateTargetGroupID()
  updateTargetGroupID2()
  updateTextInputLabel()
  updateTextInputLabel2()
  updateTouchTriggered()
  updateXMod()
  updateXModLabel()
  updateYMod()
  updateYModLabel()
  virtual keyBackClicked(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class GJFriendRequest : cocos2d::CCNode {
  create(cocos2d::CCDictionary*)
  create()
  init()
  virtual init(void)
}
class GJGameLevel : cocos2d::CCNode {
  areCoinsVerified()
  canEncode()
  create(cocos2d::CCDictionary*, bool)
  create()
  createWithCoder(DS_Dictionary*)
  dataLoaded(DS_Dictionary*)
  demonIconForDifficulty(DemonDifficultyType)
  encodeWithCoder(DS_Dictionary*)
  getAudioFileName()
  getAverageDifficulty()
  getCoinKey(int)
  getLastBuildPageForTab(int)
  getLengthKey(int)
  getLevelName()
  getNormalPercent()
  getSongName()
  getUnpackedLevelDescription()
  handleStatsConflict(GJGameLevel*)
  init()
  lengthKeyToString(int)
  levelWasAltered()
  levelWasSubmitted()
  savePercentage(int, bool, int, int, bool)
  setAccountID(int)
  setAttemptTime(int)
  setAttempts(int)
  setCapacityString(std::string)
  setClicks(int)
  setCoinsVerified(int)
  setDailyID(int)
  setDemon(int)
  setJumps(int)
  setLastBuildPageForTab(int, int)
  setLastBuildSave(cocos2d::CCDictionary*)
  setLevelID(int)
  setLevelName(std::string)
  setNewNormalPercent(int)
  setNewNormalPercent2(int)
  setNormalPercent(int)
  setPassword(int)
  setStars(int)
  unverifyCoins()
  virtual canEncode(void)
  virtual encodeWithCoder(DS_Dictionary *)
  virtual init(void)
}
class GJGarageLayer : cocos2d::CCLayer, TextInputDelegate, FLAlertLayerProtocol, GameRateDelegate, ListButtonBarDelegate, DialogDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  achievementForUnlock(int, UnlockType)
  checkBall(int)
  checkBird(int)
  checkColor(int, bool)
  checkDart(int)
  checkDeathEffect(int)
  checkIcon(int)
  checkRobot(int)
  checkShip(int)
  checkSpecial(int)
  checkSpider(int)
  descriptionForUnlock(int, UnlockType)
  dialogClosed(DialogLayer*)
  getLockFrame(int, UnlockType)
  init()
  keyBackClicked()
  listButtonBarSwitchedPage(ListButtonBar*, int)
  node()
  onBack(cocos2d::CCObject*)
  onBallIcon(cocos2d::CCObject*)
  onBirdIcon(cocos2d::CCObject*)
  onDartIcon(cocos2d::CCObject*)
  onDeathEffect(cocos2d::CCObject*)
  onInfo(cocos2d::CCObject*)
  onKeys(cocos2d::CCObject*)
  onPlayerColor1(cocos2d::CCObject*)
  onPlayerColor2(cocos2d::CCObject*)
  onPlayerIcon(cocos2d::CCObject*)
  onRobotIcon(cocos2d::CCObject*)
  onSelectTab(cocos2d::CCObject*)
  onShards(cocos2d::CCObject*)
  onShipIcon(cocos2d::CCObject*)
  onShop(cocos2d::CCObject*)
  onSpecialIcon(cocos2d::CCObject*)
  onSpiderIcon(cocos2d::CCObject*)
  playRainbowEffect()
  playShadowEffect()
  scene()
  selectPage(IconType)
  setupColorSelect()
  setupIconSelect()
  showUnlockPopup(int, UnlockType)
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputOpened(CCTextInputNode*)
  toggleGlow()
  updateColorSelect(cocos2d::CCNode*, bool)
  updatePlayerColors()
  updatePlayerName(char const*)
  updatePlayerSelect(cocos2d::CCNode*)
  updateRate()
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual dialogClosed(DialogLayer *)
  virtual init(void)
  virtual keyBackClicked(void)
  virtual listButtonBarSwitchedPage(ListButtonBar *,int)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputOpened(CCTextInputNode *)
  virtual updateRate(void)
}
class GJGroundLayer : cocos2d::CCLayer {
  create(int, int)
  createLine(int)
  deactivateGround()
  draw()
  fadeInFinished()
  fadeInGround(float)
  fadeOutGround(float)
  getGroundY()
  hideShadows()
  init(int, int)
  loadGroundSprites(int, bool)
  positionGround(float)
  showGround()
  updateGround01Color(cocos2d::_ccColor3B)
  updateGround02Color(cocos2d::_ccColor3B)
  updateGroundPos(cocos2d::CCPoint)
  updateGroundWidth()
  updateLineBlend(bool)
  virtual draw(void)
  virtual fadeInGround(float)
  virtual fadeOutGround(float)
  virtual showGround(void)
}
class GJHttpResult : cocos2d::CCNode {
  create(bool, std::string, std::string, GJHttpType)
  init(bool, std::string, std::string, GJHttpType)
}
class GJItemIcon : cocos2d::CCSprite {
  create(UnlockType, int, cocos2d::_ccColor3B, cocos2d::_ccColor3B, bool, bool, bool, cocos2d::_ccColor3B)
  createBrowserItem(UnlockType, int)
  createStoreItem(UnlockType, int, bool, cocos2d::_ccColor3B)
  init(UnlockType, int, cocos2d::_ccColor3B, cocos2d::_ccColor3B, bool, bool, bool, cocos2d::_ccColor3B)
  setOpacity(unsigned char)
  virtual setOpacity(uchar)
}
class GJLevelScoreCell : TableViewCell {
  draw()
  init()
  loadFromScore(GJUserScore*)
  onViewProfile(cocos2d::CCObject*)
  updateBGColor(int)
  virtual draw(void)
  virtual init(void)
}
class GJListLayer : cocos2d::CCLayerColor {
  create(BoomListView*, char const*, cocos2d::_ccColor4B, float, float)
  init(BoomListView*, char const*, cocos2d::_ccColor4B, float, float)
}
class GJMapPack : cocos2d::CCNode {
  completedMaps()
  create(cocos2d::CCDictionary*)
  create()
  hasCompletedMapPack()
  init()
  parsePackColors(std::string, std::string)
  parsePackLevels(std::string)
  totalMaps()
  virtual init(void)
}
class GJMessageCell : TableViewCell, FLAlertLayerProtocol, UploadPopupDelegate, UploadActionDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  draw()
  init()
  loadFromMessage(GJUserMessage*)
  markAsRead()
  onClosePopup(UploadActionPopup*)
  onDeleteMessage(cocos2d::CCObject*)
  onToggle(cocos2d::CCObject*)
  onViewMessage(cocos2d::CCObject*)
  onViewProfile(cocos2d::CCObject*)
  updateBGColor(int)
  updateToggle()
  uploadActionFailed(int, int)
  uploadActionFinished(int, int)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual draw(void)
  virtual init(void)
  virtual onClosePopup(UploadActionPopup *)
  virtual uploadActionFailed(int,int)
  virtual uploadActionFinished(int,int)
}
class GJMessagePopup : FLAlertLayer, UploadActionDelegate, UploadPopupDelegate, FLAlertLayerProtocol, DownloadMessageDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  blockUser()
  create(GJUserMessage*)
  downloadMessageFailed(int)
  downloadMessageFinished(GJUserMessage*)
  init(GJUserMessage*)
  keyBackClicked()
  loadFromGJMessage(GJUserMessage*)
  onBlock(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  onClosePopup(UploadActionPopup*)
  onRemove(cocos2d::CCObject*)
  onReply(cocos2d::CCObject*)
  uploadActionFailed(int, int)
  uploadActionFinished(int, int)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual downloadMessageFailed(int)
  virtual downloadMessageFinished(GJUserMessage *)
  virtual keyBackClicked(void)
  virtual onClosePopup(UploadActionPopup *)
  virtual uploadActionFailed(int,int)
  virtual uploadActionFinished(int,int)
}
class GJMoreGamesLayer : GJDropDownLayer {
  create()
  customSetup()
  getMoreGamesList()
  virtual customSetup(void)
}
class GJMoveCommandLayer : FLAlertLayer, TextInputDelegate, ConfigureValuePopupDelegate {
  create(EffectGameObject*, cocos2d::CCArray*)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onEasing(cocos2d::CCObject*)
  onEasingRate(cocos2d::CCObject*)
  onLockPlayerX(cocos2d::CCObject*)
  onLockPlayerY(cocos2d::CCObject*)
  onMultiTrigger(cocos2d::CCObject*)
  onSpawnedByTrigger(cocos2d::CCObject*)
  onTargetMode(cocos2d::CCObject*)
  onTouchTriggered(cocos2d::CCObject*)
  onUpdateGroupID(cocos2d::CCObject*)
  onUpdateGroupID2(cocos2d::CCObject*)
  onUseMoveTarget(cocos2d::CCObject*)
  posFromSliderValue(float)
  sliderChanged(cocos2d::CCObject*)
  sliderValueFromPos(int)
  sliderXChanged(cocos2d::CCObject*)
  sliderYChanged(cocos2d::CCObject*)
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  toggleEasingRateVisibility()
  updateDurLabel(bool)
  updateDuration()
  updateEasingLabel()
  updateEasingRateLabel()
  updateEditorLabel()
  updateMoveCommandEasing()
  updateMoveCommandEasingRate()
  updateMoveCommandPosX()
  updateMoveCommandPosY()
  updateMoveTargetElements()
  updateMultiTriggerBtn()
  updateSpawnedByTrigger()
  updateTargetGroupID()
  updateTargetGroupID2()
  updateTextInputLabel()
  updateTextInputLabel2()
  updateTouchTriggered()
  updateValueXLabel()
  updateValueYLabel()
  valuePopupClosed(ConfigureValuePopup*, float)
  virtual keyBackClicked(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
  virtual valuePopupClosed(ConfigureValuePopup *,float)
}
class GJObjectDecoder : cocos2d::CCNode, ObjectDecoderDelegate {
  getDecodedObject(int, DS_Dictionary*)
  init()
  sharedDecoder()
  virtual getDecodedObject(int,DS_Dictionary *)
  virtual init(void)
}
class GJOptionsLayer : FLAlertLayer {
  addToggle(char const*, char const*, char const*)
  countForPage(int)
  create()
  goToPage(int)
  incrementCountForPage(int)
  infoKey(int)
  init()
  keyBackClicked()
  layerForPage(int)
  layerKey(int)
  nextPosition(int)
  objectKey(int)
  objectsForPage(int)
  onClose(cocos2d::CCObject*)
  onInfo(cocos2d::CCObject*)
  onNextPage(cocos2d::CCObject*)
  onPrevPage(cocos2d::CCObject*)
  onToggle(cocos2d::CCObject*)
  pageKey(int)
  setupOptions()
  virtual init(void)
  virtual keyBackClicked(void)
  virtual onClose(cocos2d::CCObject *)
  virtual setupOptions(void)
}
class GJPFollowCommandLayer : FLAlertLayer, TextInputDelegate {
  create(EffectGameObject*, cocos2d::CCArray*)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onMultiTrigger(cocos2d::CCObject*)
  onSpawnedByTrigger(cocos2d::CCObject*)
  onTouchTriggered(cocos2d::CCObject*)
  onUpdateGroupID(cocos2d::CCObject*)
  sliderChanged(cocos2d::CCObject*)
  sliderXModChanged(cocos2d::CCObject*)
  sliderYModChanged(cocos2d::CCObject*)
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateDurLabel(bool)
  updateDuration()
  updateEditorLabel()
  updateMaxSpeed()
  updateMaxSpeedLabel()
  updateMultiTriggerBtn()
  updateOffsetLabel()
  updatePlayerOffset()
  updateSpawnedByTrigger()
  updateTargetGroupID()
  updateTextInputLabel()
  updateTouchTriggered()
  updateXMod()
  updateXModLabel()
  updateYMod()
  updateYModLabel()
  virtual keyBackClicked(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class GJPurchaseDelegate {
  didPurchaseItem(GJStoreItem*)
  virtual didPurchaseItem(GJStoreItem *)
}
class GJRequestCell : TableViewCell, FLAlertLayerProtocol, UploadPopupDelegate, UploadActionDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  draw()
  init()
  loadFromScore(GJUserScore*)
  markAsRead()
  onClosePopup(UploadActionPopup*)
  onDeleteRequest(cocos2d::CCObject*)
  onToggle(cocos2d::CCObject*)
  onViewFriendRequest(cocos2d::CCObject*)
  onViewProfile(cocos2d::CCObject*)
  updateBGColor(int)
  updateToggle()
  uploadActionFailed(int, int)
  uploadActionFinished(int, int)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual draw(void)
  virtual init(void)
  virtual onClosePopup(UploadActionPopup *)
  virtual uploadActionFailed(int,int)
  virtual uploadActionFinished(int,int)
}
class GJRewardDelegate {
  rewardsStatusFailed()
  rewardsStatusFinished(int)
  virtual rewardsStatusFailed(void)
  virtual rewardsStatusFinished(int)
}
class GJRewardItem : cocos2d::CCObject {
  canEncode()
  create(int, int, std::string)
  create()
  createSpecial(GJRewardType, int, int, SpecialRewardItem, int, SpecialRewardItem, int, int, int)
  createWithCoder(DS_Dictionary*)
  createWithObject(GJRewardType, GJRewardObject*)
  createWithObjects(GJRewardType, cocos2d::CCArray*)
  dataLoaded(DS_Dictionary*)
  encodeWithCoder(DS_Dictionary*)
  getNextShardType(SpecialRewardItem)
  getRandomNonMaxShardType()
  getRandomShardType()
  getRewardCount(SpecialRewardItem)
  getRewardObjectForType(SpecialRewardItem)
  init(int, int, std::string)
  isShardType(SpecialRewardItem)
  rewardItemToStat(SpecialRewardItem)
  setObjects(cocos2d::CCArray*)
  virtual canEncode(void)
  virtual encodeWithCoder(DS_Dictionary *)
}
class GJRewardObject : cocos2d::CCObject {
  canEncode()
  create(SpecialRewardItem, int, int)
  create()
  createItemUnlock(UnlockType, int)
  createWithCoder(DS_Dictionary*)
  dataLoaded(DS_Dictionary*)
  encodeWithCoder(DS_Dictionary*)
  init(SpecialRewardItem, int, int)
  isSpecialType()
  virtual canEncode(void)
  virtual encodeWithCoder(DS_Dictionary *)
}
class GJRobotSprite : CCAnimatedSprite {
  create()
  hideGlow()
  hideSecondary()
  init(std::string)
  init()
  setOpacity(unsigned char)
  showGlow()
  updateColor01(cocos2d::_ccColor3B)
  updateColor02(cocos2d::_ccColor3B)
  updateColors()
  updateFrame(int)
  updateGlowColor(cocos2d::_ccColor3B, bool)
  virtual hideSecondary(void)
  virtual init(void)
  virtual setOpacity(uchar)
}
class GJRotateCommandLayer : FLAlertLayer, TextInputDelegate, ConfigureValuePopupDelegate {
  create(EffectGameObject*, cocos2d::CCArray*)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onEasing(cocos2d::CCObject*)
  onEasingRate(cocos2d::CCObject*)
  onLockRotation(cocos2d::CCObject*)
  onMultiTrigger(cocos2d::CCObject*)
  onSpawnedByTrigger(cocos2d::CCObject*)
  onTouchTriggered(cocos2d::CCObject*)
  onUpdateGroupID(cocos2d::CCObject*)
  onUpdateGroupID2(cocos2d::CCObject*)
  sliderChanged(cocos2d::CCObject*)
  sliderDegreesChanged(cocos2d::CCObject*)
  sliderTimesChanged(cocos2d::CCObject*)
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  toggleEasingRateVisibility()
  updateCommandDegrees()
  updateCommandTimes()
  updateDegreesLabel()
  updateDurLabel(bool)
  updateDuration()
  updateEasingLabel()
  updateEasingRateLabel()
  updateEditorLabel()
  updateMoveCommandEasing()
  updateMoveCommandEasingRate()
  updateMultiTriggerBtn()
  updateSpawnedByTrigger()
  updateTargetGroupID()
  updateTargetGroupID2()
  updateTextInputLabel()
  updateTextInputLabel2()
  updateTimesLabel()
  updateTouchTriggered()
  valuePopupClosed(ConfigureValuePopup*, float)
  virtual keyBackClicked(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
  virtual valuePopupClosed(ConfigureValuePopup *,float)
}
class GJRotationControl : cocos2d::CCLayer {
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create()
  draw()
  finishTouch()
  init()
  setAngle(float)
  updateSliderPosition(cocos2d::CCPoint)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual draw(void)
  virtual init(void)
}
class GJRotationControlDelegate {
  angleChangeBegin()
  angleChangeEnded()
  angleChanged(float)
  virtual angleChangeBegin(void)
  virtual angleChangeEnded(void)
  virtual angleChanged(float)
}
class GJScaleControl : cocos2d::CCLayer {
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create()
  finishTouch()
  init()
  loadValues(GameObject*, cocos2d::CCArray*)
  scaleFromValue(float)
  sliderChanged(cocos2d::CCObject*)
  updateLabel(float)
  valueFromScale(float)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual init(void)
}
class GJScaleControlDelegate {
  scaleChangeBegin()
  scaleChangeEnded()
  scaleChanged(float)
  virtual scaleChangeBegin(void)
  virtual scaleChangeEnded(void)
  virtual scaleChanged(float)
}
class GJScoreCell : TableViewCell, FLAlertLayerProtocol {
  FLAlert_Clicked(FLAlertLayer*, bool)
  draw()
  init()
  loadFromScore(GJUserScore*)
  onBan(cocos2d::CCObject*)
  onCheck(cocos2d::CCObject*)
  onMoreLevels(cocos2d::CCObject*)
  onViewProfile(cocos2d::CCObject*)
  updateBGColor(int)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual draw(void)
  virtual init(void)
}
class GJSearchObject : cocos2d::CCNode {
  create(SearchType)
  create(SearchType, std::string)
  create(SearchType, std::string, std::string, std::string, int, bool, bool, bool, int, bool, bool, bool, bool, bool, bool, bool, bool, int, int)
  createFromKey(char const*)
  getKey()
  getNextPageKey()
  getNextPageObject()
  getPageObject(int)
  getPrevPageObject()
  getSearchKey(SearchType, std::string, std::string, std::string, int, bool, bool, bool, int, bool, bool, bool, bool, bool, bool, bool, bool, int, int)
  getString()
  init(SearchType, std::string, std::string, std::string, int, bool, bool, bool, int, bool, bool, bool, bool, bool, bool, bool, bool, int, int)
}
class GJShopLayer : cocos2d::CCLayer, GJPurchaseDelegate {
  create(ShopType)
  didPurchaseItem(GJStoreItem*)
  exitVideoAdItems()
  init(ShopType)
  keyBackClicked()
  onBack(cocos2d::CCObject*)
  onCommunityCredits(cocos2d::CCObject*)
  onPlushies(cocos2d::CCObject*)
  onSelectItem(cocos2d::CCObject*)
  onVideoAd(cocos2d::CCObject*)
  scene(ShopType)
  showVideoAdReward(int)
  updateCurrencyCounter()
  virtual didPurchaseItem(GJStoreItem *)
  virtual keyBackClicked(void)
}
class GJSongBrowser : GJDropDownLayer, FLAlertLayerProtocol {
  FLAlert_Clicked(FLAlertLayer*, bool)
  create(LevelSettingsObject*)
  customSetup()
  init(LevelSettingsObject*)
  loadPage(int)
  onDeleteAll(cocos2d::CCObject*)
  onNextPage(cocos2d::CCObject*)
  onPrevPage(cocos2d::CCObject*)
  setupPageInfo(int, int, int)
  setupSongBrowser(cocos2d::CCArray*)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual customSetup(void)
}
class GJSpecialColorSelect : FLAlertLayer {
  create(int, GJSpecialColorSelectDelegate*, bool)
  getButtonByTag(int)
  highlightSelected(ButtonSprite*)
  init(int, GJSpecialColorSelectDelegate*, bool)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onSelectColor(cocos2d::CCObject*)
  textForColorIdx(int)
  virtual keyBackClicked(void)
}
class GJSpecialColorSelectDelegate {
  colorSelectClosed(GJSpecialColorSelect*, int)
  virtual colorSelectClosed(GJSpecialColorSelect *,int)
}
class GJSpiderSprite : GJRobotSprite {
  create()
  init()
  virtual init(void)
}
class GJSpriteColor : cocos2d::CCNode {
  create()
  getColorMode()
  init()
  resetCustomColorMode()
  setCustomColorMode(int)
  setDefaultColorMode(int)
  virtual init(void)
}
class GJStoreItem : cocos2d::CCNode {
  create(int, int, int, int, ShopType)
  init(int, int, int, int, ShopType)
}
class GJUnlockableItem : cocos2d::CCObject {
  create()
  init()
}
class GJUserCell : TableViewCell, FLAlertLayerProtocol, UploadPopupDelegate, UploadActionDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  draw()
  init()
  loadFromScore(GJUserScore*)
  onCancelFriendRequest(cocos2d::CCObject*)
  onClosePopup(UploadActionPopup*)
  onRemoveFriend(cocos2d::CCObject*)
  onSendMessage(cocos2d::CCObject*)
  onUnblockUser(cocos2d::CCObject*)
  onViewFriendRequest(cocos2d::CCObject*)
  onViewProfile(cocos2d::CCObject*)
  updateBGColor(int)
  uploadActionFailed(int, int)
  uploadActionFinished(int, int)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual draw(void)
  virtual init(void)
  virtual onClosePopup(UploadActionPopup *)
  virtual uploadActionFailed(int,int)
  virtual uploadActionFinished(int,int)
}
class GJUserMessage : cocos2d::CCNode {
  create(cocos2d::CCDictionary*)
  create()
  init()
  virtual init(void)
}
class GJUserScore : cocos2d::CCNode {
  create(cocos2d::CCDictionary*)
  create()
  init()
  isCurrentUser()
  mergeWithScore(GJUserScore*)
  virtual init(void)
}
class GJWorldNode : cocos2d::CCNode {
  addDotsToLevel(int, bool)
  create(int, WorldSelectLayer*)
  dotPositionForLevel(int, int)
  init(int, WorldSelectLayer*)
  onLevel(cocos2d::CCObject*)
  playStep1()
  playStep2()
  playStep3()
  positionForLevelButton(int)
  unlockActiveItem()
}
class GJWriteMessagePopup : FLAlertLayer, TextInputDelegate, UploadMessageDelegate, UploadPopupDelegate, FLAlertLayerProtocol {
  FLAlert_Clicked(FLAlertLayer*, bool)
  closeMessagePopup(bool)
  create(int, int)
  init(int, int)
  keyBackClicked()
  onClearBody(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  onClosePopup(UploadActionPopup*)
  onSend(cocos2d::CCObject*)
  registerWithTouchDispatcher()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputOpened(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateBody(std::string)
  updateCharCountLabel(int)
  updateSubject(std::string)
  updateText(std::string, int)
  uploadMessageFailed(int)
  uploadMessageFinished(int)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual keyBackClicked(void)
  virtual onClosePopup(UploadActionPopup *)
  virtual registerWithTouchDispatcher(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputOpened(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
  virtual uploadMessageFailed(int)
  virtual uploadMessageFinished(int)
}
class GManager : cocos2d::CCNode {
  dataLoaded(DS_Dictionary*)
  encodeDataTo(DS_Dictionary*)
  firstLoad()
  getCompressedSaveString()
  getSaveString()
  init()
  load()
  loadDataFromFile(std::string)
  loadFromCompressedString(std::string)
  loadFromString(std::string)
  save()
  saveData(DS_Dictionary*, std::string)
  saveGMTo(std::string)
  setup()
  tryLoadData(DS_Dictionary*, std::string)
  virtual dataLoaded(DS_Dictionary *)
  virtual encodeDataTo(DS_Dictionary *)
  virtual firstLoad(void)
  virtual init(void)
  virtual setup(void)
}
class GooglePlayDelegate {
  googlePlaySignedIn()
  virtual googlePlaySignedIn(void)
}
class GooglePlayManager : cocos2d::CCNode {
  googlePlaySignedIn()
  init()
  sharedState()
  virtual init(void)
}
class GravityEffectSprite : cocos2d::CCSprite {
  create()
  draw()
  init()
  updateSpritesColor(cocos2d::_ccColor3B)
  virtual draw(void)
  virtual init(void)
}
class GroupCommandObject : cocos2d::CCNode {
  create()
  createFromString(std::string)
  easeToText(int)
  getEasedAction(cocos2d::CCActionInterval*, int, float)
  getSaveString()
  init()
  resetDelta(bool)
  runFollowCommand(float, float, float, bool)
  runMoveCommand(cocos2d::CCPoint, float, int, float, bool, bool)
  runPlayerFollowCommand(float, float, int, float, float)
  runRotateCommand(float, float, int, float, bool)
  step(float)
  updateTweenAction(float, char const*)
  virtual init(void)
  virtual updateTweenAction(float,char const*)
}
class HardStreak : cocos2d::CCDrawNode {
  addPoint(cocos2d::CCPoint)
  clearBehindXPos(float)
  create()
  firstSetup()
  init()
  normalizeAngle(double)
  quadCornerOffset(cocos2d::CCPoint, cocos2d::CCPoint, float)
  reset()
  resumeStroke()
  stopStroke()
  updateStroke(float)
  virtual init(void)
}
class HSVWidgetPopup : FLAlertLayer {
  create(cocos2d::_ccHSVValue, HSVWidgetPopupDelegate*, std::string)
  init(cocos2d::_ccHSVValue, HSVWidgetPopupDelegate*, std::string)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  virtual keyBackClicked(void)
}
class HSVWidgetPopupDelegate {
  hsvPopupClosed(HSVWidgetPopup*, cocos2d::_ccHSVValue)
  virtual hsvPopupClosed(HSVWidgetPopup *,cocos2d::_ccHSVValue)
}
class InfoAlertButton : CCMenuItemSpriteExtra {
  activate()
  create(std::string, std::string, float)
  init(std::string, std::string, float)
  virtual activate(void)
}
class InfoLayer : FLAlertLayer, LevelCommentDelegate, CommentUploadDelegate, FLAlertLayerProtocol {
  FLAlert_Clicked(FLAlertLayer*, bool)
  commentUploadFailed(int, CommentError)
  commentUploadFinished(int)
  confirmReport(cocos2d::CCObject*)
  create(GJGameLevel*, GJUserScore*)
  getSpriteButton(char const*, void (cocos2d::CCObject::*)(cocos2d::CCObject*), cocos2d::CCMenu*, float, cocos2d::CCPoint)
  init(GJGameLevel*, GJUserScore*)
  isCorrect(char const*)
  keyBackClicked()
  loadCommentsFailed(char const*)
  loadCommentsFinished(cocos2d::CCArray*, char const*)
  loadPage(int, bool)
  onClose(cocos2d::CCObject*)
  onComment(cocos2d::CCObject*)
  onCopyLevelID(cocos2d::CCObject*)
  onGetComments(cocos2d::CCObject*)
  onLevelInfo(cocos2d::CCObject*)
  onMore(cocos2d::CCObject*)
  onNextPage(cocos2d::CCObject*)
  onOriginal(cocos2d::CCObject*)
  onPrevPage(cocos2d::CCObject*)
  onRefreshComments(cocos2d::CCObject*)
  onSimilar(cocos2d::CCObject*)
  registerWithTouchDispatcher()
  reloadWindow()
  setupCommentsBrowser(cocos2d::CCArray*)
  setupLevelInfo()
  setupPageInfo(std::string, char const*)
  show()
  toggleCommentMode(cocos2d::CCObject*)
  toggleExtendedMode(cocos2d::CCObject*)
  toggleSmallCommentMode(cocos2d::CCObject*)
  updateCommentModeButtons()
  updateLevelsLabel()
  updateUserScoreFinished()
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual commentUploadFailed(int,CommentError)
  virtual commentUploadFinished(int)
  virtual keyBackClicked(void)
  virtual loadCommentsFailed(char const*)
  virtual loadCommentsFinished(cocos2d::CCArray *,char const*)
  virtual registerWithTouchDispatcher(void)
  virtual setupPageInfo(std::string,char const*)
  virtual show(void)
  virtual updateUserScoreFinished(void)
}
class InheritanceNode : cocos2d::CCObject {
  create(int, InheritanceNode*)
  init(int, InheritanceNode*)
}
class InstantSection : cocos2d::CCObject {
  create(int, int)
  init(int, int)
}
class KeybindingsLayer : FLAlertLayer {
  addKeyPair(char const*, char const*)
  countForPage(int)
  create()
  goToPage(int)
  incrementCountForPage(int)
  infoKey(int)
  init()
  keyBackClicked()
  layerForPage(int)
  layerKey(int)
  nextPosition(int)
  objectKey(int)
  objectsForPage(int)
  onClose(cocos2d::CCObject*)
  onInfo(cocos2d::CCObject*)
  onNextPage(cocos2d::CCObject*)
  onPrevPage(cocos2d::CCObject*)
  onToggle(cocos2d::CCObject*)
  pageKey(int)
  virtual init(void)
  virtual keyBackClicked(void)
}
class KeybindingsManager : cocos2d::CCNode {
  commandForKey(cocos2d::enumKeyCodes, GJKeyGroup, bool, bool, bool)
  commandForKeyMods(cocos2d::enumKeyCodes, GJKeyGroup)
  commandForKeyNoMods(cocos2d::enumKeyCodes, GJKeyGroup)
  commandToKeyForGroup(GJKeyGroup)
  dataLoaded(DS_Dictionary*)
  encodeDataTo(DS_Dictionary*)
  firstSetup()
  groupForCommand(GJKeyCommand)
  init()
  keyForCommand(GJKeyCommand)
  keyToCommandForGroup(GJKeyGroup)
  setCommandToKeyDict(cocos2d::CCDictionary*)
  setKeyToCommandDict(cocos2d::CCDictionary*)
  sharedState()
  virtual init(void)
}
class KeysLayer : cocos2d::CCLayer, FLAlertLayerProtocol, DialogDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  create()
  dialogClosed(DialogLayer*)
  goToPage(int)
  init()
  keyBackClicked()
  onBack(cocos2d::CCObject*)
  onSelectItem(cocos2d::CCObject*)
  onShop(cocos2d::CCObject*)
  onShop3(cocos2d::CCObject*)
  onSpecialItem(cocos2d::CCObject*)
  onSwitchPage(cocos2d::CCObject*)
  scene()
  switchToOpenedState(CCMenuItemSpriteExtra*)
  updateUnlockedLabel()
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual dialogClosed(DialogLayer *)
  virtual init(void)
  virtual keyBackClicked(void)
}
class LabelGameObject : EffectGameObject {
  addMainSpriteToParent(bool)
  create()
  customObjectSetup(std::map<std::string, std::string, std::less<std::string >, std::allocator<std::pair<std::string const, std::string > > >&)
  getSaveString()
  init()
  queueUpdateLabel(std::string)
  setObjectColor(cocos2d::_ccColor3B const&)
  setOpacity(unsigned char)
  setupCustomSprites()
  updateLabel(std::string)
  updateLabelIfDirty()
  virtual addMainSpriteToParent(bool)
  virtual customObjectSetup(std::map<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string const,std::string>>> &)
  virtual getSaveString(void)
  virtual init(void)
  virtual setObjectColor(cocos2d::_ccColor3B const&)
  virtual setOpacity(uchar)
  virtual setupCustomSprites(void)
}
class LeaderboardManagerDelegate {
  loadLeaderboardFailed(char const*)
  loadLeaderboardFinished(cocos2d::CCArray*, char const*)
  updateUserScoreFailed()
  updateUserScoreFinished()
  virtual loadLeaderboardFailed(char const*)
  virtual loadLeaderboardFinished(cocos2d::CCArray *,char const*)
  virtual updateUserScoreFailed(void)
  virtual updateUserScoreFinished(void)
}
class LeaderboardsLayer : cocos2d::CCLayer, LeaderboardManagerDelegate {
  create(LeaderboardState)
  init(LeaderboardState)
  isCorrect(char const*)
  keyBackClicked()
  loadLeaderboardFailed(char const*)
  loadLeaderboardFinished(cocos2d::CCArray*, char const*)
  onBack(cocos2d::CCObject*)
  onCreators(cocos2d::CCObject*)
  onGlobal(cocos2d::CCObject*)
  onInfo(cocos2d::CCObject*)
  onTop(cocos2d::CCObject*)
  onWeek(cocos2d::CCObject*)
  refreshTabs()
  scene(LeaderboardState)
  selectLeaderboard(LeaderboardState)
  setupLevelBrowser(cocos2d::CCArray*)
  setupTabs()
  toggleTabButtons()
  updateUserScoreFailed()
  updateUserScoreFinished()
  virtual keyBackClicked(void)
  virtual loadLeaderboardFailed(char const*)
  virtual loadLeaderboardFinished(cocos2d::CCArray *,char const*)
  virtual updateUserScoreFailed(void)
  virtual updateUserScoreFinished(void)
}
class LevelBrowserLayer : cocos2d::CCLayer, LevelManagerDelegate, FLAlertLayerProtocol, SetIDPopupDelegate, SetTextPopupDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  create(GJSearchObject*)
  getLevelMatchingSearch(cocos2d::CCArray*, std::string)
  init(GJSearchObject*)
  isCorrect(char const*)
  keyBackClicked()
  keyDown(cocos2d::enumKeyCodes)
  loadLevelsFailed(char const*)
  loadLevelsFinished(cocos2d::CCArray*, char const*)
  loadPage(GJSearchObject*)
  onBack(cocos2d::CCObject*)
  onClearSearch(cocos2d::CCObject*)
  onDeleteAll(cocos2d::CCObject*)
  onEnter()
  onEnterTransitionDidFinish()
  onFavorites(cocos2d::CCObject*)
  onGoToFolder(cocos2d::CCObject*)
  onGoToLastPage(cocos2d::CCObject*)
  onGoToPage(cocos2d::CCObject*)
  onInfo(cocos2d::CCObject*)
  onMyOnlineLevels(cocos2d::CCObject*)
  onNew(cocos2d::CCObject*)
  onNextPage(cocos2d::CCObject*)
  onPrevPage(cocos2d::CCObject*)
  onRefresh(cocos2d::CCObject*)
  onRemoveAllFavorites(cocos2d::CCObject*)
  onSaved(cocos2d::CCObject*)
  onSearch(cocos2d::CCObject*)
  scene(GJSearchObject*)
  setIDPopupClosed(SetIDPopup*, int)
  setSearchObject(GJSearchObject*)
  setTextPopupClosed(SetTextPopup*, std::string)
  setupLevelBrowser(cocos2d::CCArray*)
  setupPageInfo(std::string, char const*)
  updateLevelsLabel()
  updatePageLabel()
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual keyBackClicked(void)
  virtual keyDown(cocos2d::enumKeyCodes)
  virtual loadLevelsFailed(char const*)
  virtual loadLevelsFinished(cocos2d::CCArray *,char const*)
  virtual onEnter(void)
  virtual onEnterTransitionDidFinish(void)
  virtual setIDPopupClosed(SetIDPopup *,int)
  virtual setTextPopupClosed(SetTextPopup *,std::string)
  virtual setupPageInfo(std::string,char const*)
}
class LevelCell : TableViewCell {
  create(float, float)
  draw()
  init()
  loadCustomLevelCell()
  loadFromLevel(GJGameLevel*)
  loadLocalLevelCell()
  onClick(cocos2d::CCObject*)
  onViewProfile(cocos2d::CCObject*)
  updateBGColor(int)
  virtual draw(void)
  virtual init(void)
}
class LevelCommentDelegate {
  loadCommentsFailed(char const*)
  loadCommentsFinished(cocos2d::CCArray*, char const*)
  setupPageInfo(std::string, char const*)
  updateUserScoreFinished()
  virtual loadCommentsFailed(char const*)
  virtual loadCommentsFinished(cocos2d::CCArray *,char const*)
  virtual setupPageInfo(std::string,char const*)
  virtual updateUserScoreFinished(void)
}
class LevelDeleteDelegate {
  levelDeleteFailed(int)
  levelDeleteFinished(int)
  virtual levelDeleteFailed(int)
  virtual levelDeleteFinished(int)
}
class LevelDownloadDelegate {
  levelDownloadFailed(int)
  levelDownloadFinished(GJGameLevel*)
  virtual levelDownloadFailed(int)
  virtual levelDownloadFinished(GJGameLevel *)
}
class LevelEditorLayer : GJBaseGameLayer, LevelSettingsDelegate {
  activateTriggerEffect(EffectGameObject*, float, float, float)
  addObjectFromString(std::string)
  addObjectsRecursiveFromArray(cocos2d::CCArray*, int)
  addRelatedStickyObjects(cocos2d::CCArray*)
  addSpecial(GameObject*)
  addToGroup(GameObject*, int, bool)
  addToRedoList(UndoObject*)
  addToUndoList(UndoObject*, bool)
  animateInDualGround(GameObject*, float, bool)
  assignNewStickyGroups(cocos2d::CCArray*)
  breakApartTextObject(GameObject*)
  calculateColorValues(EffectGameObject*, EffectGameObject*, int, float, ColorActionSprite*, GJEffectManager*)
  canPasteState()
  checkCollisions(PlayerObject*, float)
  copyObjectState(GameObject*)
  create(GJGameLevel*)
  createBackground()
  createGroundLayer()
  createObject(int, cocos2d::CCPoint, bool)
  createObjectsFromSetup(std::string)
  createObjectsFromString(std::string, bool)
  dirtifyTriggers()
  draw()
  enterDualMode(GameObject*, bool)
  fastUpdateDisabledGroups()
  flipGravity(PlayerObject*, bool, bool)
  fullUpdateDisabledGroups()
  getAllObjects()
  getGridPos(cocos2d::CCPoint)
  getLastObjectX()
  getLevelString()
  getNextColorChannel()
  getNextFreeBlockID(cocos2d::CCArray*)
  getNextFreeGroupID(cocos2d::CCArray*)
  getNextFreeItemID(cocos2d::CCArray*)
  getObjectRect(GameObject*, bool)
  getOtherPlayer(PlayerObject*)
  getRelativeOffset(GameObject*)
  getSectionCount()
  getStickyGroup(int)
  getTriggerGroup(int)
  groupStickyObjects(cocos2d::CCArray*)
  handleAction(bool, cocos2d::CCArray*)
  hasAction(bool)
  init(GJGameLevel*)
  isLayerLocked(int)
  levelSettingsUpdated()
  objectAtPosition(cocos2d::CCPoint)
  objectMoved(GameObject*)
  objectsAtPosition(cocos2d::CCPoint)
  objectsInRect(cocos2d::CCRect, bool)
  onPausePlaytest()
  onPlaytest()
  onResumePlaytest()
  onStopPlaytest()
  pasteAtributeState(GameObject*, cocos2d::CCArray*)
  pasteColorState(GameObject*, cocos2d::CCArray*)
  playMusic()
  playerWillSwitchMode(PlayerObject*, GameObject*)
  processLoadedMoveActions()
  processMoveActionsStepOld()
  recreateGroups()
  redoLastAction()
  removeAllObjects()
  removeAllObjectsOfType(int)
  removeBackground()
  removeFromGroup(GameObject*, int)
  removeGroundLayer()
  removeObject(GameObject*, bool)
  removePlayer2()
  removeSpecial(GameObject*)
  resetEffectTriggerOptim(GameObject*, cocos2d::CCArray*)
  resetMovingObjects()
  resetObjectVector()
  resetToggledGroups()
  resetToggledGroupsAndObjects()
  resetUnusedColorChannels()
  rotationForSlopeNearObject(GameObject*)
  runColorEffect(EffectGameObject*, int, float, float, bool)
  scene(GJGameLevel*)
  setObjectCount(int)
  setStartPosObject(StartPosObject*)
  setupLevelStart(LevelSettingsObject*)
  shouldBlend(int)
  sortBatchnodeChildren(float)
  sortStickyGroups()
  spawnGroupPreview(int, float, float, float, float, float)
  spawnPlayer2()
  stopTriggersInGroup(int, float)
  switchToFlyMode(PlayerObject*, GameObject*, bool, int)
  switchToRobotMode(PlayerObject*, GameObject*, bool)
  switchToRollMode(PlayerObject*, GameObject*, bool)
  switchToSpiderMode(PlayerObject*, GameObject*, bool)
  timeForXPos(float)
  toggleBackground(bool)
  toggleDualMode(GameObject*, bool, PlayerObject*, bool)
  toggleGrid(bool)
  toggleGround(bool)
  toggleGroupPreview(int, bool)
  toggleLockActiveLayer()
  transferDefaultColors(GJEffectManager*, GJEffectManager*)
  triggerFollowCommand(EffectGameObject*)
  triggerPlayerFollowCommand(EffectGameObject*)
  triggerRotateCommand(EffectGameObject*)
  typeExistsAtPosition(int, cocos2d::CCPoint, bool, bool, float)
  undoLastAction()
  ungroupStickyObjects(cocos2d::CCArray*)
  unlockAllLayers()
  update(float)
  updateBGAndGColors()
  updateBlendValues()
  updateColor(cocos2d::_ccColor3B, float, int, bool, float, cocos2d::_ccHSVValue, int, bool, int, EffectGameObject*)
  updateDualGround(PlayerObject*, int, bool)
  updateEditorMode()
  updateGameObjects()
  updateGameObjectsNew()
  updateGround(float)
  updateGroundWidth()
  updateLevelColors()
  updateLevelFont(int)
  updateOptions()
  updateTimeMod(float, bool)
  updateToggledGroups()
  updateVisibility(float)
  validGroup(GameObject*, bool)
  willSwitchToMode(int, PlayerObject*)
  xPosForTime(float)
  virtual addToGroup(GameObject *,int,bool)
  virtual calculateColorValues(EffectGameObject *,EffectGameObject *,int,float,ColorActionSprite *,GJEffectManager *)
  virtual draw(void)
  virtual flipGravity(PlayerObject *,bool,bool)
  virtual levelSettingsUpdated(void)
  virtual removeFromGroup(GameObject *,int)
  virtual timeForXPos(float)
  virtual update(float)
  virtual updateColor(cocos2d::_ccColor3B,float,int,bool,float,cocos2d::_ccHSVValue,int,bool,int,EffectGameObject *)
  virtual xPosForTime(float)
}
class LevelFeatureLayer : FLAlertLayer {
  create(int)
  init(int)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onDown(cocos2d::CCObject*)
  onDown2(cocos2d::CCObject*)
  onRemoveValues(cocos2d::CCObject*)
  onSetEpicOnly(cocos2d::CCObject*)
  onSetFeatured(cocos2d::CCObject*)
  onToggleEpic(cocos2d::CCObject*)
  onUp(cocos2d::CCObject*)
  onUp2(cocos2d::CCObject*)
  updateStars()
  virtual keyBackClicked(void)
}
class LevelInfoLayer : cocos2d::CCLayer, LevelDownloadDelegate, LevelUpdateDelegate, RateLevelDelegate, LikeItemDelegate, FLAlertLayerProtocol, LevelDeleteDelegate, NumberInputDelegate, SetIDPopupDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  confirmClone(cocos2d::CCObject*)
  confirmDelete(cocos2d::CCObject*)
  confirmMoveToBottom(cocos2d::CCObject*)
  confirmMoveToTop(cocos2d::CCObject*)
  confirmOwnerDelete(cocos2d::CCObject*)
  create(GJGameLevel*)
  downloadLevel()
  incrementDislikes()
  incrementLikes()
  init(GJGameLevel*)
  keyBackClicked()
  keyDown(cocos2d::enumKeyCodes)
  levelDeleteFailed(int)
  levelDeleteFinished(int)
  levelDownloadFailed(int)
  levelDownloadFinished(GJGameLevel*)
  levelUpdateFailed(int)
  levelUpdateFinished(GJGameLevel*, UpdateResponse)
  likedItem(LikeItemType, int, bool)
  numberInputClosed(NumberInputLayer*)
  onBack(cocos2d::CCObject*)
  onClone(cocos2d::CCObject*)
  onDelete(cocos2d::CCObject*)
  onFavorite(cocos2d::CCObject*)
  onFeatured(cocos2d::CCObject*)
  onGarage(cocos2d::CCObject*)
  onInfo(cocos2d::CCObject*)
  onLevelInfo(cocos2d::CCObject*)
  onLevelLeaderboard(cocos2d::CCObject*)
  onLike(cocos2d::CCObject*)
  onLowDetailMode(cocos2d::CCObject*)
  onOwnerDelete(cocos2d::CCObject*)
  onPlay(cocos2d::CCObject*)
  onPlayReplay(cocos2d::CCObject*)
  onRate(cocos2d::CCObject*)
  onRateDemon(cocos2d::CCObject*)
  onRateStars(cocos2d::CCObject*)
  onRateStarsMod(cocos2d::CCObject*)
  onSetFolder(cocos2d::CCObject*)
  onUpdate(cocos2d::CCObject*)
  onViewProfile(cocos2d::CCObject*)
  playStep2()
  playStep3()
  rateLevelClosed()
  scene(GJGameLevel*)
  setIDPopupClosed(SetIDPopup*, int)
  setupLevelInfo()
  setupProgressBars()
  shouldDownloadLevel()
  showSongWarning()
  showUpdateAlert(UpdateResponse)
  tryCloneLevel(cocos2d::CCObject*)
  tryShowAd()
  updateLabelValues()
  updateSideButtons()
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual keyBackClicked(void)
  virtual keyDown(cocos2d::enumKeyCodes)
  virtual levelDeleteFailed(int)
  virtual levelDeleteFinished(int)
  virtual levelDownloadFailed(int)
  virtual levelDownloadFinished(GJGameLevel *)
  virtual levelUpdateFailed(int)
  virtual levelUpdateFinished(GJGameLevel *,UpdateResponse)
  virtual likedItem(LikeItemType,int,bool)
  virtual numberInputClosed(NumberInputLayer *)
  virtual rateLevelClosed(void)
  virtual setIDPopupClosed(SetIDPopup *,int)
}
class LevelLeaderboard : FLAlertLayer, LeaderboardManagerDelegate {
  create(GJGameLevel*, LevelLeaderboardType)
  init(GJGameLevel*, LevelLeaderboardType)
  isCorrect(char const*)
  keyBackClicked()
  loadLeaderboardFailed(char const*)
  loadLeaderboardFinished(cocos2d::CCArray*, char const*)
  loadScores()
  onChangeType(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  onUpdate(cocos2d::CCObject*)
  registerWithTouchDispatcher()
  setupLeaderboard(cocos2d::CCArray*)
  show()
  updateUserScoreFailed()
  updateUserScoreFinished()
  virtual keyBackClicked(void)
  virtual loadLeaderboardFailed(char const*)
  virtual loadLeaderboardFinished(cocos2d::CCArray *,char const*)
  virtual registerWithTouchDispatcher(void)
  virtual show(void)
  virtual updateUserScoreFailed(void)
  virtual updateUserScoreFinished(void)
}
class LevelManagerDelegate {
  loadLevelsFailed(char const*)
  loadLevelsFinished(cocos2d::CCArray*, char const*)
  setupPageInfo(std::string, char const*)
  virtual loadLevelsFailed(char const*)
  virtual loadLevelsFinished(cocos2d::CCArray *,char const*)
  virtual setupPageInfo(std::string,char const*)
}
class LevelPage : cocos2d::CCLayer, DialogDelegate {
  addSecretCoin()
  addSecretDoor()
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create(GJGameLevel*)
  dialogClosed(DialogLayer*)
  init(GJGameLevel*)
  onInfo(cocos2d::CCObject*)
  onPlay(cocos2d::CCObject*)
  onSecretDoor(cocos2d::CCObject*)
  playCoinEffect()
  playStep2()
  playStep3()
  registerWithTouchDispatcher()
  updateDynamicPage(GJGameLevel*)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual dialogClosed(DialogLayer *)
  virtual registerWithTouchDispatcher(void)
}
class LevelSearchLayer : cocos2d::CCLayer, TextInputDelegate, FLAlertLayerProtocol, DemonFilterDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  checkDiff(int)
  checkTime(int)
  clearFilters()
  confirmClearFilters(cocos2d::CCObject*)
  create()
  demonFilterSelectClosed(int)
  getDiffKey(int)
  getLevelLenKey()
  getSearchDiffKey()
  getSearchObject(SearchType, std::string)
  getTimeKey(int)
  init()
  keyBackClicked()
  onBack(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  onFollowed(cocos2d::CCObject*)
  onFriends(cocos2d::CCObject*)
  onLatestStars(cocos2d::CCObject*)
  onMagic(cocos2d::CCObject*)
  onMoreOptions(cocos2d::CCObject*)
  onMostDownloaded(cocos2d::CCObject*)
  onMostLikes(cocos2d::CCObject*)
  onMostRecent(cocos2d::CCObject*)
  onSearch(cocos2d::CCObject*)
  onSearchUser(cocos2d::CCObject*)
  onSpecialDemon(cocos2d::CCObject*)
  onStarAward(cocos2d::CCObject*)
  onTrending(cocos2d::CCObject*)
  scene()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputOpened(CCTextInputNode*)
  toggleDifficulty(cocos2d::CCObject*)
  toggleDifficultyNum(int, bool)
  toggleStar(cocos2d::CCObject*)
  toggleTime(cocos2d::CCObject*)
  toggleTimeNum(int, bool)
  updateSearchLabel(char const*)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual demonFilterSelectClosed(int)
  virtual init(void)
  virtual keyBackClicked(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputOpened(CCTextInputNode *)
}
class LevelSelectLayer : cocos2d::CCLayer, BoomScrollLayerDelegate, DynamicScrollDelegate {
  colorForPage(int)
  create(int)
  getColorValue(int, int, float)
  init(int)
  keyBackClicked()
  keyDown(cocos2d::enumKeyCodes)
  onBack(cocos2d::CCObject*)
  onDownload(cocos2d::CCObject*)
  onInfo(cocos2d::CCObject*)
  onNext(cocos2d::CCObject*)
  onPlay(cocos2d::CCObject*)
  onPrev(cocos2d::CCObject*)
  scene(int)
  scrollLayerMoved(cocos2d::CCPoint)
  tryShowAd()
  updatePageWithObject(cocos2d::CCObject*, cocos2d::CCObject*)
  virtual keyBackClicked(void)
  virtual keyDown(cocos2d::enumKeyCodes)
  virtual scrollLayerMoved(cocos2d::CCPoint)
  virtual updatePageWithObject(cocos2d::CCObject *,cocos2d::CCObject *)
}
class LevelSettingsDelegate {
  levelSettingsUpdated()
  virtual levelSettingsUpdated(void)
}
class LevelSettingsLayer : FLAlertLayer, ColorSelectDelegate, SelectArtDelegate, FLAlertLayerProtocol, CustomSongLayerDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  audioNext(cocos2d::CCObject*)
  audioPrevious(cocos2d::CCObject*)
  colorSelectClosed(cocos2d::CCNode*)
  create(LevelSettingsObject*, LevelEditorLayer*)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint)
  customSongLayerClosed()
  init(LevelSettingsObject*, LevelEditorLayer*)
  keyBackClicked()
  on3DLine(cocos2d::CCObject*)
  onBG(cocos2d::CCObject*)
  onBGArt(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  onCol(cocos2d::CCObject*)
  onDualMode(cocos2d::CCObject*)
  onG(cocos2d::CCObject*)
  onG2(cocos2d::CCObject*)
  onGArt(cocos2d::CCObject*)
  onGravityFlipped(cocos2d::CCObject*)
  onLine(cocos2d::CCObject*)
  onLiveEdit(cocos2d::CCObject*)
  onMiniMode(cocos2d::CCObject*)
  onObj(cocos2d::CCObject*)
  onOpenCustomSong(cocos2d::CCObject*)
  onSelectFont(cocos2d::CCObject*)
  onSelectMode(cocos2d::CCObject*)
  onSelectSpeed(cocos2d::CCObject*)
  onSongMode(cocos2d::CCObject*)
  onTwoPlayerMode(cocos2d::CCObject*)
  onTwoPlayerModeInfo(cocos2d::CCObject*)
  registerWithTouchDispatcher()
  selectArtClosed(SelectArtLayer*)
  selectSong(int)
  showCustomSongSelect()
  showPicker(int, ColorAction*)
  updateAudioLabel()
  updateColorSprite(ColorChannelSprite*)
  updateColorSprites()
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual colorSelectClosed(cocos2d::CCNode *)
  virtual customSongLayerClosed(void)
  virtual keyBackClicked(void)
  virtual registerWithTouchDispatcher(void)
  virtual selectArtClosed(SelectArtLayer *)
}
class LevelSettingsObject : cocos2d::CCNode {
  create()
  getSaveString()
  init()
  objectFromDict(cocos2d::CCDictionary*)
  objectFromString(std::string)
  offsetMusic()
  setupColorsFromLegacyMode(cocos2d::CCDictionary*)
  virtual init(void)
}
class LevelUpdateDelegate {
  levelUpdateFailed(int)
  levelUpdateFinished(GJGameLevel*, UpdateResponse)
  virtual levelUpdateFailed(int)
  virtual levelUpdateFinished(GJGameLevel *,UpdateResponse)
}
class LevelUploadDelegate {
  levelUploadFailed(GJGameLevel*)
  levelUploadFinished(GJGameLevel*)
  virtual levelUploadFailed(GJGameLevel *)
  virtual levelUploadFinished(GJGameLevel *)
}
class LikeItemDelegate {
  likedItem(LikeItemType, int, bool)
  virtual likedItem(LikeItemType,int,bool)
}
class LikeItemLayer : FLAlertLayer {
  create(LikeItemType, int, int)
  init(LikeItemType, int, int)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onDislike(cocos2d::CCObject*)
  onLike(cocos2d::CCObject*)
  triggerLike(bool)
  virtual keyBackClicked(void)
}
class ListButtonBar : cocos2d::CCNode {
  create(cocos2d::CCArray*, cocos2d::CCPoint, int, int, float, float, float, float, int)
  getPage()
  goToPage(int)
  init(cocos2d::CCArray*, cocos2d::CCPoint, int, int, float, float, float, float, int)
  onLeft(cocos2d::CCObject*)
  onRight(cocos2d::CCObject*)
}
class ListButtonBarDelegate {
  listButtonBarSwitchedPage(ListButtonBar*, int)
  virtual listButtonBarSwitchedPage(ListButtonBar *,int)
}
class ListButtonPage : cocos2d::CCLayer {
  create(cocos2d::CCArray*, cocos2d::CCPoint, int, int, float, float, float)
  init(cocos2d::CCArray*, cocos2d::CCPoint, int, int, float, float, float)
}
class ListCell : TableViewCell {
  draw()
  init()
  loadFromObject(cocos2d::CCObject*, int, int, int)
  updateBGColor(int)
  virtual draw(void)
  virtual init(void)
}
class LoadingCircle : cocos2d::CCLayerColor {
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create()
  draw()
  fadeAndRemove()
  init()
  registerWithTouchDispatcher()
  show()
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual draw(void)
  virtual init(void)
  virtual registerWithTouchDispatcher(void)
}
class LoadingLayer : cocos2d::CCLayer {
  create(bool)
  getLoadingString()
  init(bool)
  loadAssets()
  loadingFinished()
  scene(bool)
  updateProgress(int)
}
class LocalLevelManager : GManager {
  dataLoaded(DS_Dictionary*)
  encodeDataTo(DS_Dictionary*)
  firstLoad()
  getAllLevelsInDict()
  getAllLevelsWithName(std::string)
  getCreatedLevels(int)
  getLevelsInNameGroups()
  getLoadString(int)
  getMainLevelString(int)
  init()
  markLevelsAsUnmodified()
  moveLevelToTop(GJGameLevel*)
  reorderLevels()
  setLocalLevels(cocos2d::CCArray*)
  sharedState()
  updateLevelOrder()
  updateLevelRevision()
  virtual dataLoaded(DS_Dictionary *)
  virtual encodeDataTo(DS_Dictionary *)
  virtual firstLoad(void)
  virtual init(void)
}
class MapPackCell : TableViewCell {
  draw()
  init()
  loadFromMapPack(GJMapPack*)
  onClaimReward(cocos2d::CCObject*)
  onClick(cocos2d::CCObject*)
  playCompleteEffect()
  reloadCell()
  updateBGColor(int)
  virtual draw(void)
  virtual init(void)
}
class MenuGameLayer : cocos2d::CCLayer {
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create()
  destroyPlayer()
  getBGColor(int)
  init()
  registerWithTouchDispatcher()
  resetPlayer()
  tryJump(float)
  update(float)
  updateColor(float)
  updateColors()
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual init(void)
  virtual registerWithTouchDispatcher(void)
  virtual update(float)
}
class MenuLayer : cocos2d::CCLayer, FLAlertLayerProtocol, GooglePlayDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  endGame()
  googlePlaySignedIn()
  init()
  keyBackClicked()
  keyDown(cocos2d::enumKeyCodes)
  node()
  onAchievements(cocos2d::CCObject*)
  onCreator(cocos2d::CCObject*)
  onDaily(cocos2d::CCObject*)
  onEveryplay(cocos2d::CCObject*)
  onFacebook(cocos2d::CCObject*)
  onFreeLevels(cocos2d::CCObject*)
  onFullVersion(cocos2d::CCObject*)
  onGameCenter(cocos2d::CCObject*)
  onGarage(cocos2d::CCObject*)
  onGooglePlayGames(cocos2d::CCObject*)
  onMoreGames(cocos2d::CCObject*)
  onMyProfile(cocos2d::CCObject*)
  onNewgrounds(cocos2d::CCObject*)
  onOptions(cocos2d::CCObject*)
  onOptionsInstant()
  onPlay(cocos2d::CCObject*)
  onQuit(cocos2d::CCObject*)
  onRobTop(cocos2d::CCObject*)
  onStats(cocos2d::CCObject*)
  onTrailer(cocos2d::CCObject*)
  onTwitter(cocos2d::CCObject*)
  onYouTube(cocos2d::CCObject*)
  openOptions(bool)
  scene(bool)
  showGCQuestion()
  showMeltdownPromo()
  syncPlatformAchievements(float)
  tryShowAd(float)
  updateUserProfileButton()
  willClose()
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual googlePlaySignedIn(void)
  virtual init(void)
  virtual keyBackClicked(void)
  virtual keyDown(cocos2d::enumKeyCodes)
}
class MessageListDelegate {
  forceReloadMessages(bool)
  loadMessagesFailed(char const*, GJErrorCode)
  loadMessagesFinished(cocos2d::CCArray*, char const*)
  setupPageInfo(std::string, char const*)
  virtual forceReloadMessages(bool)
  virtual loadMessagesFailed(char const*,GJErrorCode)
  virtual loadMessagesFinished(cocos2d::CCArray *,char const*)
  virtual setupPageInfo(std::string,char const*)
}
class MessagesProfilePage : FLAlertLayer, FLAlertLayerProtocol, UploadActionDelegate, UploadPopupDelegate, MessageListDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  create(bool)
  deleteSelected()
  forceReloadMessages(bool)
  init(bool)
  isCorrect(char const*)
  keyBackClicked()
  loadMessagesFailed(char const*, GJErrorCode)
  loadMessagesFinished(cocos2d::CCArray*, char const*)
  loadPage(int)
  onClose(cocos2d::CCObject*)
  onClosePopup(UploadActionPopup*)
  onDeleteSelected(cocos2d::CCObject*)
  onNextPage(cocos2d::CCObject*)
  onPrevPage(cocos2d::CCObject*)
  onSentMessages(cocos2d::CCObject*)
  onToggleAllObjects(cocos2d::CCObject*)
  onUpdate(cocos2d::CCObject*)
  registerWithTouchDispatcher()
  setupCommentsBrowser(cocos2d::CCArray*)
  setupPageInfo(std::string, char const*)
  untoggleAll()
  updateLevelsLabel()
  updatePageArrows()
  uploadActionFailed(int, int)
  uploadActionFinished(int, int)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual forceReloadMessages(bool)
  virtual keyBackClicked(void)
  virtual loadMessagesFailed(char const*,GJErrorCode)
  virtual loadMessagesFinished(cocos2d::CCArray *,char const*)
  virtual onClosePopup(UploadActionPopup *)
  virtual registerWithTouchDispatcher(void)
  virtual setupPageInfo(std::string,char const*)
  virtual uploadActionFailed(int,int)
  virtual uploadActionFinished(int,int)
}
class MoreOptionsLayer : FLAlertLayer, TextInputDelegate, GooglePlayDelegate {
  addToggle(char const*, char const*, char const*)
  countForPage(int)
  create()
  goToPage(int)
  googlePlaySignedIn()
  incrementCountForPage(int)
  infoKey(int)
  init()
  keyBackClicked()
  layerForPage(int)
  layerKey(int)
  nextPosition(int)
  objectKey(int)
  objectsForPage(int)
  onClose(cocos2d::CCObject*)
  onGPSignIn(cocos2d::CCObject*)
  onGPSignOut(cocos2d::CCObject*)
  onInfo(cocos2d::CCObject*)
  onKeybindings(cocos2d::CCObject*)
  onNextPage(cocos2d::CCObject*)
  onParental(cocos2d::CCObject*)
  onPrevPage(cocos2d::CCObject*)
  onSongBrowser(cocos2d::CCObject*)
  onToggle(cocos2d::CCObject*)
  pageKey(int)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  toggleGP()
  virtual googlePlaySignedIn(void)
  virtual init(void)
  virtual keyBackClicked(void)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class MoreSearchLayer : FLAlertLayer, TextInputDelegate {
  audioNext(cocos2d::CCObject*)
  audioPrevious(cocos2d::CCObject*)
  create()
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint)
  init()
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onCoins(cocos2d::CCObject*)
  onCompleted(cocos2d::CCObject*)
  onEpic(cocos2d::CCObject*)
  onFeatured(cocos2d::CCObject*)
  onFollowed(cocos2d::CCObject*)
  onFriends(cocos2d::CCObject*)
  onInfo(cocos2d::CCObject*)
  onNoStar(cocos2d::CCObject*)
  onOriginal(cocos2d::CCObject*)
  onSongFilter(cocos2d::CCObject*)
  onSongMode(cocos2d::CCObject*)
  onTwoPlayer(cocos2d::CCObject*)
  onUncompleted(cocos2d::CCObject*)
  selectSong(int)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  toggleSongNodes(bool, bool)
  updateAudioLabel()
  virtual init(void)
  virtual keyBackClicked(void)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class MoreVideoOptionsLayer : FLAlertLayer {
  addToggle(char const*, char const*, char const*)
  countForPage(int)
  create()
  goToPage(int)
  incrementCountForPage(int)
  infoKey(int)
  init()
  keyBackClicked()
  layerForPage(int)
  layerKey(int)
  nextPosition(int)
  objectKey(int)
  objectsForPage(int)
  onClose(cocos2d::CCObject*)
  onInfo(cocos2d::CCObject*)
  onNextPage(cocos2d::CCObject*)
  onPrevPage(cocos2d::CCObject*)
  onToggle(cocos2d::CCObject*)
  pageKey(int)
  virtual init(void)
  virtual keyBackClicked(void)
}
class MultilineBitmapFont : cocos2d::CCSprite {
  createWithFont(char const*, std::string, float, float, cocos2d::CCPoint, int, bool)
  initWithFont(char const*, std::string, float, float, cocos2d::CCPoint, int, bool)
  moveSpecialDescriptors(int, int)
  readColorInfo(std::string)
  setOpacity(unsigned char)
  stringWithMaxWidth(std::string, float, float)
  virtual setOpacity(uchar)
}
class MusicDelegateHandler : cocos2d::CCNode {
  create(MusicDownloadDelegate*)
  init(MusicDownloadDelegate*)
}
class MusicDownloadDelegate {
  downloadSongFailed(int, GJSongError)
  downloadSongFinished(SongInfoObject*)
  loadSongInfoFailed(int, GJSongError)
  loadSongInfoFinished(SongInfoObject*)
  songStateChanged()
  virtual downloadSongFailed(int,GJSongError)
  virtual downloadSongFinished(SongInfoObject *)
  virtual loadSongInfoFailed(int,GJSongError)
  virtual loadSongInfoFinished(SongInfoObject *)
  virtual songStateChanged(void)
}
class MusicDownloadManager : cocos2d::CCNode, PlatformDownloadDelegate {
  ProcessHttpRequest(std::string, std::string, std::string, GJHttpType)
  addDLToActive(char const*)
  addDLToActive(char const*, cocos2d::CCObject*)
  addMusicDownloadDelegate(MusicDownloadDelegate*)
  addSongObjectFromString(std::string)
  clearSong(int)
  clearUnusedSongs()
  createSongsInfo(std::string)
  dataLoaded(DS_Dictionary*)
  deleteSong(int)
  downloadSong(int)
  downloadSongFailed(int, GJSongError)
  downloadSongFinished(SongInfoObject*)
  encodeDataTo(DS_Dictionary*)
  firstSetup()
  getAllSongs()
  getDLObject(char const*)
  getDownloadProgress(int)
  getDownloadedSongs()
  getSongDownloadKey(int)
  getSongInfo(int, bool)
  getSongInfoKey(int)
  getSongInfoObject(int)
  getSongPriority()
  handleIt(bool, std::string, std::string, GJHttpType)
  handleItDelayed(bool, std::string, std::string, GJHttpType)
  handleItND(cocos2d::CCNode*, void*)
  incrementPriorityForSong(int)
  init()
  isDLActive(char const*)
  isRunningActionForSongID(int)
  isSongDownloaded(int)
  limitDownloadedSongs()
  loadSongInfoFailed(int, GJSongError)
  loadSongInfoFinished(SongInfoObject*)
  onDownloadSongCompleted(cocos2d::extension::CCHttpClient*, cocos2d::extension::CCHttpResponse*)
  onGetSongInfoCompleted(std::string, std::string)
  onProcessHttpRequestCompleted(cocos2d::extension::CCHttpClient*, cocos2d::extension::CCHttpResponse*)
  pathForSong(int)
  removeDLFromActive(char const*)
  removeMusicDownloadDelegate(MusicDownloadDelegate*)
  responseToDict(std::string, char const*)
  setDownloadedSongsDict(cocos2d::CCDictionary*)
  sharedState()
  showTOS(FLAlertLayerProtocol*)
  songStateChanged()
  stopDownload(int)
  virtual init(void)
}
class MyLevelsLayer : cocos2d::CCLayer {
  create()
  init()
  keyBackClicked()
  onBack(cocos2d::CCObject*)
  onNew(cocos2d::CCObject*)
  scene()
  setupLevelBrowser()
  virtual init(void)
  virtual keyBackClicked(void)
}
class NodePoint : cocos2d::CCObject {
  create(cocos2d::CCPoint)
  init(cocos2d::CCPoint)
}
class NumberInputDelegate {
  numberInputClosed(NumberInputLayer*)
  virtual numberInputClosed(NumberInputLayer *)
}
class NumberInputLayer : FLAlertLayer {
  create()
  deleteLast()
  init()
  inputNumber(int)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onDone(cocos2d::CCObject*)
  onNumber(cocos2d::CCObject*)
  registerWithTouchDispatcher()
  updateNumberState()
  virtual init(void)
  virtual keyBackClicked(void)
  virtual registerWithTouchDispatcher(void)
}
class OBB2D : cocos2d::CCNode {
  calculateWithCenter(cocos2d::CCPoint, float, float, float)
  computeAxes()
  create(cocos2d::CCPoint, float, float, float)
  getBoundingRect()
  init(cocos2d::CCPoint, float, float, float)
  orderCorners()
  overlaps(OBB2D*)
  overlaps1Way(OBB2D*)
}
class ObjectDecoder : cocos2d::CCNode {
  getDecodedObject(int, DS_Dictionary*)
  init()
  sharedDecoder()
  virtual init(void)
}
class ObjectDecoderDelegate {
  getDecodedObject(int, DS_Dictionary*)
  virtual getDecodedObject(int,DS_Dictionary *)
}
class ObjectManager : cocos2d::CCNode {
  animLoaded(char const*)
  getDefinition(char const*)
  getGlobalAnimCopy(char const*)
  init()
  instance()
  loadCopiedAnimations()
  loadCopiedSets()
  purgeObjectManager()
  replaceAllOccurencesOfString(cocos2d::CCString*, cocos2d::CCString*, cocos2d::CCDictionary*)
  setLoaded(char const*)
  setup()
  virtual init(void)
}
class ObjectToolbox : cocos2d::CCNode {
  allKeys()
  frameToKey(char const*)
  gridNodeSizeForKey(int)
  init()
  intKeyToFrame(int)
  keyToFrame(char const*)
  perspectiveBlockFrame(int)
  sharedState()
  virtual init(void)
}
class OnlineListDelegate {
  loadListFailed(char const*)
  loadListFinished(cocos2d::CCArray*, char const*)
  setupPageInfo(std::string, char const*)
  virtual loadListFailed(char const*)
  virtual loadListFinished(cocos2d::CCArray *,char const*)
  virtual setupPageInfo(std::string,char const*)
}
class OpacityEffectAction : cocos2d::CCNode {
  create(float, float, float, int)
  createFromString(std::string)
  getSaveString()
  init(float, float, float, int)
  step(float)
}
class OptionsLayer : GJDropDownLayer, FLAlertLayerProtocol {
  FLAlert_Clicked(FLAlertLayer*, bool)
  create()
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint)
  customSetup()
  exitLayer()
  layerHidden()
  musicSliderChanged(cocos2d::CCObject*)
  onAccount(cocos2d::CCObject*)
  onHelp(cocos2d::CCObject*)
  onOptions(cocos2d::CCObject*)
  onProgressBar(cocos2d::CCObject*)
  onRate(cocos2d::CCObject*)
  onRecordReplays(cocos2d::CCObject*)
  onSecretVault(cocos2d::CCObject*)
  onSoundtracks(cocos2d::CCObject*)
  onSupport(cocos2d::CCObject*)
  onVideo(cocos2d::CCObject*)
  sfxSliderChanged(cocos2d::CCObject*)
  tryEnableRecord()
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual customSetup(void)
  virtual layerHidden(void)
}
class ParentalOptionsLayer : FLAlertLayer {
  addToggle(char const*, char const*, char const*)
  countForPage(int)
  create()
  goToPage(int)
  incrementCountForPage(int)
  infoKey(int)
  init()
  keyBackClicked()
  layerForPage(int)
  layerKey(int)
  nextPosition(int)
  objectKey(int)
  objectsForPage(int)
  onClose(cocos2d::CCObject*)
  onInfo(cocos2d::CCObject*)
  onNextPage(cocos2d::CCObject*)
  onPrevPage(cocos2d::CCObject*)
  onToggle(cocos2d::CCObject*)
  pageKey(int)
  virtual init(void)
  virtual keyBackClicked(void)
}
class PauseLayer : CCBlockLayer {
  create(bool)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint)
  customSetup()
  goEdit()
  init(bool)
  keyBackClicked()
  keyDown(cocos2d::enumKeyCodes)
  keyUp(cocos2d::enumKeyCodes)
  musicSliderChanged(cocos2d::CCObject*)
  onAutoCheckpoints(cocos2d::CCObject*)
  onAutoRetry(cocos2d::CCObject*)
  onEdit(cocos2d::CCObject*)
  onHelp(cocos2d::CCObject*)
  onNormalMode(cocos2d::CCObject*)
  onPracticeMode(cocos2d::CCObject*)
  onProgressBar(cocos2d::CCObject*)
  onQuit(cocos2d::CCObject*)
  onRecordReplays(cocos2d::CCObject*)
  onRestart(cocos2d::CCObject*)
  onResume(cocos2d::CCObject*)
  onTime(cocos2d::CCObject*)
  setupProgressBars()
  sfxSliderChanged(cocos2d::CCObject*)
  tryShowBanner(float)
  virtual customSetup(void)
  virtual keyBackClicked(void)
  virtual keyDown(cocos2d::enumKeyCodes)
  virtual keyUp(cocos2d::enumKeyCodes)
}
class PlatformDownloadDelegate {
  downloadFailed(char const*)
  downloadFinished(char const*)
  virtual downloadFailed(char const*)
  virtual downloadFinished(char const*)
}
class PlayerCheckpoint : cocos2d::CCNode {
  create()
  init()
  virtual init(void)
}
class PlayerObject : GameObject {
  activateStreak()
  addAllParticles()
  addToTouchedRings(GameObject*)
  animationFinished(char const*)
  boostPlayer(float)
  bumpPlayer(float, int)
  buttonDown(PlayerButton)
  checkSnapJumpToObject(GameObject*)
  collidedWithObject(float, GameObject*)
  collidedWithObject(float, GameObject*, cocos2d::CCRect)
  collidedWithSlope(float, GameObject*, bool)
  convertToClosestRotation(float)
  copyAttributes(PlayerObject*)
  create(int, int, cocos2d::CCLayer*)
  deactivateParticle()
  deactivateStreak(bool)
  fadeOutStreak2(float)
  flashPlayer(float, float, cocos2d::_ccColor3B, cocos2d::_ccColor3B)
  flipGravity(bool, bool)
  flipMod()
  getActiveMode()
  getModifiedSlopeYVel()
  getOldPosition(float)
  getOrientedBox()
  getRealPosition()
  getSecondColor()
  gravityDown()
  gravityUp()
  hardFlipGravity()
  hitGround(bool)
  incrementJumps()
  init(int, int, cocos2d::CCLayer*)
  isBoostValid(float)
  isFlying()
  isSafeFlip(float)
  isSafeMode(float)
  isSafeSpiderFlip(float)
  levelFlipFinished()
  levelFlipping()
  levelWillFlip()
  loadFromCheckpoint(PlayerCheckpoint*)
  lockPlayer()
  logValues()
  modeDidChange()
  placeStreakPoint()
  playBurstEffect()
  playDeathEffect()
  playDynamicSpiderRun()
  playerDestroyed(bool)
  playerIsFalling()
  playerTeleported()
  playingEndEffect()
  postCollision(float)
  preCollision()
  preSlopeCollision(float, GameObject*)
  propellPlayer(float)
  pushButton(PlayerButton)
  pushDown()
  pushPlayer(float)
  releaseButton(PlayerButton)
  removeAllParticles()
  removePendingCheckpoint()
  resetAllParticles()
  resetCollisionLog()
  resetObject()
  resetPlayerIcon()
  resetStateVariables()
  resetStreak()
  resetTouchedRings()
  ringJump(GameObject*)
  runBallRotation(float)
  runBallRotation2()
  runNormalRotation()
  runRotateAction(bool)
  saveToCheckpoint(PlayerCheckpoint*)
  setColor(cocos2d::_ccColor3B const&)
  setFlipX(bool)
  setFlipY(bool)
  setOpacity(unsigned char)
  setPortalP(cocos2d::CCPoint)
  setPosition(cocos2d::CCPoint const&)
  setRotation(float)
  setScale(float)
  setScaleX(float)
  setScaleY(float)
  setSecondColor(cocos2d::_ccColor3B const&)
  setVisible(bool)
  setupStreak()
  spawnCircle()
  spawnCircle2()
  spawnDualCircle()
  spawnFromPlayer(PlayerObject*)
  spawnPortalCircle(cocos2d::_ccColor3B, float)
  spawnScaleCircle()
  specialGroundHit()
  speedDown()
  speedUp()
  spiderTestJump(bool)
  startDashing(GameObject*)
  stopBurstEffect()
  stopDashing()
  stopRotation(bool)
  storeCollision(bool, int)
  switchedToMode(GameObjectType)
  testForMoving(float, GameObject*)
  toggleBirdMode(bool)
  toggleDartMode(bool)
  toggleFlyMode(bool)
  toggleGhostEffect(GhostType)
  togglePlayerScale(bool)
  toggleRobotMode(bool)
  toggleRollMode(bool)
  toggleSpiderMode(bool)
  toggleVisibility(bool)
  touchedObject(GameObject*)
  tryPlaceCheckpoint()
  update(float)
  updateCheckpointMode(bool)
  updateCheckpointTest()
  updateCollide(bool, int)
  updateCollideBottom(float, int)
  updateCollideTop(float, int)
  updateDashAnimation()
  updateDashArt()
  updateGlowColor()
  updateJump(float)
  updateJumpVariables()
  updatePlayerBirdFrame(int)
  updatePlayerDartFrame(int)
  updatePlayerFrame(int)
  updatePlayerGlow()
  updatePlayerRobotFrame(int)
  updatePlayerRollFrame(int)
  updatePlayerScale()
  updatePlayerShipFrame(int)
  updatePlayerSpiderFrame(int)
  updatePlayerSpriteExtra(std::string)
  updateRobotAnimationSpeed()
  updateRotation(float)
  updateRotation(float, float)
  updateShipRotation(float)
  updateShipSpriteExtra(std::string)
  updateSlopeRotation(float)
  updateSlopeYVelocity(float)
  updateSpecial(float)
  updateStateVariables()
  updateTimeMod(float)
  usingWallLimitedMode()
  yStartDown()
  yStartUp()
  virtual animationFinished(char const*)
  virtual getOrientedBox(void)
  virtual getRealPosition(void)
  virtual resetObject(void)
  virtual setColor(cocos2d::_ccColor3B const&)
  virtual setFlipX(bool)
  virtual setFlipY(bool)
  virtual setOpacity(uchar)
  virtual setPosition(cocos2d::CCPoint const&)
  virtual setRotation(float)
  virtual setScale(float)
  virtual setScaleX(float)
  virtual setScaleY(float)
  virtual setVisible(bool)
  virtual update(float)
}
class PlayLayer : GJBaseGameLayer, CCCircleWaveDelegate, CurrencyRewardDelegate, DialogDelegate {
  addCircle(CCCircleWave*)
  addObject(GameObject*)
  addToGroupOld(GameObject*)
  addToSpeedObjects(GameObject*)
  animateInDualGround(GameObject*, float, bool)
  animateInGround(bool)
  animateOutGround(bool)
  animateOutGroundFinished()
  applyEnterEffect(GameObject*)
  calculateColorValues(EffectGameObject*, EffectGameObject*, int, float, ColorActionSprite*, GJEffectManager*)
  cameraMoveX(float, float, float)
  cameraMoveY(float, float, float)
  checkCollisions(PlayerObject*, float)
  circleWaveWillBeRemoved(CCCircleWave*)
  claimParticle(std::string)
  clearPickedUpItems()
  colorObject(int, cocos2d::_ccColor3B)
  commitJumps()
  create(GJGameLevel*)
  createCheckpoint()
  createObjectsFromSetup(std::string)
  createParticle(int, char const*, int, cocos2d::tCCPositionType)
  currencyWillExit(CurrencyRewardLayer*)
  delayedResetLevel()
  destroyPlayer(PlayerObject*, GameObject*)
  dialogClosed(DialogLayer*)
  draw()
  enterDualMode(GameObject*, bool)
  exitAirMode()
  exitBirdMode(PlayerObject*)
  exitDartMode(PlayerObject*)
  exitFlyMode(PlayerObject*)
  exitRobotMode(PlayerObject*)
  exitRollMode(PlayerObject*)
  exitSpiderMode(PlayerObject*)
  flipFinished()
  flipGravity(PlayerObject*, bool, bool)
  flipObjects()
  fullReset()
  getLastCheckpoint()
  getMaxPortalY()
  getMinPortalY()
  getObjectsState()
  getOtherPlayer(PlayerObject*)
  getParticleKey(int, char const*, int, cocos2d::tCCPositionType)
  getParticleKey2(std::string)
  getRelativeMod(cocos2d::CCPoint, float, float, float)
  getTempMilliTime()
  gravityEffectFinished()
  hasItem(int)
  hasUniqueCoin(GameObject*)
  incrementJumps()
  init(GJGameLevel*)
  isFlipping()
  levelComplete()
  lightningFlash(cocos2d::CCPoint, cocos2d::_ccColor3B)
  lightningFlash(cocos2d::CCPoint, cocos2d::CCPoint, cocos2d::_ccColor3B, float, float, int, bool, float)
  loadDefaultColors()
  loadFromCheckpoint(CheckpointObject*)
  loadLastCheckpoint()
  loadSavedObjectsState(std::string)
  markCheckpoint()
  moveCameraToPos(cocos2d::CCPoint)
  onEnterTransitionDidFinish()
  onExit()
  onQuit()
  optimizeColorGroups()
  optimizeOpacityGroups()
  optimizeSaveRequiredGroups()
  pauseGame(bool)
  pickupItem(GameObject*)
  playAnimationCommand(int, int)
  playEndAnimationToPos(cocos2d::CCPoint)
  playExitDualEffect(PlayerObject*)
  playFlashEffect(float, int, float)
  playGravityEffect(bool)
  playSpeedParticle(float)
  playerWillSwitchMode(PlayerObject*, GameObject*)
  prepareSpawnObjects()
  processItems()
  processLoadedMoveActions()
  recordAction(bool, PlayerObject*)
  registerActiveObject(GameObject*)
  registerStateObject(GameObject*)
  removeAllObjects()
  removeFromGroupOld(GameObject*)
  removeLastCheckpoint()
  removePlayer2()
  resetLevel()
  resume()
  resumeAndRestart()
  saveRecordAction(bool, PlayerObject*)
  scene(GJGameLevel*)
  setStartPosObject(StartPosObject*)
  setupLevelStart(LevelSettingsObject*)
  setupReplay(std::string)
  shakeCamera(float, float, float)
  shouldBlend(int)
  showCompleteEffect()
  showCompleteText()
  showEndLayer()
  showHint()
  showNewBest(bool, int, int, bool, bool, bool)
  showRetryLayer()
  showTwoPlayerGuide()
  sortGroups()
  spawnCircle()
  spawnFirework()
  spawnParticle(char const*, int, cocos2d::tCCPositionType, cocos2d::CCPoint)
  spawnPlayer2()
  startGame()
  startMusic()
  startRecording()
  startRecordingDelayed()
  stopCameraShake()
  stopRecording()
  storeCheckpoint(CheckpointObject*)
  switchToFlyMode(PlayerObject*, GameObject*, bool, int)
  switchToRobotMode(PlayerObject*, GameObject*, bool)
  switchToRollMode(PlayerObject*, GameObject*, bool)
  switchToSpiderMode(PlayerObject*, GameObject*, bool)
  timeForXPos(float)
  timeForXPos2(float, bool)
  toggleBGEffectVisibility(bool)
  toggleDualMode(GameObject*, bool, PlayerObject*, bool)
  toggleFlipped(bool, bool)
  toggleGhostEffect(int)
  toggleGlitter(bool)
  togglePracticeMode(bool)
  toggleProgressbar()
  tryStartRecord()
  unclaimParticle(char const*, cocos2d::CCParticleSystemQuad*)
  unregisterActiveObject(GameObject*)
  unregisterStateObject(GameObject*)
  update(float)
  updateAttempts()
  updateCamera(float)
  updateColor(cocos2d::_ccColor3B, float, int, bool, float, cocos2d::_ccHSVValue, int, bool, int, EffectGameObject*)
  updateDualGround(PlayerObject*, int, bool)
  updateEffectPositions()
  updateLevelColors()
  updateMoveObjectsLastPosition()
  updateProgressbar()
  updateReplay(float)
  updateTimeMod(float, bool)
  updateTweenAction(float, char const*)
  updateVisibility()
  vfDChk()
  visit()
  visitWithColorFlash()
  willSwitchToMode(int, PlayerObject*)
  xPosForTime(float)
  virtual calculateColorValues(EffectGameObject *,EffectGameObject *,int,float,ColorActionSprite *,GJEffectManager *)
  virtual circleWaveWillBeRemoved(CCCircleWave *)
  virtual currencyWillExit(CurrencyRewardLayer *)
  virtual dialogClosed(DialogLayer *)
  virtual draw(void)
  virtual flipGravity(PlayerObject *,bool,bool)
  virtual onEnterTransitionDidFinish(void)
  virtual onExit(void)
  virtual timeForXPos(float)
  virtual update(float)
  virtual updateColor(cocos2d::_ccColor3B,float,int,bool,float,cocos2d::_ccHSVValue,int,bool,int,EffectGameObject *)
  virtual updateTweenAction(float,char const*)
  virtual visit(void)
  virtual xPosForTime(float)
}
class PointNode : cocos2d::CCObject {
  create(cocos2d::CCPoint)
  init(cocos2d::CCPoint)
}
class PriceLabel : cocos2d::CCNode {
  create(int)
  init(int)
  setColor(cocos2d::_ccColor3B)
  setOpacity(float)
  setPrice(int)
}
class ProfilePage : FLAlertLayer, FLAlertLayerProtocol, LevelCommentDelegate, CommentUploadDelegate, UserInfoDelegate, UploadActionDelegate, UploadPopupDelegate, LeaderboardManagerDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  blockUser()
  commentDeleteFailed(int, int)
  commentUploadFailed(int, CommentError)
  commentUploadFinished(int)
  create(int, bool)
  getUserInfoFailed(int)
  getUserInfoFinished(GJUserScore*)
  init(int, bool)
  isCorrect(char const*)
  keyBackClicked()
  loadCommentsFailed(char const*)
  loadCommentsFinished(cocos2d::CCArray*, char const*)
  loadPage(int)
  loadPageFromUserInfo(GJUserScore*)
  onBlockUser(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  onClosePopup(UploadActionPopup*)
  onComment(cocos2d::CCObject*)
  onCommentHistory(cocos2d::CCObject*)
  onFollow(cocos2d::CCObject*)
  onFriend(cocos2d::CCObject*)
  onFriends(cocos2d::CCObject*)
  onMessages(cocos2d::CCObject*)
  onMyLevels(cocos2d::CCObject*)
  onNextPage(cocos2d::CCObject*)
  onPrevPage(cocos2d::CCObject*)
  onRequests(cocos2d::CCObject*)
  onSendMessage(cocos2d::CCObject*)
  onSettings(cocos2d::CCObject*)
  onTwitch(cocos2d::CCObject*)
  onTwitter(cocos2d::CCObject*)
  onUpdate(cocos2d::CCObject*)
  onYouTube(cocos2d::CCObject*)
  registerWithTouchDispatcher()
  setupComments()
  setupCommentsBrowser(cocos2d::CCArray*)
  setupPageInfo(std::string, char const*)
  show()
  showNoAccountError()
  toggleMainPageVisibility(bool)
  updateLevelsLabel()
  updatePageArrows()
  updateUserScoreFailed()
  updateUserScoreFinished()
  uploadActionFailed(int, int)
  uploadActionFinished(int, int)
  userInfoChanged(GJUserScore*)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual commentDeleteFailed(int,int)
  virtual commentUploadFailed(int,CommentError)
  virtual commentUploadFinished(int)
  virtual getUserInfoFailed(int)
  virtual getUserInfoFinished(GJUserScore *)
  virtual keyBackClicked(void)
  virtual loadCommentsFailed(char const*)
  virtual loadCommentsFinished(cocos2d::CCArray *,char const*)
  virtual onClosePopup(UploadActionPopup *)
  virtual registerWithTouchDispatcher(void)
  virtual setupPageInfo(std::string,char const*)
  virtual show(void)
  virtual updateUserScoreFailed(void)
  virtual updateUserScoreFinished(void)
  virtual uploadActionFailed(int,int)
  virtual uploadActionFinished(int,int)
  virtual userInfoChanged(GJUserScore *)
}
class PromoInterstitial : FLAlertLayer {
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create(bool)
  init(bool)
  keyBackClicked()
  onClick(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  setup()
  show()
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual keyBackClicked(void)
  virtual show(void)
}
class pugi::xml_tree_walker {
  begin(pugi::xml_node&)
  depth()
  end(pugi::xml_node&)
  xml_tree_walker()
  virtual begin(pugi::xml_node &)
  virtual end(pugi::xml_node &)
}
class pugi::xml_writer {
}
class pugi::xml_writer_file : pugi::xml_writer {
  write(void const*, unsigned int)
  xml_writer_file(void*)
  virtual write(void const*,uint)
}
class pugi::xml_writer_stream : pugi::xml_writer {
  write(void const*, unsigned int)
  xml_writer_stream(std::basic_ostream<char, std::char_traits<char> >&)
  xml_writer_stream(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&)
  virtual write(void const*,uint)
}
class PulseEffectAction : cocos2d::CCNode {
  create(float, float, float, PulseEffectType, int, cocos2d::_ccColor3B, cocos2d::_ccHSVValue, int, bool, bool)
  createFromString(std::string)
  getSaveString()
  init(float, float, float, PulseEffectType, int, cocos2d::_ccColor3B, cocos2d::_ccHSVValue, int, bool, bool)
  isFinished()
  step(float)
  valueForDelta(float, float, float, float)
}
class PurchaseItemPopup : FLAlertLayer {
  create(GJStoreItem*)
  init(GJStoreItem*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onPurchase(cocos2d::CCObject*)
  virtual keyBackClicked(void)
}
class RateDemonLayer : FLAlertLayer, UploadPopupDelegate, UploadActionDelegate {
  create(int)
  init(int)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onClosePopup(UploadActionPopup*)
  onRate(cocos2d::CCObject*)
  selectRating(cocos2d::CCObject*)
  uploadActionFailed(int, int)
  uploadActionFinished(int, int)
  virtual keyBackClicked(void)
  virtual onClosePopup(UploadActionPopup *)
  virtual uploadActionFailed(int,int)
  virtual uploadActionFinished(int,int)
}
class RateLevelDelegate {
  rateLevelClosed()
  virtual rateLevelClosed(void)
}
class RateLevelLayer : FLAlertLayer {
  create(int)
  init(int)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onRate(cocos2d::CCObject*)
  selectRating(cocos2d::CCObject*)
  virtual keyBackClicked(void)
}
class RateStarsLayer : FLAlertLayer, UploadPopupDelegate, UploadActionDelegate {
  create(int, bool)
  getStarsButton(int, void (cocos2d::CCObject::*)(cocos2d::CCObject*), cocos2d::CCMenu*, float)
  init(int, bool)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onClosePopup(UploadActionPopup*)
  onRate(cocos2d::CCObject*)
  onToggleCoins(cocos2d::CCObject*)
  onToggleFeature(cocos2d::CCObject*)
  selectRating(cocos2d::CCObject*)
  uploadActionFailed(int, int)
  uploadActionFinished(int, int)
  virtual keyBackClicked(void)
  virtual onClosePopup(UploadActionPopup *)
  virtual uploadActionFailed(int,int)
  virtual uploadActionFinished(int,int)
}
class RetryLevelLayer : GJDropDownLayer {
  create()
  customSetup()
  enterAnimFinished()
  getEndText()
  keyBackClicked()
  keyDown(cocos2d::enumKeyCodes)
  keyUp(cocos2d::enumKeyCodes)
  onEveryplay(cocos2d::CCObject*)
  onMenu(cocos2d::CCObject*)
  onReplay(cocos2d::CCObject*)
  setupLastProgress()
  showLayer(bool)
  virtual customSetup(void)
  virtual enterAnimFinished(void)
  virtual keyBackClicked(void)
  virtual keyDown(cocos2d::enumKeyCodes)
  virtual keyUp(cocos2d::enumKeyCodes)
  virtual showLayer(bool)
}
class RewardsPage : FLAlertLayer, FLAlertLayerProtocol, GJRewardDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  create()
  getRewardFrame(int, int)
  init()
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onFreeStuff(cocos2d::CCObject*)
  onReward(cocos2d::CCObject*)
  registerWithTouchDispatcher()
  rewardsStatusFailed()
  rewardsStatusFinished(int)
  show()
  tryGetRewards()
  unlockLayerClosed(RewardUnlockLayer*)
  updateTimers(float)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual init(void)
  virtual keyBackClicked(void)
  virtual registerWithTouchDispatcher(void)
  virtual rewardsStatusFailed(void)
  virtual rewardsStatusFinished(int)
  virtual show(void)
}
class RewardUnlockLayer : FLAlertLayer, CurrencyRewardDelegate {
  connectionTimeout()
  create(int, RewardsPage*)
  currencyWillExit(CurrencyRewardLayer*)
  init(int, RewardsPage*)
  keyBackClicked()
  labelEnterFinishedO(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  playDropSound()
  playLabelEffect(int, int, cocos2d::CCSprite*, cocos2d::CCPoint, float)
  playRewardEffect()
  readyToCollect(GJRewardItem*)
  showCloseButton()
  showCollectReward(GJRewardItem*)
  step2()
  step3()
  virtual currencyWillExit(CurrencyRewardLayer *)
  virtual keyBackClicked(void)
}
class RingObject : EffectGameObject {
  create(char const*)
  customObjectSetup(std::map<std::string, std::string, std::less<std::string >, std::allocator<std::pair<std::string const, std::string > > >&)
  getSaveString()
  init(char const*)
  powerOffObject()
  powerOnObject()
  resetObject()
  setRScale(float)
  setRotation(float)
  setScale(float)
  spawnCircle()
  triggerActivated(float)
  virtual customObjectSetup(std::map<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string const,std::string>>> &)
  virtual getSaveString(void)
  virtual powerOffObject(void)
  virtual powerOnObject(void)
  virtual resetObject(void)
  virtual setRScale(float)
  virtual setRotation(float)
  virtual setScale(float)
  virtual triggerActivated(float)
}
class ScrollingLayer : cocos2d::CCLayerColor {
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create(cocos2d::CCSize, cocos2d::CCPoint, float)
  draw()
  getViewRect()
  init(cocos2d::CCSize, cocos2d::CCPoint, float)
  setStartOffset(cocos2d::CCPoint)
  visit()
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual draw(void)
  virtual visit(void)
}
class SearchButton : cocos2d::CCSprite {
  create(char const*, char const*, float, char const*)
  init(char const*, char const*, float, char const*)
}
class SecretLayer : cocos2d::CCLayer, TextInputDelegate, FLAlertLayerProtocol {
  FLAlert_Clicked(FLAlertLayer*, bool)
  create()
  getBasicMessage()
  getMessage()
  getThreadMessage()
  init()
  keyBackClicked()
  nodeWithTag(int)
  onBack(cocos2d::CCObject*)
  onSubmit(cocos2d::CCObject*)
  playCoinEffect()
  scene()
  selectAThread()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputOpened(CCTextInputNode*)
  updateMessageLabel(std::string)
  updateSearchLabel(char const*)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual init(void)
  virtual keyBackClicked(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputOpened(CCTextInputNode *)
}
class SecretLayer2 : cocos2d::CCLayer, TextInputDelegate, FLAlertLayerProtocol, DialogDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  create()
  dialogClosed(DialogLayer*)
  getBasicMessage()
  getErrorMessage()
  getMessage()
  getThreadMessage()
  init()
  keyBackClicked()
  nodeWithTag(int)
  onBack(cocos2d::CCObject*)
  onDoor(cocos2d::CCObject*)
  onExit()
  onSecretLevel(cocos2d::CCObject*)
  onSubmit(cocos2d::CCObject*)
  playCoinEffect()
  scene()
  selectAThread()
  showCompletedLevel()
  showSecretLevel()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputOpened(CCTextInputNode*)
  updateMessageLabel(std::string)
  updateSearchLabel(char const*)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual dialogClosed(DialogLayer *)
  virtual init(void)
  virtual keyBackClicked(void)
  virtual onExit(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputOpened(CCTextInputNode *)
}
class SecretLayer3 : cocos2d::CCLayer, DialogDelegate {
  animateEyes()
  create()
  dialogClosed(DialogLayer*)
  firstInteractionStep1()
  firstInteractionStep2()
  firstInteractionStep3()
  firstInteractionStep4()
  init()
  keyBackClicked()
  onBack(cocos2d::CCObject*)
  onChest01(cocos2d::CCObject*)
  onChest02(cocos2d::CCObject*)
  onClick(cocos2d::CCObject*)
  onExit()
  revealStep1()
  revealStep2()
  revealStep3()
  revealStep4()
  revealStep5()
  scene()
  showUnlockDialog()
  virtual dialogClosed(DialogLayer *)
  virtual init(void)
  virtual keyBackClicked(void)
  virtual onExit(void)
}
class SecretLayer4 : cocos2d::CCLayer, TextInputDelegate, FLAlertLayerProtocol, DialogDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  create()
  dialogClosed(DialogLayer*)
  getBasicMessage()
  getErrorMessage()
  getMessage()
  getThreadMessage()
  init()
  keyBackClicked()
  nodeWithTag(int)
  onBack(cocos2d::CCObject*)
  onChest01(cocos2d::CCObject*)
  onExit()
  onSubmit(cocos2d::CCObject*)
  playCoinEffect()
  scene()
  selectAThread()
  showDialog(int)
  showFirstDialog()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputOpened(CCTextInputNode*)
  updateMessageLabel(std::string)
  updateSearchLabel(char const*)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual dialogClosed(DialogLayer *)
  virtual init(void)
  virtual keyBackClicked(void)
  virtual onExit(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputOpened(CCTextInputNode *)
}
class SecretNumberLayer : cocos2d::CCLayer {
  create()
  init()
  playNumberEffect(int)
  virtual init(void)
}
class SelectArtDelegate {
  selectArtClosed(SelectArtLayer*)
  virtual selectArtClosed(SelectArtLayer *)
}
class SelectArtLayer : FLAlertLayer {
  create(SelectArtType)
  init(SelectArtType)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onSelectCustom(cocos2d::CCObject*)
  selectArt(cocos2d::CCObject*)
  updateSelectedCustom(int)
  virtual keyBackClicked(void)
}
class SelectFontLayer : FLAlertLayer {
  create(LevelEditorLayer*)
  init(LevelEditorLayer*)
  keyBackClicked()
  onChangeFont(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  updateFontLabel()
  virtual keyBackClicked(void)
}
class SetFolderPopup : SetIDPopup, SetTextPopupDelegate {
  create(int, bool, std::string)
  init(int, bool, std::string)
  onSetFolderName(cocos2d::CCObject*)
  setTextPopupClosed(SetTextPopup*, std::string)
  valueChanged()
  virtual setTextPopupClosed(SetTextPopup *,std::string)
  virtual valueChanged(void)
}
class SetGroupIDLayer : FLAlertLayer, TextInputDelegate {
  addGroupID(int)
  callRemoveFromGroup(float)
  create(GameObject*, cocos2d::CCArray*)
  determineStartValues()
  init(GameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onAddGroup(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  onCopy(cocos2d::CCObject*)
  onDontEnter(cocos2d::CCObject*)
  onDontFade(cocos2d::CCObject*)
  onEditorLayer(cocos2d::CCObject*)
  onEditorLayer2(cocos2d::CCObject*)
  onGroupID(cocos2d::CCObject*)
  onHighDetail(cocos2d::CCObject*)
  onNextGroupID1(cocos2d::CCObject*)
  onPaste(cocos2d::CCObject*)
  onRemoveFromGroup(cocos2d::CCObject*)
  onSmoothEase(cocos2d::CCObject*)
  onToggleGroupParent(cocos2d::CCObject*)
  onZLayer(cocos2d::CCObject*)
  onZLayerShift(cocos2d::CCObject*)
  onZOrder(cocos2d::CCObject*)
  removeGroupID(int)
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  updateEditorLabel()
  updateEditorLabel2()
  updateEditorLayerID()
  updateEditorLayerID2()
  updateGroupIDButtons()
  updateGroupIDLabel()
  updateZLayerButtons()
  updateZOrder()
  updateZOrderLabel()
  virtual keyBackClicked(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
}
class SetIDLayer : FLAlertLayer {
  create(GameObject*)
  init(GameObject*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onDown(cocos2d::CCObject*)
  onUp(cocos2d::CCObject*)
  updateID()
  virtual keyBackClicked(void)
}
class SetIDPopup : FLAlertLayer, TextInputDelegate {
  create(int, int, int, std::string, std::string, bool, int)
  init(int, int, int, std::string, std::string, bool, int)
  keyBackClicked()
  onCancel(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  onItemIDArrow(cocos2d::CCObject*)
  onResetValue(cocos2d::CCObject*)
  show()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  updateTextInputLabel()
  valueChanged()
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual valueChanged(void)
}
class SetIDPopupDelegate {
  setIDPopupClosed(SetIDPopup*, int)
  virtual setIDPopupClosed(SetIDPopup *,int)
}
class SetItemIDLayer : FLAlertLayer, TextInputDelegate {
  create(EffectGameObject*, cocos2d::CCArray*)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onItemIDArrow(cocos2d::CCObject*)
  show()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateEditorLabel()
  updateItemID()
  updateTextInputLabel()
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class SetTargetIDLayer : FLAlertLayer, TextInputDelegate {
  create(EffectGameObject*, cocos2d::CCArray*, std::string)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*, std::string)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onMultiTrigger(cocos2d::CCObject*)
  onSpawnedByTrigger(cocos2d::CCObject*)
  onTargetIDArrow(cocos2d::CCObject*)
  onTouchTriggered(cocos2d::CCObject*)
  show()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateEditorLabel()
  updateMultiTriggerBtn()
  updateSpawnedByTrigger()
  updateTargetID()
  updateTextInputLabel()
  updateTouchTriggered()
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class SetTextPopup : FLAlertLayer, TextInputDelegate {
  create(std::string, std::string, int, std::string, std::string, bool)
  init(std::string, std::string, int, std::string, std::string, bool)
  keyBackClicked()
  onCancel(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  onResetValue(cocos2d::CCObject*)
  show()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  updateTextInputLabel()
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
}
class SetTextPopupDelegate {
  setTextPopupClosed(SetTextPopup*, std::string)
  virtual setTextPopupClosed(SetTextPopup *,std::string)
}
class SetupAnimationPopup : FLAlertLayer, TextInputDelegate {
  create(EffectGameObject*, cocos2d::CCArray*)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCArray*)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onAnimationIDArrow(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  onMultiTrigger(cocos2d::CCObject*)
  onSpawnedByTrigger(cocos2d::CCObject*)
  onTargetIDArrow(cocos2d::CCObject*)
  onTouchTriggered(cocos2d::CCObject*)
  show()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateAnimationID()
  updateAnimationTextInputLabel()
  updateEditorLabel()
  updateMultiTriggerBtn()
  updateSpawnedByTrigger()
  updateTargetID()
  updateTextInputLabel()
  updateTouchTriggered()
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class SetupAnimSettingsPopup : FLAlertLayer, TextInputDelegate {
  create(EffectGameObject*, cocos2d::CCArray*)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCArray*)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onUseAnimOffset(cocos2d::CCObject*)
  show()
  sliderChanged(cocos2d::CCObject*)
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateAnimSpeedMod()
  updateRotationInputLabel()
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class SetupCollisionTriggerPopup : FLAlertLayer, TextInputDelegate {
  create(EffectGameObject*, cocos2d::CCArray*)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCArray*)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onActivateOnExit(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  onEnableGroup(cocos2d::CCObject*)
  onItemID2Arrow(cocos2d::CCObject*)
  onItemIDArrow(cocos2d::CCObject*)
  onMultiTrigger(cocos2d::CCObject*)
  onSpawnedByTrigger(cocos2d::CCObject*)
  onTargetIDArrow(cocos2d::CCObject*)
  onTouchTriggered(cocos2d::CCObject*)
  show()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateEditorLabel()
  updateItemID()
  updateItemID2()
  updateItemID2InputLabel()
  updateItemIDInputLabel()
  updateMultiTriggerBtn()
  updateSpawnedByTrigger()
  updateTargetID()
  updateTargetIDInputLabel()
  updateTouchTriggered()
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class SetupCountTriggerPopup : FLAlertLayer, TextInputDelegate {
  create(EffectGameObject*, cocos2d::CCArray*)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCArray*)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onEnableGroup(cocos2d::CCObject*)
  onItemIDArrow(cocos2d::CCObject*)
  onMultiActivate(cocos2d::CCObject*)
  onMultiTrigger(cocos2d::CCObject*)
  onSpawnedByTrigger(cocos2d::CCObject*)
  onTargetCountArrow(cocos2d::CCObject*)
  onTargetIDArrow(cocos2d::CCObject*)
  onTouchTriggered(cocos2d::CCObject*)
  show()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateCountTextInputLabel()
  updateEditorLabel()
  updateItemID()
  updateItemIDInputLabel()
  updateMultiTriggerBtn()
  updateSpawnedByTrigger()
  updateTargetCount()
  updateTargetID()
  updateTargetIDInputLabel()
  updateTouchTriggered()
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class SetupInstantCountPopup : FLAlertLayer, TextInputDelegate {
  create(EffectGameObject*, cocos2d::CCArray*)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCArray*)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onCountType(cocos2d::CCObject*)
  onEnableGroup(cocos2d::CCObject*)
  onMultiTrigger(cocos2d::CCObject*)
  onSpawnedByTrigger(cocos2d::CCObject*)
  onTargetCountArrow(cocos2d::CCObject*)
  onTargetID2Arrow(cocos2d::CCObject*)
  onTargetIDArrow(cocos2d::CCObject*)
  onTouchTriggered(cocos2d::CCObject*)
  show()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateCountTextInputLabel()
  updateEditorLabel()
  updateItemID()
  updateItemIDInputLabel()
  updateMultiTriggerBtn()
  updateSpawnedByTrigger()
  updateTargetCount()
  updateTargetID()
  updateTargetIDInputLabel()
  updateTouchTriggered()
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class SetupInteractObjectPopup : FLAlertLayer, TextInputDelegate {
  create(EffectGameObject*, cocos2d::CCArray*)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCArray*)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onEnableGroup(cocos2d::CCObject*)
  onItemIDArrow(cocos2d::CCObject*)
  onNextItemID(cocos2d::CCObject*)
  onSubstractCount(cocos2d::CCObject*)
  onTargetIDArrow(cocos2d::CCObject*)
  onToggleItem(cocos2d::CCObject*)
  onToggleTrigger(cocos2d::CCObject*)
  show()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateItemID()
  updateItemIDInputLabel()
  updatePickupType()
  updateState()
  updateTargetID()
  updateTextInputLabel()
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class SetupObjectTogglePopup : FLAlertLayer, TextInputDelegate {
  create(EffectGameObject*, cocos2d::CCArray*)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCArray*)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onEnableGroup(cocos2d::CCObject*)
  onMultiActivate(cocos2d::CCObject*)
  onMultiTrigger(cocos2d::CCObject*)
  onSpawnedByTrigger(cocos2d::CCObject*)
  onTargetIDArrow(cocos2d::CCObject*)
  onTouchTriggered(cocos2d::CCObject*)
  show()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateEditorLabel()
  updateMultiTriggerBtn()
  updateSpawnedByTrigger()
  updateTargetID()
  updateTextInputLabel()
  updateTouchTriggered()
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class SetupOpacityPopup : FLAlertLayer, TextInputDelegate {
  create(EffectGameObject*, cocos2d::CCArray*)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onMultiTrigger(cocos2d::CCObject*)
  onSpawnedByTrigger(cocos2d::CCObject*)
  onTargetIDArrow(cocos2d::CCObject*)
  onTouchTriggered(cocos2d::CCObject*)
  show()
  sliderChanged(cocos2d::CCObject*)
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateDurLabel()
  updateDuration()
  updateEditorLabel()
  updateMultiTriggerBtn()
  updateOpacity()
  updateOpacityLabel()
  updateSpawnedByTrigger()
  updateTargetID()
  updateTextInputLabel()
  updateTouchTriggered()
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class SetupPickupTriggerPopup : FLAlertLayer, TextInputDelegate {
  create(EffectGameObject*, cocos2d::CCArray*)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCArray*)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onItemIDArrow(cocos2d::CCObject*)
  onMultiTrigger(cocos2d::CCObject*)
  onNextItemID(cocos2d::CCObject*)
  onSpawnedByTrigger(cocos2d::CCObject*)
  onTargetCountArrow(cocos2d::CCObject*)
  onTouchTriggered(cocos2d::CCObject*)
  show()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateCountTextInputLabel()
  updateEditorLabel()
  updateItemID()
  updateItemIDInputLabel()
  updateMultiTriggerBtn()
  updateSpawnedByTrigger()
  updateTargetCount()
  updateTouchTriggered()
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class SetupPulsePopup : FLAlertLayer, cocos2d::extension::ColorPickerDelegate, TextInputDelegate, GJSpecialColorSelectDelegate {
  closeColorSelect(cocos2d::CCObject*)
  colorSelectClosed(GJSpecialColorSelect*, int)
  colorValueChanged(cocos2d::_ccColor3B)
  create(EffectGameObject*, cocos2d::CCArray*)
  determineStartValues()
  getColorValue()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onCopy(cocos2d::CCObject*)
  onExclusive(cocos2d::CCObject*)
  onGroupMainOnly(cocos2d::CCObject*)
  onGroupSecondaryOnly(cocos2d::CCObject*)
  onMultiTrigger(cocos2d::CCObject*)
  onPaste(cocos2d::CCObject*)
  onSelectPulseMode(cocos2d::CCObject*)
  onSelectSpecialColor(cocos2d::CCObject*)
  onSelectSpecialTargetID(cocos2d::CCObject*)
  onSelectTargetMode(cocos2d::CCObject*)
  onSpawnedByTrigger(cocos2d::CCObject*)
  onTouchTriggered(cocos2d::CCObject*)
  onUpdateCopyColor(cocos2d::CCObject*)
  onUpdateCustomColor(cocos2d::CCObject*)
  selectColor(cocos2d::_ccColor3B)
  show()
  sliderChanged(cocos2d::CCObject*)
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputOpened(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateColorValue()
  updateCopyColor()
  updateCopyColorTextInputLabel()
  updateEditorLabel()
  updateFadeInLabel(bool)
  updateFadeInTime()
  updateFadeOutLabel(bool)
  updateFadeOutTime()
  updateGroupMainOnly()
  updateGroupSecondaryOnly()
  updateHSVValue()
  updateHoldLabel(bool)
  updateHoldTime()
  updateMultiTriggerBtn()
  updatePulseMode()
  updatePulseTargetType()
  updateSpawnedByTrigger()
  updateTargetID()
  updateTextInputLabel()
  updateTouchTriggered()
  virtual colorSelectClosed(GJSpecialColorSelect *,int)
  virtual colorValueChanged(cocos2d::_ccColor3B)
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputOpened(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class SetupRotatePopup : FLAlertLayer, TextInputDelegate {
  create(EffectGameObject*, cocos2d::CCArray*)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCArray*)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onChangeState(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  show()
  sliderChanged(cocos2d::CCObject*)
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateCustomRotation()
  updateDisableRotation()
  updateRotationInputLabel()
  updateState()
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class SetupShakePopup : FLAlertLayer, TextInputDelegate {
  create(EffectGameObject*, cocos2d::CCArray*)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCArray*)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onMultiTrigger(cocos2d::CCObject*)
  onSpawnedByTrigger(cocos2d::CCObject*)
  onTouchTriggered(cocos2d::CCObject*)
  show()
  sliderChanged(cocos2d::CCObject*)
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateDurLabel(bool)
  updateDuration()
  updateInterval()
  updateIntervalLabel(bool)
  updateMultiTriggerBtn()
  updateShake()
  updateShakeLabel(bool)
  updateSpawnedByTrigger()
  updateTouchTriggered()
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class SetupSpawnPopup : FLAlertLayer, TextInputDelegate {
  create(EffectGameObject*, cocos2d::CCArray*)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCArray*)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onEditorDisable(cocos2d::CCObject*)
  onMultiTrigger(cocos2d::CCObject*)
  onSpawnedByTrigger(cocos2d::CCObject*)
  onTargetIDArrow(cocos2d::CCObject*)
  onTouchTriggered(cocos2d::CCObject*)
  show()
  sliderChanged(cocos2d::CCObject*)
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateDelay()
  updateDelayLabel(bool)
  updateEditorLabel()
  updateMultiTriggerBtn()
  updateSpawnedByTrigger()
  updateTargetID()
  updateTextInputLabel()
  updateTouchTriggered()
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class SetupTouchTogglePopup : FLAlertLayer, TextInputDelegate {
  create(EffectGameObject*, cocos2d::CCArray*)
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCArray*)
  determineStartValues()
  init(EffectGameObject*, cocos2d::CCArray*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onDualTouchMode(cocos2d::CCObject*)
  onHoldMode(cocos2d::CCObject*)
  onMultiTrigger(cocos2d::CCObject*)
  onSpawnedByTrigger(cocos2d::CCObject*)
  onTargetIDArrow(cocos2d::CCObject*)
  onTouchMode(cocos2d::CCObject*)
  onTouchTriggered(cocos2d::CCObject*)
  show()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  updateEditorLabel()
  updateMultiTriggerBtn()
  updateSpawnedByTrigger()
  updateTargetID()
  updateTextInputLabel()
  updateTouchTriggered()
  virtual keyBackClicked(void)
  virtual show(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class ShardsPage : FLAlertLayer {
  FLAlert_Clicked(FLAlertLayer*, bool)
  create()
  goToPage(int)
  init()
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onSwitchPage(cocos2d::CCObject*)
  registerWithTouchDispatcher()
  show()
  virtual init(void)
  virtual keyBackClicked(void)
  virtual registerWithTouchDispatcher(void)
  virtual show(void)
}
class ShareCommentLayer : FLAlertLayer, TextInputDelegate, UploadActionDelegate, UploadPopupDelegate {
  create(std::string, int, CommentType, int)
  init(std::string, int, CommentType, int)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onClosePopup(UploadActionPopup*)
  onPercent(cocos2d::CCObject*)
  onShare(cocos2d::CCObject*)
  registerWithTouchDispatcher()
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputOpened(CCTextInputNode*)
  updateCharCountLabel()
  updateDescText(char const*)
  updatePercentLabel()
  uploadActionFailed(int, int)
  uploadActionFinished(int, int)
  virtual keyBackClicked(void)
  virtual onClosePopup(UploadActionPopup *)
  virtual registerWithTouchDispatcher(void)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputOpened(CCTextInputNode *)
  virtual uploadActionFailed(int,int)
  virtual uploadActionFinished(int,int)
}
class ShareLevelLayer : FLAlertLayer {
  create(GJGameLevel*)
  getStarsButton(int, void (cocos2d::CCObject::*)(cocos2d::CCObject*), cocos2d::CCMenu*, float)
  init(GJGameLevel*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onSettings(cocos2d::CCObject*)
  onShare(cocos2d::CCObject*)
  selectRating(cocos2d::CCObject*)
  setupStars()
  virtual keyBackClicked(void)
}
class ShareLevelSettingsLayer : FLAlertLayer, NumberInputDelegate {
  create(GJGameLevel*)
  init(GJGameLevel*)
  keyBackClicked()
  numberInputClosed(NumberInputLayer*)
  onClose(cocos2d::CCObject*)
  onCopyable(cocos2d::CCObject*)
  onEditPassword(cocos2d::CCObject*)
  onPassword(cocos2d::CCObject*)
  onUnlisted(cocos2d::CCObject*)
  updateSettingsState()
  virtual keyBackClicked(void)
  virtual numberInputClosed(NumberInputLayer *)
}
class SimpleObject : cocos2d::CCObject {
  create()
  init()
}
class SimplePlayer : cocos2d::CCSprite {
  create(int)
  init(int)
  setColor(cocos2d::_ccColor3B const&)
  setFrames(char const*, char const*, char const*, char const*, char const*)
  setOpacity(unsigned char)
  setSecondColor(cocos2d::_ccColor3B const&)
  updateColors()
  updatePlayerFrame(int, IconType)
  virtual setColor(cocos2d::_ccColor3B const&)
  virtual setOpacity(uchar)
}
class SlideInLayer : cocos2d::CCLayerColor {
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create()
  customSetup()
  disableUI()
  draw()
  enableUI()
  enterAnimFinished()
  enterLayer()
  exitLayer(cocos2d::CCObject*)
  hideLayer(bool)
  init()
  keyBackClicked()
  layerHidden()
  layerVisible()
  registerWithTouchDispatcher()
  showLayer(bool)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual customSetup(void)
  virtual disableUI(void)
  virtual draw(void)
  virtual enableUI(void)
  virtual enterAnimFinished(void)
  virtual enterLayer(void)
  virtual exitLayer(cocos2d::CCObject *)
  virtual hideLayer(bool)
  virtual init(void)
  virtual keyBackClicked(void)
  virtual layerHidden(void)
  virtual layerVisible(void)
  virtual registerWithTouchDispatcher(void)
  virtual showLayer(bool)
}
class Slider : cocos2d::CCLayer {
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create(cocos2d::CCNode*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  create(cocos2d::CCNode*, void (cocos2d::CCObject::*)(cocos2d::CCObject*), float)
  create(cocos2d::CCNode*, void (cocos2d::CCObject::*)(cocos2d::CCObject*), char const*, char const*, char const*, char const*, float)
  disableTouch()
  getLiveDragging()
  getThumb()
  getValue()
  hideGroove(bool)
  init(cocos2d::CCNode*, void (cocos2d::CCObject::*)(cocos2d::CCObject*), char const*, char const*, char const*, char const*, float)
  setBarVisibility(bool)
  setLiveDragging(bool)
  setMaxOffset(float)
  setRotated(bool)
  setValue(float)
  updateBar()
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
}
class SliderThumb : cocos2d::CCMenuItemImage {
  create(cocos2d::CCNode*, void (cocos2d::CCObject::*)(cocos2d::CCObject*), char const*, char const*)
  getValue()
  init(cocos2d::CCNode*, void (cocos2d::CCObject::*)(cocos2d::CCObject*), char const*, char const*)
  setMaxOffset(float)
  setRotated(bool)
  setValue(float)
}
class SliderTouchLogic : cocos2d::CCMenu {
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create(cocos2d::CCNode*, void (cocos2d::CCObject::*)(cocos2d::CCObject*), char const*, char const*, float)
  init(cocos2d::CCNode*, void (cocos2d::CCObject::*)(cocos2d::CCObject*), char const*, char const*, float)
  registerWithTouchDispatcher()
  setMaxOffset(float)
  setRotated(bool)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual registerWithTouchDispatcher(void)
}
class SongCell : TableViewCell {
  draw()
  init()
  loadFromObject(SongObject*)
  onClick(cocos2d::CCObject*)
  updateBGColor(int)
  virtual draw(void)
  virtual init(void)
}
class SongInfoLayer : FLAlertLayer {
  create(int)
  create(std::string, std::string, std::string, std::string, std::string, std::string)
  init(std::string, std::string, std::string, std::string, std::string, std::string)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onDownload(cocos2d::CCObject*)
  onFB(cocos2d::CCObject*)
  onNG(cocos2d::CCObject*)
  onYT(cocos2d::CCObject*)
  virtual keyBackClicked(void)
}
class SongInfoObject : cocos2d::CCNode {
  canEncode()
  create(int)
  create(int, std::string, std::string, int, float, std::string, std::string, std::string, int)
  create(cocos2d::CCDictionary*)
  createWithCoder(DS_Dictionary*)
  encodeWithCoder(DS_Dictionary*)
  init(int, std::string, std::string, int, float, std::string, std::string, std::string, int)
  virtual canEncode(void)
  virtual encodeWithCoder(DS_Dictionary *)
}
class SongObject : cocos2d::CCObject {
  create(int)
  init(int)
}
class SongOptionsLayer : FLAlertLayer {
  create(LevelSettingsObject*)
  init(LevelSettingsObject*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onFadeIn(cocos2d::CCObject*)
  onFadeOut(cocos2d::CCObject*)
  onInfo(cocos2d::CCObject*)
  onPlayback(cocos2d::CCObject*)
  updatePlaybackBtn()
  virtual keyBackClicked(void)
}
class SongsLayer : GJDropDownLayer {
  create()
  customSetup()
  virtual customSetup(void)
}
class SpawnTriggerAction : cocos2d::CCNode {
  create(float, int)
  createFromString(std::string)
  getSaveString()
  init(float, int)
  isFinished()
  step(float)
}
class SpeedObject : cocos2d::CCNode {
  create(GameObject*, int, float)
  init(GameObject*, int, float)
}
class SpriteAnimationManager : cocos2d::CCNode {
  animationFinished()
  callAnimationFinished()
  createAnimations(std::string)
  createWithOwner(CCAnimatedSprite*, std::string)
  doCleanup()
  executeAnimation(std::string)
  finishAnimation(std::string)
  getAnimType(std::string)
  getPrio(std::string)
  initWithOwner(CCAnimatedSprite*, std::string)
  loadAnimations(std::string)
  offsetCurrentAnimation(float)
  overridePrio()
  playSound(std::string)
  playSoundForAnimation(std::string)
  queueAnimation(std::string)
  resetAnimState()
  runAnimation(std::string)
  runQueuedAnimation()
  stopAnimations()
  storeAnimation(cocos2d::CCAnimate*, cocos2d::CCAnimate*, std::string, int, spriteMode, cocos2d::CCSpriteFrame*)
  storeSoundForAnimation(cocos2d::CCString*, std::string, float)
  switchToFirstFrameOfAnimation(std::string)
  updateAnimationSpeed(float)
}
class SpriteDescription : cocos2d::CCObject {
  createDescription(DS_Dictionary*)
  createDescription(cocos2d::CCDictionary*)
  getTransformValues(frameValues*)
  initDescription(DS_Dictionary*)
  initDescription(cocos2d::CCDictionary*)
}
class SpritePartDelegate {
  displayFrameChanged(cocos2d::CCObject*, std::string)
  virtual displayFrameChanged(cocos2d::CCObject *,std::string)
}
class StartPosObject : EffectGameObject {
  create()
  getSaveString()
  init()
  setSettings(LevelSettingsObject*)
  virtual getSaveString(void)
  virtual init(void)
}
class StatsCell : TableViewCell {
  draw()
  getTitleFromKey(char const*)
  init()
  loadFromObject(StatsObject*)
  updateBGColor(int)
  virtual draw(void)
  virtual init(void)
}
class StatsLayer : GJDropDownLayer {
  create()
  customSetup()
  virtual customSetup(void)
}
class StatsObject : cocos2d::CCObject {
  create(char const*, int)
  init(char const*, int)
}
class std::__codecvt_abstract_base<char, {
}
class std::__codecvt_abstract_base<wchar_t, {
}
class std::__ctype_abstract_base<char> : std::locale::facet, std::ctype_base {
}
class std::__ctype_abstract_base<wchar_t> : std::locale::facet, std::ctype_base {
}
class std::__moneypunct_cache<char, {
}
class std::__moneypunct_cache<wchar_t, {
}
class std::__numpunct_cache<char> : std::locale::facet {
}
class std::__numpunct_cache<wchar_t> : std::locale::facet {
}
class std::__timepunct<char> : std::locale::facet {
}
class std::__timepunct<wchar_t> : std::locale::facet {
}
class std::__timepunct_cache<char> : std::locale::facet {
}
class std::__timepunct_cache<wchar_t> : std::locale::facet {
}
class std::bad_alloc : std::exception {
  what()
  virtual what(void)
}
class std::bad_cast : std::exception {
  what()
  virtual what(void)
}
class std::bad_exception : std::exception {
  what()
  virtual what(void)
}
class std::bad_function_call : std::exception {
}
class std::bad_typeid : std::exception {
  what()
  virtual what(void)
}
class std::basic_filebuf<char, {
}
class std::basic_filebuf<wchar_t, {
}
class std::basic_fstream<char, {
}
class std::basic_fstream<wchar_t, {
}
class std::basic_ifstream<char, {
}
class std::basic_ifstream<wchar_t, {
}
class std::basic_ios<char, {
}
class std::basic_ios<wchar_t, {
}
class std::basic_iostream<wchar_t, {
}
class std::basic_istream<wchar_t, {
}
class std::basic_istringstream<char, {
}
class std::basic_istringstream<wchar_t, {
}
class std::basic_ofstream<char, {
}
class std::basic_ofstream<wchar_t, {
}
class std::basic_ostream<wchar_t, {
}
class std::basic_ostringstream<char, {
}
class std::basic_ostringstream<wchar_t, {
}
class std::basic_streambuf<char, {
}
class std::basic_streambuf<wchar_t, {
}
class std::basic_stringbuf<char, {
}
class std::basic_stringbuf<wchar_t, {
}
class std::basic_stringstream<char, {
}
class std::basic_stringstream<wchar_t, {
}
class std::codecvt<char, {
}
class std::codecvt<wchar_t, {
}
class std::codecvt_byname<char, {
}
class std::codecvt_byname<wchar_t, {
}
class std::collate<char> : std::locale::facet {
}
class std::collate<wchar_t> : std::locale::facet {
}
class std::collate_byname<char> : std::collate<char> {
}
class std::collate_byname<wchar_t> : std::collate<wchar_t> {
}
class std::ctype<char> : std::locale::facet, std::ctype_base {
}
class std::ctype<wchar_t> : std::__ctype_abstract_base<wchar_t> {
}
class std::ctype_byname<char> : std::ctype<char> {
}
class std::ctype_byname<wchar_t> : std::ctype<wchar_t> {
}
class std::domain_error : std::logic_error {
}
class std::error_category {
}
class std::exception {
  what()
  virtual what(void)
}
class std::future_error : std::logic_error {
}
class std::invalid_argument : std::logic_error {
}
class std::ios_base {
}
class std::ios_base::failure : std::exception {
}
class std::length_error : std::logic_error {
}
class std::locale::facet {
}
class std::logic_error : std::exception {
}
class std::messages<char> : std::locale::facet, std::messages_base {
}
class std::messages<wchar_t> : std::locale::facet, std::messages_base {
}
class std::messages_byname<char> : std::messages<char> {
}
class std::messages_byname<wchar_t> : std::messages<wchar_t> {
}
class std::money_get<char, {
}
class std::money_get<wchar_t, {
}
class std::money_put<char, {
}
class std::money_put<wchar_t, {
}
class std::moneypunct<char, {
}
class std::moneypunct<wchar_t, {
}
class std::moneypunct_byname<char, {
}
class std::moneypunct_byname<wchar_t, {
}
class std::num_get<char, {
}
class std::num_get<wchar_t, {
}
class std::num_put<char, {
}
class std::num_put<wchar_t, {
}
class std::numpunct<char> : std::locale::facet {
}
class std::numpunct<wchar_t> : std::locale::facet {
}
class std::numpunct_byname<char> : std::numpunct<char> {
}
class std::numpunct_byname<wchar_t> : std::numpunct<wchar_t> {
}
class std::out_of_range : std::logic_error {
}
class std::overflow_error : std::runtime_error {
}
class std::range_error : std::runtime_error {
}
class std::regex_error : std::runtime_error {
}
class std::runtime_error : std::exception {
}
class std::system_error : std::runtime_error {
}
class std::time_get<char, {
}
class std::time_get<wchar_t, {
}
class std::time_get_byname<char, {
}
class std::time_get_byname<wchar_t, {
}
class std::time_put<char, {
}
class std::time_put<wchar_t, {
}
class std::time_put_byname<char, {
}
class std::time_put_byname<wchar_t, {
}
class std::type_info {
}
class std::underflow_error : std::runtime_error {
}
class SupportLayer : GJDropDownLayer, FLAlertLayerProtocol, UploadActionDelegate, UploadPopupDelegate {
  FLAlert_Clicked(FLAlertLayer*, bool)
  create()
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCArray*)
  customSetup()
  exitLayer()
  onClosePopup(UploadActionPopup*)
  onCocos2d(cocos2d::CCObject*)
  onEmail(cocos2d::CCObject*)
  onFAQ(cocos2d::CCObject*)
  onGetReward(cocos2d::CCObject*)
  onLowDetail(cocos2d::CCObject*)
  onRequestAccess(cocos2d::CCObject*)
  onRestore(cocos2d::CCObject*)
  onRobTop(cocos2d::CCObject*)
  sendSupportMail()
  uploadActionFailed(int, int)
  uploadActionFinished(int, int)
  virtual FLAlert_Clicked(FLAlertLayer *,bool)
  virtual customSetup(void)
  virtual onClosePopup(UploadActionPopup *)
  virtual uploadActionFailed(int,int)
  virtual uploadActionFinished(int,int)
}
class TableView : CCScrollLayerExt, CCScrollLayerExtDelegate {
  cancelAndStoleTouch(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  cellForRowAtIndexPath(CCIndexPath&)
  cellForTouch(cocos2d::CCTouch*)
  checkBoundaryOfCell(TableViewCell*)
  checkBoundaryOfCell(cocos2d::CCPoint&, float)
  checkBoundaryOfContent(float)
  checkFirstCell(TableViewCell*)
  checkLastCell(TableViewCell*)
  claimTouch(cocos2d::CCTouch*)
  create(TableViewDelegate*, TableViewDataSource*, cocos2d::CCRect)
  deleteTableViewCell(TableViewCell*)
  dequeueReusableCellWithIdentifier(char const*)
  initTableViewCells()
  isDuplicateInVisibleCellArray(CCIndexPath*)
  isDuplicateIndexPath(CCIndexPath&)
  onEnter()
  onExit()
  registerWithTouchDispatcher()
  reloadData()
  removeIndexPathFromPathAddedArray(CCIndexPath&)
  scrllViewWillBeginDecelerating(CCScrollLayerExt*)
  scrollToIndexPath(CCIndexPath&)
  scrollViewDidEndDecelerating(CCScrollLayerExt*)
  scrollViewDidEndMoving(CCScrollLayerExt*)
  scrollViewTouchMoving(CCScrollLayerExt*)
  scrollWheel(float, float)
  touchFinish(cocos2d::CCTouch*)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual onEnter(void)
  virtual onExit(void)
  virtual registerWithTouchDispatcher(void)
  virtual scrllViewWillBeginDecelerating(CCScrollLayerExt *)
  virtual scrollViewDidEndDecelerating(CCScrollLayerExt *)
  virtual scrollViewDidEndMoving(CCScrollLayerExt *)
  virtual scrollViewTouchMoving(CCScrollLayerExt *)
  virtual scrollWheel(float,float)
}
class TableViewCell : cocos2d::CCLayer {
  updateVisibility()
}
class TableViewDataSource {
  TableViewCommitCellEditingStyleForRowAtIndexPath(TableView*, TableViewCellEditingStyle, CCIndexPath&)
  numberOfSectionsInTableView(TableView*)
  virtual TableViewCommitCellEditingStyleForRowAtIndexPath(TableView *,TableViewCellEditingStyle,CCIndexPath &)
  virtual numberOfSectionsInTableView(TableView *)
}
class TableViewDelegate {
  TableViewDidDisplayCellForRowAtIndexPath(CCIndexPath&, TableViewCell*, TableView*)
  TableViewWillDisplayCellForRowAtIndexPath(CCIndexPath&, TableViewCell*, TableView*)
  TableViewWillReloadCellForRowAtIndexPath(CCIndexPath&, TableViewCell*, TableView*)
  didEndTweenToIndexPath(CCIndexPath&, TableView*)
  willTweenToIndexPath(CCIndexPath&, TableViewCell*, TableView*)
  virtual TableViewDidDisplayCellForRowAtIndexPath(CCIndexPath &,TableViewCell *,TableView *)
  virtual TableViewWillDisplayCellForRowAtIndexPath(CCIndexPath &,TableViewCell *,TableView *)
  virtual TableViewWillReloadCellForRowAtIndexPath(CCIndexPath &,TableViewCell *,TableView *)
  virtual didEndTweenToIndexPath(CCIndexPath &,TableView *)
  virtual willTweenToIndexPath(CCIndexPath &,TableViewCell *,TableView *)
}
class TeleportPortalObject : GameObject {
  addToGroup(int)
  addToGroup2(int)
  create(char const*)
  customObjectSetup(std::map<std::string, std::string, std::less<std::string >, std::allocator<std::pair<std::string const, std::string > > >&)
  getSaveString()
  getTeleportXOff(cocos2d::CCNode*)
  init(char const*)
  removeFromGroup(int)
  removeFromGroup2(int)
  setPosition(cocos2d::CCPoint const&)
  setPositionOverride(cocos2d::CCPoint)
  setRotation(float)
  setRotation2(float)
  setStartPos(cocos2d::CCPoint)
  setStartPosOverride(cocos2d::CCPoint)
  virtual addToGroup(int)
  virtual addToGroup2(int)
  virtual customObjectSetup(std::map<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string const,std::string>>> &)
  virtual getSaveString(void)
  virtual removeFromGroup(int)
  virtual removeFromGroup2(int)
  virtual setPosition(cocos2d::CCPoint const&)
  virtual setRotation(float)
  virtual setRotation2(float)
  virtual setStartPos(cocos2d::CCPoint)
}
class TextAlertPopup : cocos2d::CCNode {
  create(std::string, float, float)
  init(std::string, float, float)
}
class TextArea : cocos2d::CCSprite {
  colorAllCharactersTo(cocos2d::_ccColor3B)
  create(std::string, char const*, float, float, cocos2d::CCPoint, float, bool)
  draw()
  fadeIn(float, bool)
  fadeInCharacters(float, float)
  fadeOut(float)
  fadeOutAndRemove()
  finishFade()
  hideAll()
  init(std::string, char const*, float, float, cocos2d::CCPoint, float, bool)
  setIgnoreColorCode(bool)
  setOpacity(unsigned char)
  setString(std::string)
  showAll()
  stopAllCharacterActions()
  virtual draw(void)
  virtual setOpacity(uchar)
}
class TextAreaDelegate {
  fadeInTextFinished(TextArea*)
  virtual fadeInTextFinished(TextArea *)
}
class TextInputDelegate {
  allowTextInput(CCTextInputNode*)
  textChanged(CCTextInputNode*)
  textInputClosed(CCTextInputNode*)
  textInputOpened(CCTextInputNode*)
  textInputReturn(CCTextInputNode*)
  textInputShouldOffset(CCTextInputNode*, float)
  virtual allowTextInput(CCTextInputNode *)
  virtual textChanged(CCTextInputNode *)
  virtual textInputClosed(CCTextInputNode *)
  virtual textInputOpened(CCTextInputNode *)
  virtual textInputReturn(CCTextInputNode *)
  virtual textInputShouldOffset(CCTextInputNode *,float)
}
class tinyxml2::MemPool {
}
class tinyxml2::MemPoolT<36> : tinyxml2::MemPool {
  Alloc()
  Free(void*)
  ItemSize()
  SetTracked()
  virtual Alloc(void)
  virtual Free(void *)
  virtual ItemSize(void)
  virtual SetTracked(void)
}
class tinyxml2::MemPoolT<44> : tinyxml2::MemPool {
  Alloc()
  Free(void*)
  ItemSize()
  SetTracked()
  virtual Alloc(void)
  virtual Free(void *)
  virtual ItemSize(void)
  virtual SetTracked(void)
}
class tinyxml2::MemPoolT<48> : tinyxml2::MemPool {
  Alloc()
  Free(void*)
  ItemSize()
  SetTracked()
  virtual Alloc(void)
  virtual Free(void *)
  virtual ItemSize(void)
  virtual SetTracked(void)
}
class tinyxml2::MemPoolT<52> : tinyxml2::MemPool {
  Alloc()
  Free(void*)
  ItemSize()
  SetTracked()
  virtual Alloc(void)
  virtual Free(void *)
  virtual ItemSize(void)
  virtual SetTracked(void)
}
class tinyxml2::XMLAttribute {
  ParseDeep(char*, bool)
  QueryBoolValue(bool*)
  QueryDoubleValue(double*)
  QueryFloatValue(float*)
  QueryIntValue(int*)
  QueryUnsignedValue(unsigned int*)
  SetAttribute(bool)
  SetAttribute(double)
  SetAttribute(float)
  SetAttribute(int)
  SetAttribute(unsigned int)
  SetAttribute(char const*)
  SetName(char const*)
}
class tinyxml2::XMLComment : tinyxml2::XMLNode {
  Accept(tinyxml2::XMLVisitor*)
  ParseDeep(char*, tinyxml2::StrPair*)
  ShallowClone(tinyxml2::XMLDocument*)
  ShallowEqual(tinyxml2::XMLNode const*)
  ToComment()
  ToComment()
  XMLComment(tinyxml2::XMLDocument*)
  virtual Accept(tinyxml2::XMLVisitor *)
  virtual ParseDeep(char *,tinyxml2::StrPair *)
  virtual ShallowClone(tinyxml2::XMLDocument *)
  virtual ShallowEqual(tinyxml2::XMLNode const*)
  virtual ToComment(void)
}
class tinyxml2::XMLDeclaration : tinyxml2::XMLNode {
  Accept(tinyxml2::XMLVisitor*)
  ParseDeep(char*, tinyxml2::StrPair*)
  ShallowClone(tinyxml2::XMLDocument*)
  ShallowEqual(tinyxml2::XMLNode const*)
  ToDeclaration()
  ToDeclaration()
  XMLDeclaration(tinyxml2::XMLDocument*)
  virtual Accept(tinyxml2::XMLVisitor *)
  virtual ParseDeep(char *,tinyxml2::StrPair *)
  virtual ShallowClone(tinyxml2::XMLDocument *)
  virtual ShallowEqual(tinyxml2::XMLNode const*)
  virtual ToDeclaration(void)
}
class tinyxml2::XMLDocument : tinyxml2::XMLNode {
  Accept(tinyxml2::XMLVisitor*)
  Identify(char*, tinyxml2::XMLNode**)
  InitDocument()
  LoadFile(__sFILE*)
  LoadFile(char const*)
  NewComment(char const*)
  NewDeclaration(char const*)
  NewElement(char const*)
  NewText(char const*)
  NewUnknown(char const*)
  Parse(char const*, unsigned int)
  Print(tinyxml2::XMLPrinter*)
  PrintError()
  SaveFile(__sFILE*, bool)
  SaveFile(char const*, bool)
  SetError(tinyxml2::XMLError, char const*, char const*)
  ShallowClone(tinyxml2::XMLDocument*)
  ShallowEqual(tinyxml2::XMLNode const*)
  ToDocument()
  ToDocument()
  XMLDocument(bool, tinyxml2::Whitespace)
  virtual Accept(tinyxml2::XMLVisitor *)
  virtual ShallowClone(tinyxml2::XMLDocument*)
  virtual ShallowEqual(tinyxml2::XMLNode const*)
  virtual ToDocument(void)
}
class tinyxml2::XMLElement : tinyxml2::XMLNode {
  Accept(tinyxml2::XMLVisitor*)
  Attribute(char const*, char const*)
  DeleteAttribute(char const*)
  FindAttribute(char const*)
  FindAttribute(char const*)
  FindOrCreateAttribute(char const*)
  GetText()
  ParseAttributes(char*)
  ParseDeep(char*, tinyxml2::StrPair*)
  QueryBoolText(bool*)
  QueryDoubleText(double*)
  QueryFloatText(float*)
  QueryIntText(int*)
  QueryUnsignedText(unsigned int*)
  ShallowClone(tinyxml2::XMLDocument*)
  ShallowEqual(tinyxml2::XMLNode const*)
  ToElement()
  ToElement()
  XMLElement(tinyxml2::XMLDocument*)
  virtual Accept(tinyxml2::XMLVisitor *)
  virtual ParseDeep(char *,tinyxml2::StrPair *)
  virtual ShallowClone(tinyxml2::XMLDocument *)
  virtual ShallowEqual(tinyxml2::XMLNode const*)
  virtual ToElement(void)
}
class tinyxml2::XMLNode {
  DeleteChild(tinyxml2::XMLNode*)
  DeleteChildren()
  FirstChildElement(char const*)
  InsertAfterChild(tinyxml2::XMLNode*, tinyxml2::XMLNode*)
  InsertEndChild(tinyxml2::XMLNode*)
  InsertFirstChild(tinyxml2::XMLNode*)
  LastChildElement(char const*)
  NextSiblingElement(char const*)
  ParseDeep(char*, tinyxml2::StrPair*)
  PreviousSiblingElement(char const*)
  SetValue(char const*, bool)
  ToComment()
  ToComment()
  ToDeclaration()
  ToDeclaration()
  ToDocument()
  ToDocument()
  ToElement()
  ToElement()
  ToText()
  ToText()
  ToUnknown()
  ToUnknown()
  Unlink(tinyxml2::XMLNode*)
  XMLNode(tinyxml2::XMLDocument*)
  virtual ParseDeep(char *,tinyxml2::StrPair *)
  virtual ToComment(void)
  virtual ToDeclaration(void)
  virtual ToDocument(void)
  virtual ToElement(void)
  virtual ToText(void)
  virtual ToUnknown(void)
}
class tinyxml2::XMLPrinter : tinyxml2::XMLVisitor {
  CloseElement()
  OpenElement(char const*)
  Print(char const*, ...)
  PrintSpace(int)
  PrintString(char const*, bool)
  PushAttribute(char const*, bool)
  PushAttribute(char const*, double)
  PushAttribute(char const*, int)
  PushAttribute(char const*, unsigned int)
  PushAttribute(char const*, char const*)
  PushComment(char const*)
  PushDeclaration(char const*)
  PushHeader(bool, bool)
  PushText(bool)
  PushText(double)
  PushText(float)
  PushText(int)
  PushText(unsigned int)
  PushText(char const*, bool)
  PushUnknown(char const*)
  SealElement()
  Visit(tinyxml2::XMLComment const&)
  Visit(tinyxml2::XMLUnknown const&)
  Visit(tinyxml2::XMLDeclaration const&)
  Visit(tinyxml2::XMLText const&)
  VisitEnter(tinyxml2::XMLElement const&, tinyxml2::XMLAttribute const*)
  VisitEnter(tinyxml2::XMLDocument const&)
  VisitExit(tinyxml2::XMLElement const&)
  VisitExit(tinyxml2::XMLDocument const&)
  XMLPrinter(__sFILE*, bool)
  virtual Visit(tinyxml2::XMLDeclaration const&)
  virtual Visit(tinyxml2::XMLText const&)
  virtual Visit(tinyxml2::XMLComment const&)
  virtual Visit(tinyxml2::XMLUnknown const&)
  virtual VisitEnter(tinyxml2::XMLDocument const&)
  virtual VisitEnter(tinyxml2::XMLElement const&,tinyxml2::XMLAttribute const*)
  virtual VisitExit(tinyxml2::XMLDocument const&)
  virtual VisitExit(tinyxml2::XMLElement const&)
}
class tinyxml2::XMLText : tinyxml2::XMLNode {
  Accept(tinyxml2::XMLVisitor*)
  ParseDeep(char*, tinyxml2::StrPair*)
  ShallowClone(tinyxml2::XMLDocument*)
  ShallowEqual(tinyxml2::XMLNode const*)
  ToText()
  ToText()
  virtual Accept(tinyxml2::XMLVisitor *)
  virtual ParseDeep(char *,tinyxml2::StrPair *)
  virtual ShallowClone(tinyxml2::XMLDocument *)
  virtual ShallowEqual(tinyxml2::XMLNode const*)
  virtual ToText(void)
}
class tinyxml2::XMLUnknown : tinyxml2::XMLNode {
  Accept(tinyxml2::XMLVisitor*)
  ParseDeep(char*, tinyxml2::StrPair*)
  ShallowClone(tinyxml2::XMLDocument*)
  ShallowEqual(tinyxml2::XMLNode const*)
  ToUnknown()
  ToUnknown()
  XMLUnknown(tinyxml2::XMLDocument*)
  virtual Accept(tinyxml2::XMLVisitor *)
  virtual ParseDeep(char *,tinyxml2::StrPair *)
  virtual ShallowClone(tinyxml2::XMLDocument *)
  virtual ShallowEqual(tinyxml2::XMLNode const*)
  virtual ToUnknown(void)
}
class tinyxml2::XMLVisitor {
  Visit(tinyxml2::XMLComment const&)
  Visit(tinyxml2::XMLUnknown const&)
  Visit(tinyxml2::XMLDeclaration const&)
  Visit(tinyxml2::XMLText const&)
  VisitEnter(tinyxml2::XMLElement const&, tinyxml2::XMLAttribute const*)
  VisitEnter(tinyxml2::XMLDocument const&)
  VisitExit(tinyxml2::XMLElement const&)
  VisitExit(tinyxml2::XMLDocument const&)
  virtual Visit(tinyxml2::XMLDeclaration const&)
  virtual Visit(tinyxml2::XMLText const&)
  virtual Visit(tinyxml2::XMLComment const&)
  virtual Visit(tinyxml2::XMLUnknown const&)
  virtual VisitEnter(tinyxml2::XMLDocument const&)
  virtual VisitEnter(tinyxml2::XMLElement const&,tinyxml2::XMLAttribute const*)
  virtual VisitExit(tinyxml2::XMLDocument const&)
  virtual VisitExit(tinyxml2::XMLElement const&)
}
class ToggleTriggerAction : cocos2d::CCNode {
  create(int, bool)
  createFromString(std::string)
  getSaveString()
  init(int, bool)
}
class TopArtistsLayer : FLAlertLayer, OnlineListDelegate {
  create()
  init()
  isCorrect(char const*)
  keyBackClicked()
  loadListFailed(char const*)
  loadListFinished(cocos2d::CCArray*, char const*)
  loadPage(int)
  onClose(cocos2d::CCObject*)
  onNextPage(cocos2d::CCObject*)
  onPrevPage(cocos2d::CCObject*)
  registerWithTouchDispatcher()
  setupLeaderboard(cocos2d::CCArray*)
  setupPageInfo(std::string, char const*)
  show()
  updateLevelsLabel()
  virtual init(void)
  virtual keyBackClicked(void)
  virtual loadListFailed(char const*)
  virtual loadListFinished(cocos2d::CCArray *,char const*)
  virtual registerWithTouchDispatcher(void)
  virtual setupPageInfo(std::string,char const*)
  virtual show(void)
}
class TouchToggleAction : cocos2d::CCNode {
  create(int, bool, TouchTriggerType)
  createFromString(std::string)
  getSaveString()
  init(int, bool, TouchTriggerType)
}
class TriggerEffectDelegate {
}
class TutorialLayer : FLAlertLayer {
  create()
  init()
  keyBackClicked()
  loadPage(int)
  onClose(cocos2d::CCObject*)
  onNext(cocos2d::CCObject*)
  removeTutorialTexture()
  virtual init(void)
  virtual keyBackClicked(void)
}
class TutorialPopup : FLAlertLayer {
  animateMenu()
  closeTutorial(cocos2d::CCObject*)
  create(std::string)
  init(std::string)
  keyBackClicked()
  registerForCallback(void (cocos2d::CCObject::*)(cocos2d::CCObject*), cocos2d::CCNode*)
  show()
  virtual keyBackClicked(void)
  virtual show(void)
}
class UILayer : cocos2d::CCLayerColor, cocos2d::CCKeyboardDelegate {
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create()
  disableMenu()
  draw()
  enableMenu()
  init()
  keyBackClicked()
  keyDown(cocos2d::enumKeyCodes)
  keyUp(cocos2d::enumKeyCodes)
  onCheck(cocos2d::CCObject*)
  onDeleteCheck(cocos2d::CCObject*)
  onPause(cocos2d::CCObject*)
  pCommand(cocos2d::CCNode*)
  registerWithTouchDispatcher()
  toggleCheckpointsMenu(bool)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual draw(void)
  virtual init(void)
  virtual keyBackClicked(void)
  virtual keyDown(cocos2d::enumKeyCodes)
  virtual keyUp(cocos2d::enumKeyCodes)
  virtual registerWithTouchDispatcher(void)
}
class UndoObject : cocos2d::CCObject {
  create(GameObject*, UndoCommand)
  createWithArray(cocos2d::CCArray*, UndoCommand)
  createWithTransformObjects(cocos2d::CCArray*, UndoCommand)
  init(GameObject*, UndoCommand)
  init(cocos2d::CCArray*, UndoCommand)
  initWithTransformObjects(cocos2d::CCArray*, UndoCommand)
  setObjects(cocos2d::CCArray*)
}
class UpdateAccountSettingsPopup : FLAlertLayer, GJAccountSettingsDelegate {
  create(GJAccountSettingsLayer*, int, int, int, std::string, std::string, std::string)
  init(GJAccountSettingsLayer*, int, int, int, std::string, std::string, std::string)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  updateSettingsFailed()
  updateSettingsFinished()
  virtual keyBackClicked(void)
  virtual updateSettingsFailed(void)
  virtual updateSettingsFinished(void)
}
class UploadActionDelegate {
  uploadActionFailed(int, int)
  uploadActionFinished(int, int)
  virtual uploadActionFailed(int,int)
  virtual uploadActionFinished(int,int)
}
class UploadActionPopup : FLAlertLayer {
  closePopup()
  create(UploadPopupDelegate*, std::string)
  init(UploadPopupDelegate*, std::string)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  showFailMessage(std::string)
  showSuccessMessage(std::string)
  virtual keyBackClicked(void)
}
class UploadMessageDelegate {
  uploadMessageFailed(int)
  uploadMessageFinished(int)
  virtual uploadMessageFailed(int)
  virtual uploadMessageFinished(int)
}
class UploadPopup : FLAlertLayer, LevelUploadDelegate {
  create(GJGameLevel*)
  init(GJGameLevel*)
  keyBackClicked()
  levelUploadFailed(GJGameLevel*)
  levelUploadFinished(GJGameLevel*)
  onBack(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  onReturnToLevel(cocos2d::CCObject*)
  show()
  virtual keyBackClicked(void)
  virtual levelUploadFailed(GJGameLevel *)
  virtual levelUploadFinished(GJGameLevel *)
  virtual show(void)
}
class UploadPopupDelegate {
  onClosePopup(UploadActionPopup*)
  virtual onClosePopup(UploadActionPopup *)
}
class UserInfoDelegate {
  getUserInfoFailed(int)
  getUserInfoFinished(GJUserScore*)
  userInfoChanged(GJUserScore*)
  virtual getUserInfoFailed(int)
  virtual getUserInfoFinished(GJUserScore *)
  virtual userInfoChanged(GJUserScore *)
}
class UserListDelegate {
  forceReloadList(UserListType)
  getUserListFailed(UserListType, GJErrorCode)
  getUserListFinished(cocos2d::CCArray*, UserListType)
  userListChanged(cocos2d::CCArray*, UserListType)
  virtual forceReloadList(UserListType)
  virtual getUserListFailed(UserListType,GJErrorCode)
  virtual getUserListFinished(cocos2d::CCArray *,UserListType)
  virtual userListChanged(cocos2d::CCArray *,UserListType)
}
class VideoOptionsLayer : FLAlertLayer {
  create()
  createToggleButton(std::string, void (cocos2d::CCObject::*)(cocos2d::CCObject*), bool, cocos2d::CCMenu*, cocos2d::CCPoint, float, float, bool)
  init()
  keyBackClicked()
  onAdvanced(cocos2d::CCObject*)
  onApply(cocos2d::CCObject*)
  onClose(cocos2d::CCObject*)
  onFullscreen(cocos2d::CCObject*)
  onInfo(cocos2d::CCObject*)
  onResolutionNext(cocos2d::CCObject*)
  onResolutionPrev(cocos2d::CCObject*)
  onTextureQualityNext(cocos2d::CCObject*)
  onTextureQualityPrev(cocos2d::CCObject*)
  toggleResolution()
  updateResolution(int)
  updateTextureQuality(int)
  virtual init(void)
  virtual keyBackClicked(void)
}
class WorldLevelPage : FLAlertLayer {
  create(GJGameLevel*, GJWorldNode*)
  init(GJGameLevel*, GJWorldNode*)
  keyBackClicked()
  onClose(cocos2d::CCObject*)
  onInfo(cocos2d::CCObject*)
  onPlay(cocos2d::CCObject*)
  onSong(cocos2d::CCObject*)
  show()
  virtual keyBackClicked(void)
  virtual show(void)
}
class WorldSelectLayer : cocos2d::CCLayer, BoomScrollLayerDelegate {
  animateInActiveIsland()
  colorForPage(int)
  create(int)
  getColorValue(int, int, float)
  goToPage(int, bool)
  init(int)
  keyBackClicked()
  onBack(cocos2d::CCObject*)
  onExit()
  onGarage(cocos2d::CCObject*)
  onNext(cocos2d::CCObject*)
  onPrev(cocos2d::CCObject*)
  scene(int)
  scrollLayerMoved(cocos2d::CCPoint)
  scrollLayerScrolledToPage(BoomScrollLayer*, int)
  scrollLayerWillScrollToPage(BoomScrollLayer*, int)
  setupWorlds()
  showCompleteDialog()
  tryShowAd()
  unblockButtons()
  updateArrows()
  virtual keyBackClicked(void)
  virtual onExit(void)
  virtual scrollLayerMoved(cocos2d::CCPoint)
  virtual scrollLayerScrolledToPage(BoomScrollLayer *,int)
  virtual scrollLayerWillScrollToPage(BoomScrollLayer *,int)
}
class xml_string_writer : pugi::xml_writer {
  write(void const*, unsigned int)
  virtual write(void const*,uint)
}
class cocos2d::CCAccelAmplitude : cocos2d::CCActionInterval {
  create(cocos2d::CCAction*, float)
  initWithAction(cocos2d::CCAction*, float)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  update(float)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCAccelDeccelAmplitude : cocos2d::CCActionInterval {
  create(cocos2d::CCAction*, float)
  initWithAction(cocos2d::CCAction*, float)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  update(float)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCAccelerometerDelegate {
  didAccelerate(cocos2d::CCAcceleration*)
  virtual didAccelerate(cocos2d::CCAcceleration *)
}
class cocos2d::CCAction : cocos2d::CCObject {
  CCAction()
  copyWithZone(cocos2d::CCZone*)
  create()
  description()
  isDone()
  setTag(int)
  startWithTarget(cocos2d::CCNode*)
  step(float)
  stop()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual isDone(void)
  virtual setTag(int)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual step(float)
  virtual stop(void)
  virtual update(float)
}
class cocos2d::CCActionCamera : cocos2d::CCActionInterval {
  reverse()
  startWithTarget(cocos2d::CCNode*)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
}
class cocos2d::CCActionEase : cocos2d::CCActionInterval {
  CCActionEase()
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*)
  getInnerAction()
  initWithAction(cocos2d::CCActionInterval*)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  stop()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual getInnerAction(void)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual stop(void)
  virtual update(float)
}
class cocos2d::CCActionInstant : cocos2d::CCFiniteTimeAction {
  CCActionInstant()
  copyWithZone(cocos2d::CCZone*)
  isDone()
  reverse()
  step(float)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual isDone(void)
  virtual reverse(void)
  virtual step(float)
  virtual update(float)
}
class cocos2d::CCActionInterval : cocos2d::CCFiniteTimeAction {
  CCActionInterval()
  copyWithZone(cocos2d::CCZone*)
  create(float)
  getAmplitudeRate()
  initWithDuration(float)
  isDone()
  reverse()
  setAmplitudeRate(float)
  startWithTarget(cocos2d::CCNode*)
  step(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual isDone(void)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual step(float)
}
class cocos2d::CCActionManager : cocos2d::CCObject {
  CCActionManager()
  actionAllocWithHashElement(cocos2d::_hashElement*)
  addAction(cocos2d::CCAction*, cocos2d::CCNode*, bool)
  deleteHashElement(cocos2d::_hashElement*)
  getActionByTag(unsigned int, cocos2d::CCObject*)
  numberOfRunningActionsInTarget(cocos2d::CCObject*)
  pauseAllRunningActions()
  pauseTarget(cocos2d::CCObject*)
  removeAction(cocos2d::CCAction*)
  removeActionAtIndex(unsigned int, cocos2d::_hashElement*)
  removeActionByTag(unsigned int, cocos2d::CCObject*)
  removeAllActions()
  removeAllActionsFromTarget(cocos2d::CCObject*)
  resumeTarget(cocos2d::CCObject*)
  resumeTargets(cocos2d::CCSet*)
  update(float)
  virtual update(float)
}
class cocos2d::CCActionTween : cocos2d::CCActionInterval {
  create(float, char const*, float, float)
  initWithDuration(float, char const*, float, float)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  update(float)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCActionTweenDelegate {
}
class cocos2d::CCAnimate : cocos2d::CCActionInterval {
  CCAnimate()
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCAnimation*)
  initWithAnimation(cocos2d::CCAnimation*)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  stop()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual stop(void)
  virtual update(float)
}
class cocos2d::CCAnimation : cocos2d::CCObject {
  CCAnimation()
  addSpriteFrame(cocos2d::CCSpriteFrame*)
  addSpriteFrameWithFileName(char const*)
  addSpriteFrameWithTexture(cocos2d::CCTexture2D*, cocos2d::CCRect const&)
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCArray*, float, unsigned int)
  create()
  createWithSpriteFrames(cocos2d::CCArray*, float)
  getDuration()
  init()
  initWithAnimationFrames(cocos2d::CCArray*, float, unsigned int)
  initWithSpriteFrames(cocos2d::CCArray*, float)
  setFrames(cocos2d::CCArray*)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual getDuration(void)
}
class cocos2d::CCAnimationCache : cocos2d::CCObject {
  CCAnimationCache()
  addAnimation(cocos2d::CCAnimation*, char const*)
  addAnimationsWithDictionary(cocos2d::CCDictionary*, char const*)
  addAnimationsWithFile(char const*)
  animationByName(char const*)
  init()
  parseVersion1(cocos2d::CCDictionary*)
  parseVersion2(cocos2d::CCDictionary*)
  purgeSharedAnimationCache()
  removeAnimationByName(char const*)
  sharedAnimationCache()
}
class cocos2d::CCAnimationFrame : cocos2d::CCObject {
  CCAnimationFrame()
  copyWithZone(cocos2d::CCZone*)
  initWithSpriteFrame(cocos2d::CCSpriteFrame*, float, cocos2d::CCDictionary*)
  virtual copyWithZone(cocos2d::CCZone *)
}
class cocos2d::CCApplication : cocos2d::CCApplicationProtocol {
  CCApplication()
  getCurrentLanguage()
  getTargetPlatform()
  openURL(char const*)
  run()
  setAnimationInterval(double)
  sharedApplication()
  virtual getCurrentLanguage(void)
  virtual getTargetPlatform(void)
  virtual openURL(char const*)
  virtual otocol::applicationWillBecomeActive(void)
  virtual otocol::applicationWillResignActive(void)
  virtual otocol::gameDidSave(void)
  virtual otocol::trySaveGame(void)
  virtual setAnimationInterval(double)
}
class cocos2d::CCApplicationProtocol {
  applicationWillBecomeActive()
  applicationWillResignActive()
  gameDidSave()
  openURL(char const*)
  trySaveGame()
  virtual applicationWillBecomeActive(void)
  virtual applicationWillResignActive(void)
  virtual gameDidSave(void)
  virtual openURL(char const*)
  virtual trySaveGame(void)
}
class cocos2d::CCArray : cocos2d::CCObject {
  CCArray(unsigned int)
  CCArray()
  acceptVisitor(cocos2d::CCDataVisitor&)
  addObject(cocos2d::CCObject*)
  addObjectNew(cocos2d::CCObject*)
  addObjectsFromArray(cocos2d::CCArray*)
  capacity()
  containsObject(cocos2d::CCObject*)
  copyWithZone(cocos2d::CCZone*)
  count()
  create(cocos2d::CCObject*, ...)
  create()
  createWithArray(cocos2d::CCArray*)
  createWithCapacity(unsigned int)
  createWithContentsOfFile(char const*)
  createWithContentsOfFileThreadSafe(char const*)
  createWithObject(cocos2d::CCObject*)
  exchangeObject(cocos2d::CCObject*, cocos2d::CCObject*)
  exchangeObjectAtIndex(unsigned int, unsigned int)
  fastRemoveObject(cocos2d::CCObject*)
  fastRemoveObjectAtIndex(unsigned int)
  fastRemoveObjectAtIndexNew(unsigned int)
  indexOfObject(cocos2d::CCObject*)
  init()
  initWithArray(cocos2d::CCArray*)
  initWithCapacity(unsigned int)
  initWithObject(cocos2d::CCObject*)
  initWithObjects(cocos2d::CCObject*, ...)
  insertObject(cocos2d::CCObject*, unsigned int)
  isEqualToArray(cocos2d::CCArray*)
  lastObject()
  objectAtIndex(unsigned int)
  randomObject()
  reduceMemoryFootprint()
  removeAllObjects()
  removeLastObject(bool)
  removeObject(cocos2d::CCObject*, bool)
  removeObjectAtIndex(unsigned int, bool)
  removeObjectsInArray(cocos2d::CCArray*)
  replaceObjectAtIndex(unsigned int, cocos2d::CCObject*, bool)
  reverseObjects()
  stringAtIndex(unsigned int)
  virtual acceptVisitor(cocos2d::CCDataVisitor &)
  virtual copyWithZone(cocos2d::CCZone *)
}
class cocos2d::CCAtlasNode : cocos2d::CCNodeRGBA, cocos2d::CCTextureProtocol {
  CCAtlasNode()
  calculateMaxItems()
  create(char const*, unsigned int, unsigned int, unsigned int)
  draw()
  getBlendFunc()
  getColor()
  getQuadsToDraw()
  getTexture()
  getTextureAtlas()
  initWithTexture(cocos2d::CCTexture2D*, unsigned int, unsigned int, unsigned int)
  initWithTileFile(char const*, unsigned int, unsigned int, unsigned int)
  isOpacityModifyRGB()
  setBlendFunc(cocos2d::_ccBlendFunc)
  setColor(cocos2d::_ccColor3B const&)
  setIgnoreContentScaleFactor(bool)
  setOpacity(unsigned char)
  setOpacityModifyRGB(bool)
  setQuadsToDraw(unsigned int)
  setTexture(cocos2d::CCTexture2D*)
  setTextureAtlas(cocos2d::CCTextureAtlas*)
  updateAtlasValues()
  updateBlendFunc()
  updateOpacityModifyRGB()
  virtual draw(void)
  virtual getBlendFunc(void)
  virtual getColor(void)
  virtual getQuadsToDraw(void)
  virtual getTexture(void)
  virtual getTextureAtlas(void)
  virtual isOpacityModifyRGB(void)
  virtual setBlendFunc(cocos2d::_ccBlendFunc)
  virtual setColor(cocos2d::_ccColor3B const&)
  virtual setOpacity(uchar)
  virtual setOpacityModifyRGB(bool)
  virtual setQuadsToDraw(uint)
  virtual setTexture(cocos2d::CCTexture2D *)
  virtual setTextureAtlas(cocos2d::CCTextureAtlas *)
  virtual updateAtlasValues(void)
}
class cocos2d::CCAutoreleasePool : cocos2d::CCObject {
  CCAutoreleasePool()
  addObject(cocos2d::CCObject*)
  clear()
  removeObject(cocos2d::CCObject*)
}
class cocos2d::CCBezierBy : cocos2d::CCActionInterval {
  CCBezierBy()
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::_ccBezierConfig const&)
  initWithDuration(float, cocos2d::_ccBezierConfig const&)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCBezierTo : cocos2d::CCBezierBy {
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::_ccBezierConfig const&)
  initWithDuration(float, cocos2d::_ccBezierConfig const&)
  startWithTarget(cocos2d::CCNode*)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual startWithTarget(cocos2d::CCNode *)
}
class cocos2d::CCBlendProtocol {
}
class cocos2d::CCBlink : cocos2d::CCActionInterval {
  copyWithZone(cocos2d::CCZone*)
  create(float, unsigned int)
  initWithDuration(float, unsigned int)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  stop()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual stop(void)
  virtual update(float)
}
class cocos2d::CCBMFontConfiguration : cocos2d::CCObject {
  CCBMFontConfiguration()
  create(char const*)
  description()
  getCharacterSet()
  initWithFNTfile(char const*)
  parseCharacterDefinition(std::string, cocos2d::_BMFontDef*)
  parseCommonArguments(std::string)
  parseConfigFile(char const*)
  parseImageFileName(std::string, char const*)
  parseInfoArguments(std::string)
  parseKerningEntry(std::string)
  purgeFontDefDictionary()
  purgeKerningDictionary()
}
class cocos2d::CCBool : cocos2d::CCObject {
  acceptVisitor(cocos2d::CCDataVisitor&)
  create(bool)
  virtual acceptVisitor(cocos2d::CCDataVisitor &)
}
class cocos2d::CCCallFunc : cocos2d::CCActionInstant {
  CCCallFunc()
  copyWithZone(cocos2d::CCZone*)
  create(int)
  create(cocos2d::CCObject*, void (cocos2d::CCObject::*)())
  execute()
  initWithTarget(cocos2d::CCObject*)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual execute(void)
  virtual initWithTarget(cocos2d::CCObject *)
  virtual update(float)
}
class cocos2d::CCCallFuncN : cocos2d::CCCallFunc, cocos2d::TypeInfo {
  copyWithZone(cocos2d::CCZone*)
  create(int)
  create(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCNode*))
  execute()
  getClassTypeInfo()
  getClassTypeInfo()
  initWithTarget(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCNode*))
  virtual copyWithZone(cocos2d::CCZone *)
  virtual execute(void)
  virtual getClassTypeInfo(void)
  virtual initWithTarget(cocos2d::CCObject *,void (cocos2d::CCObject::*)(cocos2d::CCNode *))
}
class cocos2d::CCCallFuncND : cocos2d::CCCallFuncN {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCNode*, void*), void*)
  execute()
  getClassTypeInfo()
  getClassTypeInfo()
  initWithTarget(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCNode*, void*), void*)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual execute(void)
  virtual getClassTypeInfo(void)
  virtual initWithTarget(cocos2d::CCObject *,void (cocos2d::CCObject::*)(cocos2d::CCNode *,void *),void *)
}
class cocos2d::CCCallFuncO : cocos2d::CCCallFunc, cocos2d::TypeInfo {
  CCCallFuncO()
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*), cocos2d::CCObject*)
  execute()
  getClassTypeInfo()
  getClassTypeInfo()
  initWithTarget(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*), cocos2d::CCObject*)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual execute(void)
  virtual getClassTypeInfo(void)
  virtual initWithTarget(cocos2d::CCObject *,void (cocos2d::CCObject::*)(cocos2d::CCObject *),cocos2d::CCObject *)
}
class cocos2d::CCCamera : cocos2d::CCObject {
  CCCamera()
  description()
  getCenterXYZ(float*, float*, float*)
  getEyeXYZ(float*, float*, float*)
  getUpXYZ(float*, float*, float*)
  getZEye()
  init()
  locate()
  restore()
  setCenterXYZ(float, float, float)
  setEyeXYZ(float, float, float)
  setUpXYZ(float, float, float)
}
class cocos2d::CCCardinalSplineBy : cocos2d::CCCardinalSplineTo {
  CCCardinalSplineBy()
  create(float, cocos2d::CCPointArray*, float)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  updatePosition(cocos2d::CCPoint&)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual updatePosition(cocos2d::CCPoint &)
}
class cocos2d::CCCardinalSplineTo : cocos2d::CCActionInterval {
  CCCardinalSplineTo()
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::CCPointArray*, float)
  initWithDuration(float, cocos2d::CCPointArray*, float)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  update(float)
  updatePosition(cocos2d::CCPoint&)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
  virtual updatePosition(cocos2d::CCPoint &)
}
class cocos2d::CCCatmullRomBy : cocos2d::CCCardinalSplineBy {
  create(float, cocos2d::CCPointArray*)
  initWithDuration(float, cocos2d::CCPointArray*)
}
class cocos2d::CCCatmullRomTo : cocos2d::CCCardinalSplineTo {
  create(float, cocos2d::CCPointArray*)
  initWithDuration(float, cocos2d::CCPointArray*)
}
class cocos2d::CCClippingNode : cocos2d::CCNode {
  CCClippingNode()
  create(cocos2d::CCNode*)
  create()
  getAlphaThreshold()
  getStencil()
  init(cocos2d::CCNode*)
  init()
  isInverted()
  onEnter()
  onEnterTransitionDidFinish()
  onExit()
  onExitTransitionDidStart()
  setAlphaThreshold(float)
  setInverted(bool)
  setStencil(cocos2d::CCNode*)
  visit()
  virtual init(void)
  virtual init(cocos2d::CCNode *)
  virtual onEnter(void)
  virtual onEnterTransitionDidFinish(void)
  virtual onExit(void)
  virtual onExitTransitionDidStart(void)
  virtual visit(void)
}
class cocos2d::CCComponent : cocos2d::CCObject {
  CCComponent()
  create()
  getName()
  getOwner()
  init()
  isEnabled()
  onEnter()
  onExit()
  serialize(void*)
  setEnabled(bool)
  setName(char const*)
  setOwner(cocos2d::CCNode*)
  update(float)
  virtual init(void)
  virtual isEnabled(void)
  virtual onEnter(void)
  virtual onExit(void)
  virtual serialize(void *)
  virtual setEnabled(bool)
  virtual update(float)
}
class cocos2d::CCComponentContainer {
  CCComponentContainer(cocos2d::CCNode*)
  add(cocos2d::CCComponent*)
  alloc()
  get(char const*)
  isEmpty()
  remove(char const*)
  remove(cocos2d::CCComponent*)
  removeAll()
  visit(float)
  virtual add(cocos2d::CCComponent *)
  virtual get(char const*)
  virtual remove(char const*)
  virtual remove(cocos2d::CCComponent *)
  virtual removeAll(void)
  virtual visit(float)
}
class cocos2d::CCConfiguration : cocos2d::CCObject {
  CCConfiguration()
  checkForGLExtension(std::string const&)
  dumpInfo()
  gatherGPUInfo()
  getBool(char const*, bool)
  getCString(char const*, char const*)
  getMaxModelviewStackDepth()
  getMaxTextureSize()
  getMaxTextureUnits()
  getNumber(char const*, double)
  getObject(char const*)
  init()
  loadConfigFile(char const*)
  purgeConfiguration()
  setObject(char const*, cocos2d::CCObject*)
  sharedConfiguration()
  supportsBGRA8888()
  supportsDiscardFramebuffer()
  supportsNPOT()
  supportsPVRTC()
  supportsShareableVAO()
}
class cocos2d::CCCopying {
  copyWithZone(cocos2d::CCZone*)
  virtual copyWithZone(cocos2d::CCZone *)
}
class cocos2d::CCDataVisitor {
  visit(cocos2d::CCDictionary const*)
  visit(cocos2d::CCSet const*)
  visit(cocos2d::CCBool const*)
  visit(cocos2d::CCArray const*)
  visit(cocos2d::CCFloat const*)
  visit(cocos2d::CCDouble const*)
  visit(cocos2d::CCString const*)
  visit(cocos2d::CCInteger const*)
  virtual visit(cocos2d::CCBool const*)
  virtual visit(cocos2d::CCInteger const*)
  virtual visit(cocos2d::CCFloat const*)
  virtual visit(cocos2d::CCDouble const*)
  virtual visit(cocos2d::CCString const*)
  virtual visit(cocos2d::CCArray const*)
  virtual visit(cocos2d::CCDictionary const*)
  virtual visit(cocos2d::CCSet const*)
}
class cocos2d::CCDeccelAmplitude : cocos2d::CCActionInterval {
  create(cocos2d::CCAction*, float)
  initWithAction(cocos2d::CCAction*, float)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  update(float)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCDelayTime : cocos2d::CCActionInterval {
  copyWithZone(cocos2d::CCZone*)
  create(float)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCDictionary : cocos2d::CCObject {
  CCDictionary()
  acceptVisitor(cocos2d::CCDataVisitor&)
  allKeys()
  allKeysForObject(cocos2d::CCObject*)
  charForKey(std::string const&)
  copyWithZone(cocos2d::CCZone*)
  count()
  create()
  createWithContentsOfFile(char const*)
  createWithContentsOfFileThreadSafe(char const*)
  createWithDictionary(cocos2d::CCDictionary*)
  getFirstKey()
  objectForKey(int)
  objectForKey(std::string const&)
  randomObject()
  removeAllObjects()
  removeObjectForElememt(cocos2d::CCDictElement*)
  removeObjectForKey(int)
  removeObjectForKey(std::string const&)
  removeObjectsForKeys(cocos2d::CCArray*)
  setObject(cocos2d::CCObject*, int)
  setObject(cocos2d::CCObject*, std::string const&)
  setObjectUnSafe(cocos2d::CCObject*, int)
  setObjectUnSafe(cocos2d::CCObject*, std::string const&)
  valueForKey(int)
  valueForKey(std::string const&)
  writeToFile(char const*)
  virtual acceptVisitor(cocos2d::CCDataVisitor &)
  virtual copyWithZone(cocos2d::CCZone *)
}
class cocos2d::CCDictMaker : cocos2d::CCSAXDelegator {
  CCDictMaker()
  endElement(void*, char const*)
  startElement(void*, char const*, char const**)
  textHandler(void*, char const*, int)
  virtual endElement(void *,char const*)
  virtual startElement(void *,char const*,char const**)
  virtual textHandler(void *,char const*,int)
}
class cocos2d::CCDirector : cocos2d::CCObject, cocos2d::TypeInfo {
  CCDirector()
  calculateDeltaTime()
  calculateMPF()
  checkSceneReference()
  convertToGL(cocos2d::CCPoint const&)
  convertToUI(cocos2d::CCPoint const&)
  createStatsLabel()
  drawScene()
  end()
  getAccelerometer()
  getActionManager()
  getClassTypeInfo()
  getClassTypeInfo()
  getContentScaleFactor()
  getDelegate()
  getDeltaTime()
  getFPSImageData(unsigned char**, unsigned int*)
  getKeyboardDispatcher()
  getKeypadDispatcher()
  getMouseDispatcher()
  getNotificationNode()
  getSceneDelegate()
  getScheduler()
  getScreenBottom()
  getScreenLeft()
  getScreenRight()
  getScreenScaleFactor()
  getScreenScaleFactorH()
  getScreenScaleFactorMax()
  getScreenScaleFactorW()
  getScreenTop()
  getTouchDispatcher()
  getVisibleOrigin()
  getVisibleSize()
  getWinSize()
  getWinSizeInPixels()
  getZEye()
  init()
  levelForSceneInStack(cocos2d::CCScene*)
  pause()
  popScene()
  popSceneWithTransition(float, cocos2d::PopTransition)
  popToRootScene()
  popToSceneInStack(cocos2d::CCScene*)
  popToSceneStackLevel(int)
  purgeCachedData()
  purgeDirector()
  pushScene(cocos2d::CCScene*)
  removeStatsLabel()
  replaceScene(cocos2d::CCScene*)
  resetSmoothFixCounter()
  reshapeProjection(cocos2d::CCSize const&)
  resume()
  runWithScene(cocos2d::CCScene*)
  sceneCount()
  setAccelerometer(cocos2d::CCAccelerometer*)
  setActionManager(cocos2d::CCActionManager*)
  setAlphaBlending(bool)
  setContentScaleFactor(float)
  setDefaultValues()
  setDelegate(cocos2d::CCDirectorDelegate*)
  setDeltaTime(float)
  setDepthTest(bool)
  setGLDefaultValues()
  setKeyboardDispatcher(cocos2d::CCKeyboardDispatcher*)
  setKeypadDispatcher(cocos2d::CCKeypadDispatcher*)
  setMouseDispatcher(cocos2d::CCMouseDispatcher*)
  setNextDeltaTimeZero(bool)
  setNextScene()
  setNotificationNode(cocos2d::CCNode*)
  setOpenGLView(cocos2d::CCEGLView*)
  setProjection(cocos2d::ccDirectorProjection)
  setSceneDelegate(cocos2d::CCSceneDelegate*)
  setScheduler(cocos2d::CCScheduler*)
  setTouchDispatcher(cocos2d::CCTouchDispatcher*)
  setViewport()
  setupScreenScale(cocos2d::CCSize, cocos2d::CCSize, cocos2d::TextureQuality)
  sharedDirector()
  showStats()
  updateContentScale(cocos2d::TextureQuality)
  updateScreenScale(cocos2d::CCSize)
  willSwitchToScene(cocos2d::CCScene*)
  virtual getAccelerometer(void)
  virtual getActionManager(void)
  virtual getClassTypeInfo(void)
  virtual getDeltaTime(void)
  virtual getKeyboardDispatcher(void)
  virtual getKeypadDispatcher(void)
  virtual getMouseDispatcher(void)
  virtual getSceneDelegate(void)
  virtual getScheduler(void)
  virtual getTouchDispatcher(void)
  virtual init(void)
  virtual setAccelerometer(cocos2d::CCAccelerometer *)
  virtual setActionManager(cocos2d::CCActionManager *)
  virtual setKeyboardDispatcher(cocos2d::CCKeyboardDispatcher *)
  virtual setKeypadDispatcher(cocos2d::CCKeypadDispatcher *)
  virtual setMouseDispatcher(cocos2d::CCMouseDispatcher *)
  virtual setSceneDelegate(cocos2d::CCSceneDelegate *)
  virtual setScheduler(cocos2d::CCScheduler *)
  virtual setTouchDispatcher(cocos2d::CCTouchDispatcher *)
}
class cocos2d::CCDisplayLinkDirector : cocos2d::CCDirector {
  mainLoop()
  setAnimationInterval(double)
  startAnimation()
  stopAnimation()
  virtual mainLoop(void)
  virtual setAnimationInterval(double)
  virtual startAnimation(void)
  virtual stopAnimation(void)
}
class cocos2d::CCDrawNode : cocos2d::CCNodeRGBA {
  CCDrawNode()
  clear()
  create()
  draw()
  drawDot(cocos2d::CCPoint const&, float, cocos2d::_ccColor4F const&)
  drawPolygon(cocos2d::CCPoint*, unsigned int, cocos2d::_ccColor4F const&, float, cocos2d::_ccColor4F const&)
  drawSegment(cocos2d::CCPoint const&, cocos2d::CCPoint const&, float, cocos2d::_ccColor4F const&)
  ensureCapacity(unsigned int)
  getBlendFunc()
  init()
  listenBackToForeground(cocos2d::CCObject*)
  render()
  setBlendFunc(cocos2d::_ccBlendFunc const&)
  virtual draw(void)
  virtual init(void)
}
class cocos2d::CCEaseBackIn : cocos2d::CCActionEase {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCEaseBackInOut : cocos2d::CCActionEase {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCEaseBackOut : cocos2d::CCActionEase {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCEaseBounce : cocos2d::CCActionEase {
  bounceTime(float)
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*)
  reverse()
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
}
class cocos2d::CCEaseBounceIn : cocos2d::CCEaseBounce {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCEaseBounceInOut : cocos2d::CCEaseBounce {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCEaseBounceOut : cocos2d::CCEaseBounce {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCEaseElastic : cocos2d::CCActionEase {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*)
  create(cocos2d::CCActionInterval*, float)
  initWithAction(cocos2d::CCActionInterval*, float)
  reverse()
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
}
class cocos2d::CCEaseElasticIn : cocos2d::CCEaseElastic {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*)
  create(cocos2d::CCActionInterval*, float)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCEaseElasticInOut : cocos2d::CCEaseElastic {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*)
  create(cocos2d::CCActionInterval*, float)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCEaseElasticOut : cocos2d::CCEaseElastic {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*)
  create(cocos2d::CCActionInterval*, float)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCEaseExponentialIn : cocos2d::CCActionEase {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCEaseExponentialInOut : cocos2d::CCActionEase {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCEaseExponentialOut : cocos2d::CCActionEase {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCEaseIn : cocos2d::CCEaseRateAction {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*, float)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCEaseInOut : cocos2d::CCEaseRateAction {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*, float)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCEaseOut : cocos2d::CCEaseRateAction {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*, float)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCEaseRateAction : cocos2d::CCActionEase {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*, float)
  initWithAction(cocos2d::CCActionInterval*, float)
  reverse()
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
}
class cocos2d::CCEaseSineIn : cocos2d::CCActionEase {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCEaseSineInOut : cocos2d::CCActionEase {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCEaseSineOut : cocos2d::CCActionEase {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCEGLView : cocos2d::CCEGLViewProtocol {
  CCEGLView()
  end()
  isOpenGLReady()
  setIMEKeyboardState(bool)
  sharedOpenGLView()
  swapBuffers()
  virtual end(void)
  virtual isOpenGLReady(void)
  virtual otocol::getDesignResolutionSize(void)
  virtual otocol::getFrameSize(void)
  virtual otocol::getScissorRect(void)
  virtual otocol::getVisibleOrigin(void)
  virtual otocol::getVisibleSize(void)
  virtual otocol::handleTouchesBegin(int,int *,float *,float *)
  virtual otocol::handleTouchesCancel(int,int *,float *,float *)
  virtual otocol::handleTouchesEnd(int,int *,float *,float *)
  virtual otocol::handleTouchesMove(int,int *,float *,float *)
  virtual otocol::isScissorEnabled(void)
  virtual otocol::pollInputEvents(void)
  virtual otocol::setDesignResolutionSize(float,float,ResolutionPolicy)
  virtual otocol::setFrameSize(float,float)
  virtual otocol::setScissorInPoints(float,float,float,float)
  virtual otocol::setTouchDelegate(cocos2d::EGLTouchDelegate *)
  virtual otocol::setViewName(char const*)
  virtual otocol::setViewPortInPoints(float,float,float,float)
  virtual setIMEKeyboardState(bool)
  virtual swapBuffers(void)
}
class cocos2d::CCEGLViewProtocol {
  CCEGLViewProtocol()
  getDesignResolutionSize()
  getFrameSize()
  getScaleX()
  getScaleY()
  getScissorRect()
  getSetOfTouchesEndOrCancel(cocos2d::CCSet&, int, int*, float*, float*)
  getViewName()
  getViewPortRect()
  getVisibleOrigin()
  getVisibleSize()
  handleTouchesBegin(int, int*, float*, float*)
  handleTouchesCancel(int, int*, float*, float*)
  handleTouchesEnd(int, int*, float*, float*)
  handleTouchesMove(int, int*, float*, float*)
  isScissorEnabled()
  pollInputEvents()
  setDesignResolutionSize(float, float, ResolutionPolicy)
  setFrameSize(float, float)
  setScissorInPoints(float, float, float, float)
  setTouchDelegate(cocos2d::EGLTouchDelegate*)
  setViewName(char const*)
  setViewPortInPoints(float, float, float, float)
  updateDesignResolutionSize()
  virtual getDesignResolutionSize(void)
  virtual getFrameSize(void)
  virtual getScissorRect(void)
  virtual getVisibleOrigin(void)
  virtual getVisibleSize(void)
  virtual handleTouchesBegin(int,int *,float *,float *)
  virtual handleTouchesCancel(int,int *,float *,float *)
  virtual handleTouchesEnd(int,int *,float *,float *)
  virtual handleTouchesMove(int,int *,float *,float *)
  virtual isScissorEnabled(void)
  virtual pollInputEvents(void)
  virtual setDesignResolutionSize(float,float,ResolutionPolicy)
  virtual setFrameSize(float,float)
  virtual setScissorInPoints(float,float,float,float)
  virtual setTouchDelegate(cocos2d::EGLTouchDelegate *)
  virtual setViewName(char const*)
  virtual setViewPortInPoints(float,float,float,float)
}
class cocos2d::CCFadeIn : cocos2d::CCActionInterval {
  copyWithZone(cocos2d::CCZone*)
  create(float)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCFadeOut : cocos2d::CCActionInterval {
  copyWithZone(cocos2d::CCZone*)
  create(float)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCFadeOutBLTiles : cocos2d::CCFadeOutTRTiles {
  create(float, cocos2d::CCSize const&)
  testFunc(cocos2d::CCSize const&, float)
  virtual testFunc(cocos2d::CCSize const&,float)
}
class cocos2d::CCFadeOutDownTiles : cocos2d::CCFadeOutUpTiles {
  create(float, cocos2d::CCSize const&)
  testFunc(cocos2d::CCSize const&, float)
  virtual testFunc(cocos2d::CCSize const&,float)
}
class cocos2d::CCFadeOutTRTiles : cocos2d::CCTiledGrid3DAction {
  create(float, cocos2d::CCSize const&)
  testFunc(cocos2d::CCSize const&, float)
  transformTile(cocos2d::CCPoint const&, float)
  turnOffTile(cocos2d::CCPoint const&)
  turnOnTile(cocos2d::CCPoint const&)
  update(float)
  virtual testFunc(cocos2d::CCSize const&,float)
  virtual transformTile(cocos2d::CCPoint const&,float)
  virtual update(float)
}
class cocos2d::CCFadeOutUpTiles : cocos2d::CCFadeOutTRTiles {
  create(float, cocos2d::CCSize const&)
  testFunc(cocos2d::CCSize const&, float)
  transformTile(cocos2d::CCPoint const&, float)
  virtual testFunc(cocos2d::CCSize const&,float)
  virtual transformTile(cocos2d::CCPoint const&,float)
}
class cocos2d::CCFadeTo : cocos2d::CCActionInterval {
  copyWithZone(cocos2d::CCZone*)
  create(float, unsigned char)
  initWithDuration(float, unsigned char)
  startWithTarget(cocos2d::CCNode*)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCFileUtils : cocos2d::TypeInfo {
  CCFileUtils()
  addSearchPath(char const*)
  addSearchResolutionsOrder(char const*)
  addSuffix(std::string, std::string)
  createCCArrayWithContentsOfFile(std::string const&)
  createCCDictionaryWithContentsOfFile(std::string const&)
  fullPathForFilename(char const*, bool)
  fullPathFromRelativeFile(char const*, char const*)
  getClassTypeInfo()
  getClassTypeInfo()
  getFileData(char const*, char const*, unsigned long*)
  getFileDataFromZip(char const*, char const*, unsigned long*)
  getFullPathForDirectoryAndFilename(std::string const&, std::string const&)
  getNewFilename(char const*)
  getPathForFilename(std::string const&, std::string const&, std::string const&)
  getSearchPaths()
  getSearchResolutionsOrder()
  getWritablePath2()
  init()
  isAbsolutePath(std::string const&)
  isPopupNotify()
  loadFilenameLookupDictionaryFromFile(char const*)
  purgeCachedEntries()
  purgeFileUtils()
  removeAllPaths()
  removeFullPath(char const*)
  removeSearchPath(char const*)
  setFilenameLookupDictionary(cocos2d::CCDictionary*)
  setPopupNotify(bool)
  setSearchPaths(std::vector<std::string, std::allocator<std::string > > const&)
  setSearchResolutionsOrder(std::vector<std::string, std::allocator<std::string > > const&)
  sharedFileUtils()
  shouldUseHD()
  writeToFile(cocos2d::CCDictionary*, std::string const&)
  virtual addSearchPath(char const*)
  virtual addSearchResolutionsOrder(char const*)
  virtual addSuffix(std::string,std::string)
  virtual createCCArrayWithContentsOfFile(std::string const&)
  virtual createCCDictionaryWithContentsOfFile(std::string const&)
  virtual fullPathForFilename(char const*,bool)
  virtual fullPathFromRelativeFile(char const*,char const*)
  virtual getClassTypeInfo(void)
  virtual getFileData(char const*,char const*,ulong *)
  virtual getFileDataFromZip(char const*,char const*,ulong *)
  virtual getFullPathForDirectoryAndFilename(std::string const&,std::string const&)
  virtual getNewFilename(char const*)
  virtual getPathForFilename(std::string const&,std::string const&,std::string const&)
  virtual getSearchPaths(void)
  virtual getSearchResolutionsOrder(void)
  virtual getWritablePath2(void)
  virtual init(void)
  virtual isAbsolutePath(std::string const&)
  virtual isPopupNotify(void)
  virtual loadFilenameLookupDictionaryFromFile(char const*)
  virtual purgeCachedEntries(void)
  virtual removeFullPath(char const*)
  virtual removeSearchPath(char const*)
  virtual setFilenameLookupDictionary(cocos2d::CCDictionary *)
  virtual setPopupNotify(bool)
  virtual setSearchPaths(std::vector<std::string,std::allocator<std::string>> const&)
  virtual setSearchResolutionsOrder(std::vector<std::string,std::allocator<std::string>> const&)
  virtual shouldUseHD(void)
  virtual writeToFile(cocos2d::CCDictionary *,std::string const&)
}
class cocos2d::CCFileUtilsAndroid : cocos2d::CCFileUtils {
  CCFileUtilsAndroid()
  doGetFileData(char const*, char const*, unsigned long*, bool)
  getFileData(char const*, char const*, unsigned long*)
  getFileDataForAsync(char const*, char const*, unsigned long*)
  getWritablePath()
  init()
  isAbsolutePath(std::string const&)
  isFileExist(std::string const&)
  virtual getFileData(char const*,char const*,ulong *)
  virtual getWritablePath(void)
  virtual init(void)
  virtual isAbsolutePath(std::string const&)
  virtual isFileExist(std::string const&)
}
class cocos2d::CCFiniteTimeAction : cocos2d::CCAction {
  reverse()
  virtual reverse(void)
}
class cocos2d::CCFlipX : cocos2d::CCActionInstant {
  copyWithZone(cocos2d::CCZone*)
  create(bool)
  initWithFlipX(bool)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCFlipX3D : cocos2d::CCGrid3DAction {
  copyWithZone(cocos2d::CCZone*)
  create(float)
  initWithDuration(float)
  initWithSize(cocos2d::CCSize const&, float)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual initWithDuration(float)
  virtual initWithSize(cocos2d::CCSize const&,float)
  virtual update(float)
}
class cocos2d::CCFlipY : cocos2d::CCActionInstant {
  copyWithZone(cocos2d::CCZone*)
  create(bool)
  initWithFlipY(bool)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCFlipY3D : cocos2d::CCFlipX3D {
  copyWithZone(cocos2d::CCZone*)
  create(float)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual update(float)
}
class cocos2d::CCFollow : cocos2d::CCAction {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCNode*, cocos2d::CCRect const&)
  initWithTarget(cocos2d::CCNode*, cocos2d::CCRect const&)
  isDone()
  step(float)
  stop()
  virtual copyWithZone(cocos2d::CCZone *)
  virtual isDone(void)
  virtual step(float)
  virtual stop(void)
}
class cocos2d::CCGLProgram : cocos2d::CCObject {
  CCGLProgram()
  addAttribute(char const*, unsigned int)
  compileShader(unsigned int*, unsigned int, char const*)
  description()
  fragmentShaderLog()
  getUniformLocationForName(char const*)
  initWithVertexShaderByteArray(char const*, char const*)
  initWithVertexShaderFilename(char const*, char const*)
  link()
  logForOpenGLObject(unsigned int, void (*)(unsigned int, unsigned int, int*), void (*)(unsigned int, int, int*, char*))
  programLog()
  reset()
  setUniformLocationWith1f(int, float)
  setUniformLocationWith1i(int, int)
  setUniformLocationWith2f(int, float, float)
  setUniformLocationWith2fv(int, float*, unsigned int)
  setUniformLocationWith2i(int, int, int)
  setUniformLocationWith2iv(int, int*, unsigned int)
  setUniformLocationWith3f(int, float, float, float)
  setUniformLocationWith3fv(int, float*, unsigned int)
  setUniformLocationWith3i(int, int, int, int)
  setUniformLocationWith3iv(int, int*, unsigned int)
  setUniformLocationWith4f(int, float, float, float, float)
  setUniformLocationWith4fv(int, float*, unsigned int)
  setUniformLocationWith4i(int, int, int, int, int)
  setUniformLocationWith4iv(int, int*, unsigned int)
  setUniformLocationWithMatrix3fv(int, float*, unsigned int)
  setUniformLocationWithMatrix4fv(int, float*, unsigned int)
  setUniformsForBuiltins()
  updateUniformLocation(int, void*, unsigned int)
  updateUniforms()
  use()
  vertexShaderLog()
}
class cocos2d::CCGrabber : cocos2d::CCObject {
  CCGrabber()
  afterRender(cocos2d::CCTexture2D*)
  beforeRender(cocos2d::CCTexture2D*)
  grab(cocos2d::CCTexture2D*)
}
class cocos2d::CCGrid3D : cocos2d::CCGridBase {
  CCGrid3D()
  blit()
  calculateVertexPoints()
  create(cocos2d::CCSize const&)
  create(cocos2d::CCSize const&, cocos2d::CCTexture2D*, bool)
  originalVertex(cocos2d::CCPoint const&)
  reuse()
  setVertex(cocos2d::CCPoint const&, cocos2d::_ccVertex3F const&)
  vertex(cocos2d::CCPoint const&)
  virtual blit(void)
  virtual calculateVertexPoints(void)
  virtual reuse(void)
}
class cocos2d::CCGrid3DAction : cocos2d::CCGridAction {
  CCGrid3DAction()
  getGrid()
  originalVertex(cocos2d::CCPoint const&)
  setVertex(cocos2d::CCPoint const&, cocos2d::_ccVertex3F const&)
  vertex(cocos2d::CCPoint const&)
  virtual getGrid(void)
}
class cocos2d::CCGridAction : cocos2d::CCActionInterval {
  CCGridAction()
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::CCSize const&)
  getGrid()
  initWithDuration(float, cocos2d::CCSize const&)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual getGrid(void)
  virtual initWithDuration(float,cocos2d::CCSize const&)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
}
class cocos2d::CCGridBase : cocos2d::CCObject {
  CCGridBase()
  afterDraw(cocos2d::CCNode*)
  beforeDraw()
  blit()
  calculateVertexPoints()
  create(cocos2d::CCSize const&)
  create(cocos2d::CCSize const&, cocos2d::CCTexture2D*, bool)
  initWithSize(cocos2d::CCSize const&)
  initWithSize(cocos2d::CCSize const&, cocos2d::CCTexture2D*, bool)
  reuse()
  set2DProjection()
  setActive(bool)
  setTextureFlipped(bool)
  virtual blit(void)
  virtual calculateVertexPoints(void)
  virtual reuse(void)
}
class cocos2d::CCHide : cocos2d::CCActionInstant {
  copyWithZone(cocos2d::CCZone*)
  create()
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCImage : cocos2d::CCObject {
  CCImage()
  _initWithJpgData(void*, int)
  _initWithPngData(void*, int)
  _initWithRawData(void*, int, int, int, int, bool)
  _initWithTiffData(void*, int)
  _initWithWebpData(void*, int)
  _saveImageToJPG(char const*)
  _saveImageToPNG(char const*, bool)
  initWithImageData(void*, int, cocos2d::CCImage::EImageFormat, int, int, int)
  initWithImageFile(char const*, cocos2d::CCImage::EImageFormat)
  initWithImageFileThreadSafe(char const*, cocos2d::CCImage::EImageFormat)
  initWithString(char const*, int, int, cocos2d::CCImage::ETextAlign, char const*, int)
  initWithStringShadowStroke(char const*, int, int, cocos2d::CCImage::ETextAlign, char const*, int, float, float, float, bool, float, float, float, float, bool, float, float, float, float)
  saveToFile(char const*, bool)
}
class cocos2d::CCIMEDelegate {
  CCIMEDelegate()
  attachWithIME()
  canAttachWithIME()
  canDetachWithIME()
  deleteBackward()
  detachWithIME()
  didAttachWithIME()
  didDetachWithIME()
  getContentText()
  insertText(char const*, int)
  keyboardDidHide(cocos2d::CCIMEKeyboardNotificationInfo&)
  keyboardDidShow(cocos2d::CCIMEKeyboardNotificationInfo&)
  keyboardWillHide(cocos2d::CCIMEKeyboardNotificationInfo&)
  keyboardWillShow(cocos2d::CCIMEKeyboardNotificationInfo&)
  virtual attachWithIME(void)
  virtual canAttachWithIME(void)
  virtual canDetachWithIME(void)
  virtual deleteBackward(void)
  virtual detachWithIME(void)
  virtual didAttachWithIME(void)
  virtual didDetachWithIME(void)
  virtual getContentText(void)
  virtual insertText(char const*,int)
  virtual keyboardDidHide(cocos2d::CCIMEKeyboardNotificationInfo &)
  virtual keyboardDidShow(cocos2d::CCIMEKeyboardNotificationInfo &)
  virtual keyboardWillHide(cocos2d::CCIMEKeyboardNotificationInfo &)
  virtual keyboardWillShow(cocos2d::CCIMEKeyboardNotificationInfo &)
}
class cocos2d::CCInteger : cocos2d::CCObject {
  acceptVisitor(cocos2d::CCDataVisitor&)
  create(int)
  virtual acceptVisitor(cocos2d::CCDataVisitor &)
}
class cocos2d::CCJumpBy : cocos2d::CCActionInterval {
  CCJumpBy()
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::CCPoint const&, float, unsigned int)
  initWithDuration(float, cocos2d::CCPoint const&, float, unsigned int)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCJumpTiles3D : cocos2d::CCTiledGrid3DAction {
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::CCSize const&, unsigned int, float)
  initWithDuration(float, cocos2d::CCSize const&, unsigned int, float)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual update(float)
}
class cocos2d::CCJumpTo : cocos2d::CCJumpBy {
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::CCPoint const&, float, int)
  startWithTarget(cocos2d::CCNode*)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual startWithTarget(cocos2d::CCNode *)
}
class cocos2d::CCKeyboardDelegate {
  keyDown(cocos2d::enumKeyCodes)
  keyUp(cocos2d::enumKeyCodes)
  virtual keyDown(cocos2d::enumKeyCodes)
  virtual keyUp(cocos2d::enumKeyCodes)
}
class cocos2d::CCKeyboardDispatcher : cocos2d::CCObject {
  CCKeyboardDispatcher()
  addDelegate(cocos2d::CCKeyboardDelegate*)
  convertKeyCode(cocos2d::enumKeyCodes)
  dispatchKeyboardMSG(cocos2d::enumKeyCodes, bool)
  forceAddDelegate(cocos2d::CCKeyboardDelegate*)
  forceRemoveDelegate(cocos2d::CCKeyboardDelegate*)
  keyToString(cocos2d::enumKeyCodes)
  removeDelegate(cocos2d::CCKeyboardDelegate*)
  updateModifierKeys(bool, bool, bool, bool)
}
class cocos2d::CCKeyboardHandler : cocos2d::CCObject {
  getDelegate()
  handlerWithDelegate(cocos2d::CCKeyboardDelegate*)
  initWithDelegate(cocos2d::CCKeyboardDelegate*)
  setDelegate(cocos2d::CCKeyboardDelegate*)
  virtual initWithDelegate(cocos2d::CCKeyboardDelegate *)
}
class cocos2d::CCKeypadDelegate {
  keyBackClicked()
  keyMenuClicked()
  virtual keyBackClicked(void)
  virtual keyMenuClicked(void)
}
class cocos2d::CCKeypadDispatcher : cocos2d::CCObject {
  CCKeypadDispatcher()
  addDelegate(cocos2d::CCKeypadDelegate*)
  dispatchKeypadMSG(cocos2d::ccKeypadMSGType)
  forceAddDelegate(cocos2d::CCKeypadDelegate*)
  forceRemoveDelegate(cocos2d::CCKeypadDelegate*)
  removeDelegate(cocos2d::CCKeypadDelegate*)
}
class cocos2d::CCKeypadHandler : cocos2d::CCObject {
  getDelegate()
  handlerWithDelegate(cocos2d::CCKeypadDelegate*)
  initWithDelegate(cocos2d::CCKeypadDelegate*)
  setDelegate(cocos2d::CCKeypadDelegate*)
  virtual initWithDelegate(cocos2d::CCKeypadDelegate *)
}
class cocos2d::CCLabelAtlas : cocos2d::CCAtlasNode, cocos2d::CCLabelProtocol {
  create(char const*, char const*)
  create(char const*, char const*, unsigned int, unsigned int, unsigned int)
  getString()
  initWithString(char const*, cocos2d::CCTexture2D*, unsigned int, unsigned int, unsigned int)
  initWithString(char const*, char const*)
  initWithString(char const*, char const*, unsigned int, unsigned int, unsigned int)
  setString(char const*)
  updateAtlasValues()
  virtual getString(void)
  virtual setString(char const*)
  virtual updateAtlasValues(void)
}
class cocos2d::CCLabelBMFont : cocos2d::CCSpriteBatchNode, cocos2d::CCLabelProtocol, cocos2d::CCRGBAProtocol {
  CCLabelBMFont()
  create(char const*, char const*)
  create(char const*, char const*, float)
  create(char const*, char const*, float, cocos2d::CCTextAlignment)
  create(char const*, char const*, float, cocos2d::CCTextAlignment, cocos2d::CCPoint)
  create()
  createBatched(char const*, char const*, cocos2d::CCArray*)
  createFontChars()
  getColor()
  getConfiguration()
  getDisplayedColor()
  getDisplayedOpacity()
  getFntFile()
  getLetterPosXLeft(cocos2d::CCSprite*)
  getLetterPosXRight(cocos2d::CCSprite*)
  getOpacity()
  getString()
  init()
  initWithString(char const*, char const*, float, cocos2d::CCTextAlignment, cocos2d::CCPoint)
  isCascadeColorEnabled()
  isCascadeOpacityEnabled()
  isOpacityModifyRGB()
  kerningAmountForFirst(unsigned short, unsigned short)
  limitLabelWidth(float, float, float)
  purgeCachedData()
  setAlignment(cocos2d::CCTextAlignment)
  setAnchorPoint(cocos2d::CCPoint const&)
  setCString(char const*)
  setCascadeColorEnabled(bool)
  setCascadeOpacityEnabled(bool)
  setColor(cocos2d::_ccColor3B const&)
  setFntFile(char const*)
  setLineBreakWithoutSpace(bool)
  setOpacity(unsigned char)
  setOpacityModifyRGB(bool)
  setScale(float)
  setScaleX(float)
  setScaleY(float)
  setString(char const*)
  setString(char const*, bool)
  setString(unsigned short*, bool)
  setWidth(float)
  updateDisplayedColor(cocos2d::_ccColor3B const&)
  updateDisplayedOpacity(unsigned char)
  updateLabel()
  virtual getColor(void)
  virtual getDisplayedColor(void)
  virtual getDisplayedOpacity(void)
  virtual getOpacity(void)
  virtual getString(void)
  virtual init(void)
  virtual isCascadeColorEnabled(void)
  virtual isCascadeOpacityEnabled(void)
  virtual isOpacityModifyRGB(void)
  virtual setAlignment(cocos2d::CCTextAlignment)
  virtual setAnchorPoint(cocos2d::CCPoint const&)
  virtual setCString(char const*)
  virtual setCascadeColorEnabled(bool)
  virtual setCascadeOpacityEnabled(bool)
  virtual setColor(cocos2d::_ccColor3B const&)
  virtual setLineBreakWithoutSpace(bool)
  virtual setOpacity(uchar)
  virtual setOpacityModifyRGB(bool)
  virtual setScale(float)
  virtual setScaleX(float)
  virtual setScaleY(float)
  virtual setString(char const*)
  virtual setString(char const*,bool)
  virtual setString(ushort *,bool)
  virtual setWidth(float)
  virtual updateDisplayedColor(cocos2d::_ccColor3B const&)
  virtual updateDisplayedOpacity(uchar)
  virtual updateLabel(void)
}
class cocos2d::CCLabelProtocol {
}
class cocos2d::CCLabelTTF : cocos2d::CCSprite, cocos2d::CCLabelProtocol {
  CCLabelTTF()
  _prepareTextDefinition(bool)
  _updateWithTextDefinition(cocos2d::_ccFontDefinition&, bool)
  create(char const*, char const*, float)
  create(char const*, char const*, float, cocos2d::CCSize const&, cocos2d::CCTextAlignment)
  create(char const*, char const*, float, cocos2d::CCSize const&, cocos2d::CCTextAlignment, cocos2d::CCVerticalTextAlignment)
  create()
  createWithFontDefinition(char const*, cocos2d::_ccFontDefinition&)
  description()
  disableShadow(bool)
  disableStroke(bool)
  enableShadow(cocos2d::CCSize const&, float, float, bool)
  enableStroke(cocos2d::_ccColor3B const&, float, bool)
  getDimensions()
  getFontName()
  getFontSize()
  getHorizontalAlignment()
  getString()
  getTextDefinition()
  getVerticalAlignment()
  init()
  initWithString(char const*, char const*, float)
  initWithString(char const*, char const*, float, cocos2d::CCSize const&, cocos2d::CCTextAlignment)
  initWithString(char const*, char const*, float, cocos2d::CCSize const&, cocos2d::CCTextAlignment, cocos2d::CCVerticalTextAlignment)
  initWithStringAndTextDefinition(char const*, cocos2d::_ccFontDefinition&)
  setDimensions(cocos2d::CCSize const&)
  setFontFillColor(cocos2d::_ccColor3B const&, bool)
  setFontName(char const*)
  setFontSize(float)
  setHorizontalAlignment(cocos2d::CCTextAlignment)
  setString(char const*)
  setTextDefinition(cocos2d::_ccFontDefinition*)
  setVerticalAlignment(cocos2d::CCVerticalTextAlignment)
  updateTexture()
  virtual getString(void)
  virtual init(void)
  virtual setString(char const*)
}
class cocos2d::CCLayer : cocos2d::CCNode, cocos2d::CCTouchDelegate, cocos2d::CCAccelerometerDelegate, cocos2d::CCKeypadDelegate, cocos2d::CCKeyboardDelegate, cocos2d::CCMouseDelegate {
  CCLayer()
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchesBegan(cocos2d::CCSet*, cocos2d::CCEvent*)
  ccTouchesCancelled(cocos2d::CCSet*, cocos2d::CCEvent*)
  ccTouchesEnded(cocos2d::CCSet*, cocos2d::CCEvent*)
  ccTouchesMoved(cocos2d::CCSet*, cocos2d::CCEvent*)
  create()
  didAccelerate(cocos2d::CCAcceleration*)
  excuteScriptTouchHandler(int, cocos2d::CCSet*)
  excuteScriptTouchHandler(int, cocos2d::CCTouch*)
  getTouchMode()
  getTouchPriority()
  init()
  isAccelerometerEnabled()
  isKeyboardEnabled()
  isKeypadEnabled()
  isMouseEnabled()
  isTouchEnabled()
  keyBackClicked()
  keyDown(cocos2d::enumKeyCodes)
  keyMenuClicked()
  onEnter()
  onEnterTransitionDidFinish()
  onExit()
  registerScriptAccelerateHandler(int)
  registerScriptKeypadHandler(int)
  registerScriptTouchHandler(int, bool, int, bool)
  registerWithTouchDispatcher()
  setAccelerometerEnabled(bool)
  setAccelerometerInterval(double)
  setKeyboardEnabled(bool)
  setKeypadEnabled(bool)
  setMouseEnabled(bool)
  setTouchEnabled(bool)
  setTouchMode(cocos2d::ccTouchesMode)
  setTouchPriority(int)
  unregisterScriptAccelerateHandler()
  unregisterScriptKeypadHandler()
  unregisterScriptTouchHandler()
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchesBegan(cocos2d::CCSet *,cocos2d::CCEvent *)
  virtual ccTouchesCancelled(cocos2d::CCSet *,cocos2d::CCEvent *)
  virtual ccTouchesEnded(cocos2d::CCSet *,cocos2d::CCEvent *)
  virtual ccTouchesMoved(cocos2d::CCSet *,cocos2d::CCEvent *)
  virtual didAccelerate(cocos2d::CCAcceleration *)
  virtual getTouchMode(void)
  virtual getTouchPriority(void)
  virtual init(void)
  virtual isAccelerometerEnabled(void)
  virtual isKeyboardEnabled(void)
  virtual isKeypadEnabled(void)
  virtual isMouseEnabled(void)
  virtual isTouchEnabled(void)
  virtual keyBackClicked(void)
  virtual keyDown(cocos2d::enumKeyCodes)
  virtual keyMenuClicked(void)
  virtual onEnter(void)
  virtual onEnterTransitionDidFinish(void)
  virtual onExit(void)
  virtual registerScriptTouchHandler(int,bool,int,bool)
  virtual registerWithTouchDispatcher(void)
  virtual setAccelerometerEnabled(bool)
  virtual setAccelerometerInterval(double)
  virtual setKeyboardEnabled(bool)
  virtual setKeypadEnabled(bool)
  virtual setMouseEnabled(bool)
  virtual setTouchEnabled(bool)
  virtual setTouchMode(cocos2d::ccTouchesMode)
  virtual setTouchPriority(int)
  virtual unregisterScriptTouchHandler(void)
}
class cocos2d::CCLayerColor : cocos2d::CCLayerRGBA, cocos2d::CCBlendProtocol {
  CCLayerColor()
  changeHeight(float)
  changeWidth(float)
  changeWidthAndHeight(float, float)
  create(cocos2d::_ccColor4B const&)
  create(cocos2d::_ccColor4B const&, float, float)
  create()
  draw()
  getBlendFunc()
  init()
  initWithColor(cocos2d::_ccColor4B const&)
  initWithColor(cocos2d::_ccColor4B const&, float, float)
  setBlendFunc(cocos2d::_ccBlendFunc)
  setColor(cocos2d::_ccColor3B const&)
  setContentSize(cocos2d::CCSize const&)
  setOpacity(unsigned char)
  updateColor()
  virtual draw(void)
  virtual getBlendFunc(void)
  virtual init(void)
  virtual initWithColor(cocos2d::_ccColor4B const&,float,float)
  virtual initWithColor(cocos2d::_ccColor4B const&)
  virtual setBlendFunc(cocos2d::_ccBlendFunc)
  virtual setColor(cocos2d::_ccColor3B const&)
  virtual setContentSize(cocos2d::CCSize const&)
  virtual setOpacity(uchar)
  virtual updateColor(void)
}
class cocos2d::CCLayerGradient : cocos2d::CCLayerColor {
  CCLayerGradient()
  create(cocos2d::_ccColor4B const&, cocos2d::_ccColor4B const&)
  create(cocos2d::_ccColor4B const&, cocos2d::_ccColor4B const&, cocos2d::CCPoint const&)
  create()
  getEndColor()
  getEndOpacity()
  getStartColor()
  getStartOpacity()
  getVector()
  init()
  initWithColor(cocos2d::_ccColor4B const&, cocos2d::_ccColor4B const&)
  initWithColor(cocos2d::_ccColor4B const&, cocos2d::_ccColor4B const&, cocos2d::CCPoint const&)
  isCompressedInterpolation()
  setCompressedInterpolation(bool)
  setEndColor(cocos2d::_ccColor3B const&)
  setEndOpacity(unsigned char)
  setStartColor(cocos2d::_ccColor3B const&)
  setStartOpacity(unsigned char)
  setVector(cocos2d::CCPoint const&)
  updateColor()
  virtual getEndColor(void)
  virtual getEndOpacity(void)
  virtual getStartColor(void)
  virtual getStartOpacity(void)
  virtual getVector(void)
  virtual init(void)
  virtual initWithColor(cocos2d::_ccColor4B const&,cocos2d::_ccColor4B const&)
  virtual initWithColor(cocos2d::_ccColor4B const&,cocos2d::_ccColor4B const&,cocos2d::CCPoint const&)
  virtual isCompressedInterpolation(void)
  virtual setCompressedInterpolation(bool)
  virtual setEndColor(cocos2d::_ccColor3B const&)
  virtual setEndOpacity(uchar)
  virtual setStartColor(cocos2d::_ccColor3B const&)
  virtual setStartOpacity(uchar)
  virtual setVector(cocos2d::CCPoint const&)
  virtual updateColor(void)
}
class cocos2d::CCLayerMultiplex : cocos2d::CCLayer {
  CCLayerMultiplex()
  addLayer(cocos2d::CCLayer*)
  create(cocos2d::CCLayer*, ...)
  create()
  createWithArray(cocos2d::CCArray*)
  createWithLayer(cocos2d::CCLayer*)
  initWithArray(cocos2d::CCArray*)
  initWithLayers(cocos2d::CCLayer*, std::__va_list)
  switchTo(unsigned int)
  switchToAndReleaseMe(unsigned int)
}
class cocos2d::CCLayerRGBA : cocos2d::CCLayer, cocos2d::CCRGBAProtocol {
  CCLayerRGBA()
  getColor()
  getDisplayedColor()
  getDisplayedOpacity()
  getOpacity()
  init()
  isCascadeColorEnabled()
  isCascadeOpacityEnabled()
  isOpacityModifyRGB()
  setCascadeColorEnabled(bool)
  setCascadeOpacityEnabled(bool)
  setColor(cocos2d::_ccColor3B const&)
  setOpacity(unsigned char)
  setOpacityModifyRGB(bool)
  updateDisplayedColor(cocos2d::_ccColor3B const&)
  updateDisplayedOpacity(unsigned char)
  virtual getColor(void)
  virtual getDisplayedColor(void)
  virtual getDisplayedOpacity(void)
  virtual getOpacity(void)
  virtual init(void)
  virtual isCascadeColorEnabled(void)
  virtual isCascadeOpacityEnabled(void)
  virtual isOpacityModifyRGB(void)
  virtual setCascadeColorEnabled(bool)
  virtual setCascadeOpacityEnabled(bool)
  virtual setColor(cocos2d::_ccColor3B const&)
  virtual setOpacity(uchar)
  virtual setOpacityModifyRGB(bool)
  virtual updateDisplayedColor(cocos2d::_ccColor3B const&)
  virtual updateDisplayedOpacity(uchar)
}
class cocos2d::CCLens3D : cocos2d::CCGrid3DAction {
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::CCSize const&, cocos2d::CCPoint const&, float)
  initWithDuration(float, cocos2d::CCSize const&, cocos2d::CCPoint const&, float)
  setPosition(cocos2d::CCPoint const&)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual update(float)
}
class cocos2d::CCLightning : cocos2d::CCNode, cocos2d::CCRGBAProtocol {
  CCLightning()
  draw()
  getColor()
  getDisplayedColor()
  getDisplayedOpacity()
  getOpacity()
  initWithStrikePoint(cocos2d::CCPoint)
  initWithStrikePoint(cocos2d::CCPoint, cocos2d::CCPoint, float)
  isCascadeColorEnabled()
  isCascadeOpacityEnabled()
  isOpacityModifyRGB()
  lightningWithStrikePoint(cocos2d::CCPoint)
  lightningWithStrikePoint(cocos2d::CCPoint, cocos2d::CCPoint, float)
  setCascadeColorEnabled(bool)
  setCascadeOpacityEnabled(bool)
  setColor(cocos2d::_ccColor3B const&)
  setOpacity(unsigned char)
  setOpacityModifyRGB(bool)
  strike()
  strikeFinished()
  strikeRandom()
  strikeWithSeed(unsigned long)
  updateDisplayedColor(cocos2d::_ccColor3B const&)
  updateDisplayedOpacity(unsigned char)
  virtual draw(void)
  virtual getColor(void)
  virtual getDisplayedColor(void)
  virtual getDisplayedOpacity(void)
  virtual getOpacity(void)
  virtual isCascadeColorEnabled(void)
  virtual isCascadeOpacityEnabled(void)
  virtual isOpacityModifyRGB(void)
  virtual setCascadeColorEnabled(bool)
  virtual setCascadeOpacityEnabled(bool)
  virtual setColor(cocos2d::_ccColor3B const&)
  virtual setOpacity(uchar)
  virtual setOpacityModifyRGB(bool)
  virtual updateDisplayedColor(cocos2d::_ccColor3B const&)
  virtual updateDisplayedOpacity(uchar)
}
class cocos2d::CCLiquid : cocos2d::CCGrid3DAction {
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::CCSize const&, unsigned int, float)
  initWithDuration(float, cocos2d::CCSize const&, unsigned int, float)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual update(float)
}
class cocos2d::CCMenu : cocos2d::CCLayerRGBA {
  addChild(cocos2d::CCNode*)
  addChild(cocos2d::CCNode*, int)
  addChild(cocos2d::CCNode*, int, int)
  alignItemsHorizontally()
  alignItemsHorizontallyWithPadding(float)
  alignItemsInColumns(unsigned int, std::__va_list)
  alignItemsInColumns(unsigned int, ...)
  alignItemsInColumnsWithArray(cocos2d::CCArray*)
  alignItemsInRows(unsigned int, std::__va_list)
  alignItemsInRows(unsigned int, ...)
  alignItemsInRowsWithArray(cocos2d::CCArray*)
  alignItemsVertically()
  alignItemsVerticallyWithPadding(float)
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create(cocos2d::CCMenuItem*, ...)
  create()
  createWithArray(cocos2d::CCArray*)
  createWithItem(cocos2d::CCMenuItem*)
  createWithItems(cocos2d::CCMenuItem*, std::__va_list)
  init()
  initWithArray(cocos2d::CCArray*)
  isEnabled()
  isOpacityModifyRGB()
  itemForTouch(cocos2d::CCTouch*)
  onExit()
  registerWithTouchDispatcher()
  removeChild(cocos2d::CCNode*, bool)
  setEnabled(bool)
  setHandlerPriority(int)
  setOpacityModifyRGB(bool)
  virtual addChild(cocos2d::CCNode *)
  virtual addChild(cocos2d::CCNode *,int)
  virtual addChild(cocos2d::CCNode *,int,int)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual init(void)
  virtual isEnabled(void)
  virtual isOpacityModifyRGB(void)
  virtual onExit(void)
  virtual registerWithTouchDispatcher(void)
  virtual removeChild(cocos2d::CCNode *,bool)
  virtual setEnabled(bool)
  virtual setOpacityModifyRGB(bool)
}
class cocos2d::CCMenuItem : cocos2d::CCNodeRGBA {
  activate()
  create(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  create()
  initWithTarget(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  isEnabled()
  isSelected()
  rect()
  registerScriptTapHandler(int)
  selected()
  setEnabled(bool)
  setTarget(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  unregisterScriptTapHandler()
  unselected()
  virtual activate(void)
  virtual isEnabled(void)
  virtual isSelected(void)
  virtual registerScriptTapHandler(int)
  virtual selected(void)
  virtual setEnabled(bool)
  virtual unregisterScriptTapHandler(void)
  virtual unselected(void)
}
class cocos2d::CCMenuItemAtlasFont : cocos2d::CCMenuItemLabel {
  create(char const*, char const*, int, int, char)
  create(char const*, char const*, int, int, char, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  initWithString(char const*, char const*, int, int, char, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
}
class cocos2d::CCMenuItemFont : cocos2d::CCMenuItemLabel {
  create(char const*)
  create(char const*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  fontName()
  fontNameObj()
  fontSize()
  fontSizeObj()
  initWithString(char const*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  recreateLabel()
  setFontName(char const*)
  setFontNameObj(char const*)
  setFontSize(unsigned int)
  setFontSizeObj(unsigned int)
}
class cocos2d::CCMenuItemImage : cocos2d::CCMenuItemSprite {
  CCMenuItemImage()
  create(char const*, char const*)
  create(char const*, char const*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  create(char const*, char const*, char const*)
  create(char const*, char const*, char const*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  create()
  init()
  initWithNormalImage(char const*, char const*, char const*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  setDisabledSpriteFrame(cocos2d::CCSpriteFrame*)
  setNormalSpriteFrame(cocos2d::CCSpriteFrame*)
  setSelectedSpriteFrame(cocos2d::CCSpriteFrame*)
  virtual init(void)
}
class cocos2d::CCMenuItemLabel : cocos2d::CCMenuItem {
  CCMenuItemLabel()
  activate()
  create(cocos2d::CCNode*)
  create(cocos2d::CCNode*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  getDisabledColor()
  getLabel()
  initWithLabel(cocos2d::CCNode*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  selected()
  setDisabledColor(cocos2d::_ccColor3B const&)
  setEnabled(bool)
  setLabel(cocos2d::CCNode*)
  setString(char const*)
  unselected()
  virtual activate(void)
  virtual getDisabledColor(void)
  virtual getLabel(void)
  virtual selected(void)
  virtual setDisabledColor(cocos2d::_ccColor3B const&)
  virtual setEnabled(bool)
  virtual setLabel(cocos2d::CCNode *)
  virtual unselected(void)
}
class cocos2d::CCMenuItemSprite : cocos2d::CCMenuItem {
  create(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  create(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCNode*)
  create(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  getDisabledImage()
  getNormalImage()
  getSelectedImage()
  initWithNormalSprite(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  selected()
  setDisabledImage(cocos2d::CCNode*)
  setEnabled(bool)
  setNormalImage(cocos2d::CCNode*)
  setSelectedImage(cocos2d::CCNode*)
  unselected()
  updateImagesVisibility()
  virtual getDisabledImage(void)
  virtual getNormalImage(void)
  virtual getSelectedImage(void)
  virtual selected(void)
  virtual setDisabledImage(cocos2d::CCNode *)
  virtual setEnabled(bool)
  virtual setNormalImage(cocos2d::CCNode *)
  virtual setSelectedImage(cocos2d::CCNode *)
  virtual unselected(void)
  virtual updateImagesVisibility(void)
}
class cocos2d::CCMenuItemToggle : cocos2d::CCMenuItem {
  CCMenuItemToggle()
  activate()
  addSubItem(cocos2d::CCMenuItem*)
  create(cocos2d::CCMenuItem*)
  create()
  createWithTarget(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*), cocos2d::CCMenuItem*, ...)
  createWithTarget(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*), cocos2d::CCArray*)
  getSelectedIndex()
  getSubItems()
  initWithItem(cocos2d::CCMenuItem*)
  initWithTarget(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*), cocos2d::CCMenuItem*, std::__va_list)
  selected()
  selectedItem()
  setEnabled(bool)
  setSelectedIndex(unsigned int)
  setSubItems(cocos2d::CCArray*)
  unselected()
  virtual activate(void)
  virtual getSelectedIndex(void)
  virtual getSubItems(void)
  virtual selected(void)
  virtual setEnabled(bool)
  virtual setSelectedIndex(uint)
  virtual setSubItems(cocos2d::CCArray *)
  virtual unselected(void)
}
class cocos2d::CCMotionStreak : cocos2d::CCNodeRGBA, cocos2d::CCTextureProtocol {
  CCMotionStreak()
  create(float, float, float, cocos2d::_ccColor3B const&, char const*)
  create(float, float, float, cocos2d::_ccColor3B const&, cocos2d::CCTexture2D*)
  draw()
  enableRepeatMode(float)
  getBlendFunc()
  getOpacity()
  getTexture()
  initWithFade(float, float, float, cocos2d::_ccColor3B const&, char const*)
  initWithFade(float, float, float, cocos2d::_ccColor3B const&, cocos2d::CCTexture2D*)
  isOpacityModifyRGB()
  reset()
  resumeStroke()
  setBlendFunc(cocos2d::_ccBlendFunc)
  setOpacity(unsigned char)
  setOpacityModifyRGB(bool)
  setPosition(cocos2d::CCPoint const&)
  setStroke(float)
  setTexture(cocos2d::CCTexture2D*)
  stopStroke()
  tintWithColor(cocos2d::_ccColor3B)
  update(float)
  virtual draw(void)
  virtual getBlendFunc(void)
  virtual getOpacity(void)
  virtual getTexture(void)
  virtual isOpacityModifyRGB(void)
  virtual setBlendFunc(cocos2d::_ccBlendFunc)
  virtual setOpacity(uchar)
  virtual setOpacityModifyRGB(bool)
  virtual setPosition(cocos2d::CCPoint const&)
  virtual setTexture(cocos2d::CCTexture2D *)
  virtual update(float)
}
class cocos2d::CCMouseDelegate {
  rightKeyDown()
  rightKeyUp()
  scrollWheel(float, float)
  virtual rightKeyDown(void)
  virtual rightKeyUp(void)
  virtual scrollWheel(float,float)
}
class cocos2d::CCMouseDispatcher : cocos2d::CCObject {
  CCMouseDispatcher()
  addDelegate(cocos2d::CCMouseDelegate*)
  dispatchScrollMSG(float, float)
  forceAddDelegate(cocos2d::CCMouseDelegate*)
  forceRemoveDelegate(cocos2d::CCMouseDelegate*)
  removeDelegate(cocos2d::CCMouseDelegate*)
}
class cocos2d::CCMouseHandler : cocos2d::CCObject {
  getDelegate()
  handlerWithDelegate(cocos2d::CCMouseDelegate*)
  initWithDelegate(cocos2d::CCMouseDelegate*)
  setDelegate(cocos2d::CCMouseDelegate*)
  virtual initWithDelegate(cocos2d::CCMouseDelegate *)
}
class cocos2d::CCMoveBy : cocos2d::CCActionInterval {
  CCMoveBy()
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::CCPoint const&)
  initWithDuration(float, cocos2d::CCPoint const&)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCMoveTo : cocos2d::CCMoveBy {
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::CCPoint const&)
  initWithDuration(float, cocos2d::CCPoint const&)
  startWithTarget(cocos2d::CCNode*)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual startWithTarget(cocos2d::CCNode *)
}
class cocos2d::CCNode : cocos2d::CCObject {
  CCNode()
  _setZOrder(int)
  addChild(cocos2d::CCNode*)
  addChild(cocos2d::CCNode*, int)
  addChild(cocos2d::CCNode*, int, int)
  addComponent(cocos2d::CCComponent*)
  boundingBox()
  childrenAlloc()
  cleanup()
  convertToNodeSpace(cocos2d::CCPoint const&)
  convertToNodeSpaceAR(cocos2d::CCPoint const&)
  convertToWindowSpace(cocos2d::CCPoint const&)
  convertToWorldSpace(cocos2d::CCPoint const&)
  convertToWorldSpaceAR(cocos2d::CCPoint const&)
  convertTouchToNodeSpace(cocos2d::CCTouch*)
  convertTouchToNodeSpaceAR(cocos2d::CCTouch*)
  create()
  description()
  detachChild(cocos2d::CCNode*, bool)
  draw()
  getActionByTag(int)
  getActionManager()
  getAnchorPoint()
  getAnchorPointInPoints()
  getCamera()
  getChildByTag(int)
  getChildren()
  getChildrenCount()
  getComponent(char const*)
  getContentSize()
  getGLServerState()
  getGrid()
  getOrderOfArrival()
  getParent()
  getPosition(float*, float*)
  getPosition()
  getPositionX()
  getPositionY()
  getRotation()
  getRotationX()
  getRotationY()
  getScale()
  getScaleX()
  getScaleY()
  getScaledContentSize()
  getScheduler()
  getShaderProgram()
  getSkewX()
  getSkewY()
  getUserData()
  getUserObject()
  getVertexZ()
  getZOrder()
  ignoreAnchorPointForPosition(bool)
  init()
  insertChild(cocos2d::CCNode*, int)
  isIgnoreAnchorPointForPosition()
  isRunning()
  isVisible()
  nodeToParentTransform()
  nodeToWorldTransform()
  numberOfRunningActions()
  onEnter()
  onEnterTransitionDidFinish()
  onExit()
  onExitTransitionDidStart()
  parentToNodeTransform()
  pauseSchedulerAndActions()
  registerScriptHandler(int)
  removeAllChildren()
  removeAllChildrenWithCleanup(bool)
  removeAllComponents()
  removeChild(cocos2d::CCNode*)
  removeChild(cocos2d::CCNode*, bool)
  removeChildByTag(int)
  removeChildByTag(int, bool)
  removeComponent(char const*)
  removeComponent(cocos2d::CCComponent*)
  removeFromParent()
  removeFromParentAndCleanup(bool)
  removeMeAndCleanup()
  reorderChild(cocos2d::CCNode*, int)
  resumeSchedulerAndActions()
  runAction(cocos2d::CCAction*)
  schedule(void (cocos2d::CCObject::*)(float))
  schedule(void (cocos2d::CCObject::*)(float), float)
  schedule(void (cocos2d::CCObject::*)(float), float, unsigned int, float)
  scheduleOnce(void (cocos2d::CCObject::*)(float), float)
  scheduleUpdate()
  scheduleUpdateWithPriority(int)
  scheduleUpdateWithPriorityLua(int, int)
  setActionManager(cocos2d::CCActionManager*)
  setAdditionalTransform(cocos2d::CCAffineTransform const&)
  setAnchorPoint(cocos2d::CCPoint const&)
  setContentSize(cocos2d::CCSize const&)
  setGLServerState(cocos2d::ccGLServerState)
  setGrid(cocos2d::CCGridBase*)
  setOrderOfArrival(unsigned int)
  setParent(cocos2d::CCNode*)
  setPosition(float, float)
  setPosition(cocos2d::CCPoint const&)
  setPositionX(float)
  setPositionY(float)
  setRotation(float)
  setRotationX(float)
  setRotationY(float)
  setScale(float)
  setScale(float, float)
  setScaleX(float)
  setScaleY(float)
  setScheduler(cocos2d::CCScheduler*)
  setShaderProgram(cocos2d::CCGLProgram*)
  setSkewX(float)
  setSkewY(float)
  setUserData(void*)
  setUserObject(cocos2d::CCObject*)
  setVertexZ(float)
  setVisible(bool)
  setZOrder(int)
  sortAllChildren()
  stopAction(cocos2d::CCAction*)
  stopActionByTag(int)
  stopAllActions()
  transform()
  transformAncestors()
  unregisterScriptHandler()
  unschedule(void (cocos2d::CCObject::*)(float))
  unscheduleAllSelectors()
  unscheduleUpdate()
  update(float)
  updateTransform()
  updateTweenAction(float, char const*)
  visit()
  worldToNodeTransform()
  virtual _setZOrder(int)
  virtual addChild(cocos2d::CCNode*)
  virtual addChild(cocos2d::CCNode*,int)
  virtual addChild(cocos2d::CCNode*,int,int)
  virtual addComponent(cocos2d::CCComponent *)
  virtual cleanup(void)
  virtual draw(void)
  virtual getActionManager(void)
  virtual getAnchorPoint(void)
  virtual getAnchorPointInPoints(void)
  virtual getCamera(void)
  virtual getChildByTag(int)
  virtual getChildren(void)
  virtual getChildrenCount(void)
  virtual getContentSize(void)
  virtual getGLServerState(void)
  virtual getGrid(void)
  virtual getOrderOfArrival(void)
  virtual getParent(void)
  virtual getPosition(void)
  virtual getPosition(float *,float *)
  virtual getPositionX(void)
  virtual getPositionY(void)
  virtual getRotation(void)
  virtual getRotationX(void)
  virtual getRotationY(void)
  virtual getScale(void)
  virtual getScaleX(void)
  virtual getScaleY(void)
  virtual getScaledContentSize(void)
  virtual getScheduler(void)
  virtual getShaderProgram(void)
  virtual getSkewX(void)
  virtual getSkewY(void)
  virtual getUserData(void)
  virtual getUserObject(void)
  virtual getVertexZ(void)
  virtual getZOrder(void)
  virtual ignoreAnchorPointForPosition(bool)
  virtual init(void)
  virtual isIgnoreAnchorPointForPosition(void)
  virtual isRunning(void)
  virtual isVisible(void)
  virtual nodeToParentTransform(void)
  virtual nodeToWorldTransform(void)
  virtual onEnter(void)
  virtual onEnterTransitionDidFinish(void)
  virtual onExit(void)
  virtual onExitTransitionDidStart(void)
  virtual parentToNodeTransform(void)
  virtual registerScriptHandler(int)
  virtual removeAllChildren(void)
  virtual removeAllChildrenWithCleanup(bool)
  virtual removeAllComponents(void)
  virtual removeChild(cocos2d::CCNode*)
  virtual removeChild(cocos2d::CCNode*,bool)
  virtual removeChildByTag(int)
  virtual removeChildByTag(int,bool)
  virtual removeComponent(char const*)
  virtual removeComponent(cocos2d::CCComponent *)
  virtual removeFromParent(void)
  virtual removeFromParentAndCleanup(bool)
  virtual removeMeAndCleanup(void)
  virtual reorderChild(cocos2d::CCNode*,int)
  virtual setActionManager(cocos2d::CCActionManager *)
  virtual setAnchorPoint(cocos2d::CCPoint const&)
  virtual setContentSize(cocos2d::CCSize const&)
  virtual setGLServerState(cocos2d::ccGLServerState)
  virtual setGrid(cocos2d::CCGridBase *)
  virtual setOrderOfArrival(uint)
  virtual setParent(cocos2d::CCNode*)
  virtual setPosition(cocos2d::CCPoint const&)
  virtual setPosition(float,float)
  virtual setPositionX(float)
  virtual setPositionY(float)
  virtual setRotation(float)
  virtual setRotationX(float)
  virtual setRotationY(float)
  virtual setScale(float)
  virtual setScale(float,float)
  virtual setScaleX(float)
  virtual setScaleY(float)
  virtual setScheduler(cocos2d::CCScheduler *)
  virtual setShaderProgram(cocos2d::CCGLProgram *)
  virtual setSkewX(float)
  virtual setSkewY(float)
  virtual setUserData(void *)
  virtual setUserObject(cocos2d::CCObject *)
  virtual setVertexZ(float)
  virtual setVisible(bool)
  virtual setZOrder(int)
  virtual sortAllChildren(void)
  virtual unregisterScriptHandler(void)
  virtual update(float)
  virtual updateTransform(void)
  virtual updateTweenAction(float,char const*)
  virtual visit(void)
  virtual worldToNodeTransform(void)
}
class cocos2d::CCNodeRGBA : cocos2d::CCNode, cocos2d::CCRGBAProtocol {
  CCNodeRGBA()
  create()
  getColor()
  getColor(void)
  getDisplayedColor()
  getDisplayedColor(void)
  getDisplayedOpacity()
  getDisplayedOpacity(void)
  getOpacity()
  getOpacity(void)
  init()
  init(void)
  isCascadeColorEnabled()
  isCascadeOpacityEnabled()
  isCascadeOpacityEnabled(void)
  isOpacityModifyRGB()
  setCascadeColorEnabled(bool)
  setCascadeOpacityEnabled(bool)
  setCascadeOpacityEnabled(bool)
  setColor(cocos2d::_ccColor3B const&)
  setColor(cocos2d::_ccColor3B const&)
  setOpacity(unsigned char)
  setOpacity(uchar)
  setOpacityModifyRGB(bool)
  updateDisplayedColor(cocos2d::_ccColor3B const&)
  updateDisplayedOpacity(unsigned char)
  updateDisplayedOpacity(uchar)
  virtual isCascadeColorEnabled(void)
  virtual isOpacityModifyRGB(void)
  virtual setCascadeColorEnabled(bool)
  virtual setOpacityModifyRGB(bool)
  virtual updateDisplayedColor(cocos2d::_ccColor3B const&)
}
class cocos2d::CCNotificationCenter : cocos2d::CCObject {
  CCNotificationCenter()
  addObserver(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*), char const*, cocos2d::CCObject*)
  getObserverHandlerByName(char const*)
  observerExisted(cocos2d::CCObject*, char const*)
  postNotification(char const*)
  postNotification(char const*, cocos2d::CCObject*)
  purgeNotificationCenter()
  registerScriptObserver(cocos2d::CCObject*, int, char const*)
  removeAllObservers(cocos2d::CCObject*)
  removeObserver(cocos2d::CCObject*, char const*)
  sharedNotificationCenter()
  unregisterScriptObserver(cocos2d::CCObject*, char const*)
}
class cocos2d::CCNotificationObserver : cocos2d::CCObject {
  CCNotificationObserver(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*), char const*, cocos2d::CCObject*)
  getHandler()
  getName()
  getObject()
  getSelector()
  getTarget()
  performSelector(cocos2d::CCObject*)
  setHandler(int)
  virtual getHandler(void)
  virtual getName(void)
  virtual getObject(void)
  virtual getSelector(void)
  virtual getTarget(void)
  virtual setHandler(int)
}
class cocos2d::CCObject : cocos2d::CCCopying {
  CCObject()
  acceptVisitor(cocos2d::CCDataVisitor&)
  autorelease()
  canEncode()
  copy()
  createWithCoder(DS_Dictionary*)
  encodeWithCoder(DS_Dictionary*)
  getTag()
  isEqual(cocos2d::CCObject const*)
  isSingleReference()
  release()
  retain()
  retainCount()
  setTag(int)
  update(float)
  virtual acceptVisitor(cocos2d::CCDataVisitor &)
  virtual canEncode(void)
  virtual encodeWithCoder(DS_Dictionary *)
  virtual getTag(void)
  virtual isEqual(cocos2d::CCObject const*)
  virtual setTag(int)
  virtual update(float)
}
class cocos2d::CCOrbitCamera : cocos2d::CCActionCamera {
  CCOrbitCamera()
  copyWithZone(cocos2d::CCZone*)
  create(float, float, float, float, float, float, float)
  initWithDuration(float, float, float, float, float, float, float)
  sphericalRadius(float*, float*, float*)
  startWithTarget(cocos2d::CCNode*)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCPageTurn3D : cocos2d::CCGrid3DAction {
  create(float, cocos2d::CCSize const&)
  update(float)
  virtual update(float)
}
class cocos2d::CCParallaxNode : cocos2d::CCNode {
  CCParallaxNode()
  absolutePosition()
  addChild(cocos2d::CCNode*, unsigned int, int)
  addChild(cocos2d::CCNode*, unsigned int, cocos2d::CCPoint const&, cocos2d::CCPoint const&)
  create()
  removeAllChildrenWithCleanup(bool)
  removeChild(cocos2d::CCNode*, bool)
  visit()
  virtual addChild(cocos2d::CCNode *,uint,cocos2d::CCPoint const&,cocos2d::CCPoint const&)
  virtual addChild(cocos2d::CCNode *,uint,int)
  virtual removeAllChildrenWithCleanup(bool)
  virtual removeChild(cocos2d::CCNode *,bool)
  virtual visit(void)
}
class cocos2d::CCParticleBatchNode : cocos2d::CCNode, cocos2d::CCTextureProtocol {
  CCParticleBatchNode()
  addChild(cocos2d::CCNode*)
  addChild(cocos2d::CCNode*, int)
  addChild(cocos2d::CCNode*, int, int)
  addChildHelper(cocos2d::CCParticleSystem*, int, int)
  create(char const*, unsigned int)
  createWithTexture(cocos2d::CCTexture2D*, unsigned int)
  disableParticle(unsigned int)
  draw()
  getBlendFunc()
  getCurrentIndex(unsigned int*, unsigned int*, cocos2d::CCNode*, int)
  getTexture()
  increaseAtlasCapacityTo(unsigned int)
  initWithFile(char const*, unsigned int)
  initWithTexture(cocos2d::CCTexture2D*, unsigned int)
  insertChild(cocos2d::CCParticleSystem*, unsigned int)
  removeAllChildrenWithCleanup(bool)
  removeChild(cocos2d::CCNode*, bool)
  removeChildAtIndex(unsigned int, bool)
  reorderChild(cocos2d::CCNode*, int)
  searchNewPositionInChildrenForZ(int)
  setBlendFunc(cocos2d::_ccBlendFunc)
  setTexture(cocos2d::CCTexture2D*)
  updateAllAtlasIndexes()
  updateBlendFunc()
  visit()
  virtual addChild(cocos2d::CCNode *)
  virtual addChild(cocos2d::CCNode *,int)
  virtual addChild(cocos2d::CCNode *,int,int)
  virtual draw(void)
  virtual getBlendFunc(void)
  virtual getTexture(void)
  virtual removeAllChildrenWithCleanup(bool)
  virtual removeChild(cocos2d::CCNode *,bool)
  virtual reorderChild(cocos2d::CCNode *,int)
  virtual setBlendFunc(cocos2d::_ccBlendFunc)
  virtual setTexture(cocos2d::CCTexture2D *)
  virtual visit(void)
}
class cocos2d::CCParticleExplosion : cocos2d::CCParticleSystemQuad {
  create()
  createWithTotalParticles(unsigned int)
  init()
  initWithTotalParticles(unsigned int)
  virtual init(void)
  virtual initWithTotalParticles(uint)
}
class cocos2d::CCParticleFire : cocos2d::CCParticleSystemQuad {
  create()
  createWithTotalParticles(unsigned int)
  init()
  initWithTotalParticles(unsigned int)
  virtual init(void)
  virtual initWithTotalParticles(uint)
}
class cocos2d::CCParticleFireworks : cocos2d::CCParticleSystemQuad {
  create()
  createWithTotalParticles(unsigned int)
  init()
  initWithTotalParticles(unsigned int)
  virtual init(void)
  virtual initWithTotalParticles(uint)
}
class cocos2d::CCParticleFlower : cocos2d::CCParticleSystemQuad {
  create()
  createWithTotalParticles(unsigned int)
  init()
  initWithTotalParticles(unsigned int)
  virtual init(void)
  virtual initWithTotalParticles(uint)
}
class cocos2d::CCParticleGalaxy : cocos2d::CCParticleSystemQuad {
  create()
  createWithTotalParticles(unsigned int)
  init()
  initWithTotalParticles(unsigned int)
  virtual init(void)
  virtual initWithTotalParticles(uint)
}
class cocos2d::CCParticleMeteor : cocos2d::CCParticleSystemQuad {
  create()
  createWithTotalParticles(unsigned int)
  init()
  initWithTotalParticles(unsigned int)
  virtual init(void)
  virtual initWithTotalParticles(uint)
}
class cocos2d::CCParticleRain : cocos2d::CCParticleSystemQuad {
  create()
  createWithTotalParticles(unsigned int)
  init()
  initWithTotalParticles(unsigned int)
  virtual init(void)
  virtual initWithTotalParticles(uint)
}
class cocos2d::CCParticleSmoke : cocos2d::CCParticleSystemQuad {
  create()
  createWithTotalParticles(unsigned int)
  init()
  initWithTotalParticles(unsigned int)
  virtual init(void)
  virtual initWithTotalParticles(uint)
}
class cocos2d::CCParticleSnow : cocos2d::CCParticleSystemQuad {
  create()
  createWithTotalParticles(unsigned int)
  init()
  initWithTotalParticles(unsigned int)
  virtual init(void)
  virtual initWithTotalParticles(uint)
}
class cocos2d::CCParticleSpiral : cocos2d::CCParticleSystemQuad {
  create()
  createWithTotalParticles(unsigned int)
  init()
  initWithTotalParticles(unsigned int)
  virtual init(void)
  virtual initWithTotalParticles(uint)
}
class cocos2d::CCParticleSun : cocos2d::CCParticleSystemQuad {
  create()
  createWithTotalParticles(unsigned int)
  init()
  initWithTotalParticles(unsigned int)
  virtual init(void)
  virtual initWithTotalParticles(uint)
}
class cocos2d::CCParticleSystem : cocos2d::CCNode, cocos2d::CCTextureProtocol {
  CCParticleSystem()
  addParticle()
  create(char const*)
  createWithTotalParticles(unsigned int)
  getAngle()
  getAngleVar()
  getBatchNode()
  getBlendFunc()
  getDuration()
  getEmissionRate()
  getEmitterMode()
  getEndColor()
  getEndColorVar()
  getEndRadius()
  getEndRadiusVar()
  getEndSize()
  getEndSizeVar()
  getEndSpin()
  getEndSpinVar()
  getGravity()
  getLife()
  getLifeVar()
  getOpacityModifyRGB()
  getParticleCount()
  getPosVar()
  getPositionType()
  getRadialAccel()
  getRadialAccelVar()
  getRotatePerSecond()
  getRotatePerSecondVar()
  getRotationIsDir()
  getSourcePosition()
  getSpeed()
  getSpeedVar()
  getStartColor()
  getStartColorVar()
  getStartRadius()
  getStartRadiusVar()
  getStartSize()
  getStartSizeVar()
  getStartSpin()
  getStartSpinVar()
  getTangentialAccel()
  getTangentialAccelVar()
  getTexture()
  getTotalParticles()
  init()
  initParticle(cocos2d::sCCParticle*)
  initWithDictionary(cocos2d::CCDictionary*)
  initWithDictionary(cocos2d::CCDictionary*, char const*)
  initWithFile(char const*)
  initWithTotalParticles(unsigned int)
  isActive()
  isAutoRemoveOnFinish()
  isBlendAdditive()
  isFull()
  loadDefaults()
  loadScaledDefaults(float)
  postStep()
  resetSystem()
  resumeSystem()
  saveDefaults()
  setAngle(float)
  setAngleVar(float)
  setAutoRemoveOnFinish(bool)
  setBatchNode(cocos2d::CCParticleBatchNode*)
  setBlendAdditive(bool)
  setBlendFunc(cocos2d::_ccBlendFunc)
  setDuration(float)
  setEmissionRate(float)
  setEmitterMode(int)
  setEndColor(cocos2d::_ccColor4F const&)
  setEndColorVar(cocos2d::_ccColor4F const&)
  setEndRadius(float)
  setEndRadiusVar(float)
  setEndSize(float)
  setEndSizeVar(float)
  setEndSpin(float)
  setEndSpinVar(float)
  setGravity(cocos2d::CCPoint const&)
  setLife(float)
  setLifeVar(float)
  setOpacityModifyRGB(bool)
  setPosVar(cocos2d::CCPoint const&)
  setPositionType(cocos2d::tCCPositionType)
  setRadialAccel(float)
  setRadialAccelVar(float)
  setRotatePerSecond(float)
  setRotatePerSecondVar(float)
  setRotation(float)
  setRotationIsDir(bool)
  setScale(float)
  setScaleX(float)
  setScaleY(float)
  setSourcePosition(cocos2d::CCPoint const&)
  setSpeed(float)
  setSpeedVar(float)
  setStartColor(cocos2d::_ccColor4F const&)
  setStartColorVar(cocos2d::_ccColor4F const&)
  setStartRadius(float)
  setStartRadiusVar(float)
  setStartSize(float)
  setStartSizeVar(float)
  setStartSpin(float)
  setStartSpinVar(float)
  setTangentialAccel(float)
  setTangentialAccelVar(float)
  setTexture(cocos2d::CCTexture2D*)
  setTotalParticles(unsigned int)
  stopSystem()
  update(float)
  updateBlendFunc()
  updateQuadWithParticle(cocos2d::sCCParticle*, cocos2d::CCPoint const&)
  updateWithNoTime()
  virtual getAngle(void)
  virtual getAngleVar(void)
  virtual getBatchNode(void)
  virtual getBlendFunc(void)
  virtual getDuration(void)
  virtual getEmissionRate(void)
  virtual getEmitterMode(void)
  virtual getEndColor(void)
  virtual getEndColorVar(void)
  virtual getEndRadius(void)
  virtual getEndRadiusVar(void)
  virtual getEndSize(void)
  virtual getEndSizeVar(void)
  virtual getEndSpin(void)
  virtual getEndSpinVar(void)
  virtual getGravity(void)
  virtual getLife(void)
  virtual getLifeVar(void)
  virtual getOpacityModifyRGB(void)
  virtual getParticleCount(void)
  virtual getPosVar(void)
  virtual getPositionType(void)
  virtual getRadialAccel(void)
  virtual getRadialAccelVar(void)
  virtual getRotatePerSecond(void)
  virtual getRotatePerSecondVar(void)
  virtual getRotationIsDir(void)
  virtual getSourcePosition(void)
  virtual getSpeed(void)
  virtual getSpeedVar(void)
  virtual getStartColor(void)
  virtual getStartColorVar(void)
  virtual getStartRadius(void)
  virtual getStartRadiusVar(void)
  virtual getStartSize(void)
  virtual getStartSizeVar(void)
  virtual getStartSpin(void)
  virtual getStartSpinVar(void)
  virtual getTangentialAccel(void)
  virtual getTangentialAccelVar(void)
  virtual getTexture(void)
  virtual getTotalParticles(void)
  virtual init(void)
  virtual initWithTotalParticles(uint)
  virtual isActive(void)
  virtual isAutoRemoveOnFinish(void)
  virtual isBlendAdditive(void)
  virtual postStep(void)
  virtual setAngle(float)
  virtual setAngleVar(float)
  virtual setAutoRemoveOnFinish(bool)
  virtual setBatchNode(cocos2d::CCParticleBatchNode *)
  virtual setBlendAdditive(bool)
  virtual setBlendFunc(cocos2d::_ccBlendFunc)
  virtual setDuration(float)
  virtual setEmissionRate(float)
  virtual setEmitterMode(int)
  virtual setEndColor(cocos2d::_ccColor4F const&)
  virtual setEndColorVar(cocos2d::_ccColor4F const&)
  virtual setEndRadius(float)
  virtual setEndRadiusVar(float)
  virtual setEndSize(float)
  virtual setEndSizeVar(float)
  virtual setEndSpin(float)
  virtual setEndSpinVar(float)
  virtual setGravity(cocos2d::CCPoint const&)
  virtual setLife(float)
  virtual setLifeVar(float)
  virtual setOpacityModifyRGB(bool)
  virtual setPosVar(cocos2d::CCPoint const&)
  virtual setPositionType(cocos2d::tCCPositionType)
  virtual setRadialAccel(float)
  virtual setRadialAccelVar(float)
  virtual setRotatePerSecond(float)
  virtual setRotatePerSecondVar(float)
  virtual setRotation(float)
  virtual setRotationIsDir(bool)
  virtual setScale(float)
  virtual setScaleX(float)
  virtual setScaleY(float)
  virtual setSourcePosition(cocos2d::CCPoint const&)
  virtual setSpeed(float)
  virtual setSpeedVar(float)
  virtual setStartColor(cocos2d::_ccColor4F const&)
  virtual setStartColorVar(cocos2d::_ccColor4F const&)
  virtual setStartRadius(float)
  virtual setStartRadiusVar(float)
  virtual setStartSize(float)
  virtual setStartSizeVar(float)
  virtual setStartSpin(float)
  virtual setStartSpinVar(float)
  virtual setTangentialAccel(float)
  virtual setTangentialAccelVar(float)
  virtual setTexture(cocos2d::CCTexture2D *)
  virtual setTotalParticles(uint)
  virtual update(float)
  virtual updateBlendFunc(void)
  virtual updateQuadWithParticle(cocos2d::sCCParticle *,cocos2d::CCPoint const&)
  virtual updateWithNoTime(void)
}
class cocos2d::CCParticleSystemQuad : cocos2d::CCParticleSystem {
  CCParticleSystemQuad()
  allocMemory()
  create(char const*)
  create()
  createWithTotalParticles(unsigned int)
  draw()
  initIndices()
  initTexCoordsWithRect(cocos2d::CCRect const&)
  initWithTotalParticles(unsigned int)
  listenBackToForeground(cocos2d::CCObject*)
  postStep()
  setBatchNode(cocos2d::CCParticleBatchNode*)
  setDisplayFrame(cocos2d::CCSpriteFrame*)
  setTexture(cocos2d::CCTexture2D*)
  setTextureWithRect(cocos2d::CCTexture2D*, cocos2d::CCRect const&)
  setTotalParticles(unsigned int)
  setupVBO()
  updateQuadWithParticle(cocos2d::sCCParticle*, cocos2d::CCPoint const&)
  virtual draw(void)
  virtual initWithTotalParticles(uint)
  virtual postStep(void)
  virtual setBatchNode(cocos2d::CCParticleBatchNode *)
  virtual setTexture(cocos2d::CCTexture2D *)
  virtual setTotalParticles(uint)
  virtual updateQuadWithParticle(cocos2d::sCCParticle *,cocos2d::CCPoint const&)
}
class cocos2d::CCPlace : cocos2d::CCActionInstant {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCPoint const&)
  initWithPosition(cocos2d::CCPoint const&)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual update(float)
}
class cocos2d::CCPointArray : cocos2d::CCObject {
  CCPointArray()
  addControlPoint(cocos2d::CCPoint)
  copyWithZone(cocos2d::CCZone*)
  count()
  create(unsigned int)
  getControlPointAtIndex(unsigned int)
  getControlPoints()
  initWithCapacity(unsigned int)
  insertControlPoint(cocos2d::CCPoint&, unsigned int)
  removeControlPointAtIndex(unsigned int)
  replaceControlPoint(cocos2d::CCPoint&, unsigned int)
  reverse()
  reverseInline()
  setControlPoints(std::vector<cocos2d::CCPoint*, std::allocator<cocos2d::CCPoint*> >*)
  virtual copyWithZone(cocos2d::CCZone *)
}
class cocos2d::CCPointObject {
  pointWithCCPoint(cocos2d::CCPoint, cocos2d::CCPoint)
}
class cocos2d::CCPrettyPrinter : cocos2d::CCDataVisitor {
  CCPrettyPrinter(int)
  clear()
  getResult()
  setIndentLevel(int)
  visit(cocos2d::CCDictionary const*)
  visit(cocos2d::CCSet const*)
  visit(cocos2d::CCBool const*)
  visit(cocos2d::CCArray const*)
  visit(cocos2d::CCFloat const*)
  visit(cocos2d::CCDouble const*)
  visit(cocos2d::CCString const*)
  visit(cocos2d::CCInteger const*)
  visitObject(cocos2d::CCObject const*)
  virtual clear(void)
  virtual getResult(void)
  virtual visit(cocos2d::CCBool const*)
  virtual visit(cocos2d::CCInteger const*)
  virtual visit(cocos2d::CCFloat const*)
  virtual visit(cocos2d::CCDouble const*)
  virtual visit(cocos2d::CCString const*)
  virtual visit(cocos2d::CCArray const*)
  virtual visit(cocos2d::CCDictionary const*)
  virtual visit(cocos2d::CCSet const*)
  virtual visitObject(cocos2d::CCObject const*)
}
class cocos2d::CCProfiler : cocos2d::CCObject {
  createAndAddTimerWithName(char const*)
  displayTimers()
  init()
  releaseAllTimers()
  releaseTimer(char const*)
  sharedProfiler()
}
class cocos2d::CCProfilingTimer : cocos2d::CCObject {
  CCProfilingTimer()
  description()
  initWithName(char const*)
  reset()
}
class cocos2d::CCProgressFromTo : cocos2d::CCActionInterval {
  copyWithZone(cocos2d::CCZone*)
  create(float, float, float)
  initWithDuration(float, float, float)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCProgressTimer : cocos2d::CCNodeRGBA {
  CCProgressTimer()
  boundaryTexCoord(char)
  create(cocos2d::CCSprite*)
  draw()
  getColor()
  getMidpoint()
  getOpacity()
  initWithSprite(cocos2d::CCSprite*)
  setAnchorPoint(cocos2d::CCPoint)
  setColor(cocos2d::_ccColor3B const&)
  setMidpoint(cocos2d::CCPoint)
  setOpacity(unsigned char)
  setPercentage(float)
  setReverseProgress(bool)
  setSprite(cocos2d::CCSprite*)
  setType(cocos2d::CCProgressTimerType)
  textureCoordFromAlphaPoint(cocos2d::CCPoint)
  updateBar()
  updateColor()
  updateProgress()
  updateRadial()
  vertexFromAlphaPoint(cocos2d::CCPoint)
  virtual draw(void)
  virtual getColor(void)
  virtual getMidpoint(void)
  virtual getOpacity(void)
  virtual setColor(cocos2d::_ccColor3B const&)
  virtual setMidpoint(cocos2d::CCPoint)
  virtual setOpacity(uchar)
}
class cocos2d::CCProgressTo : cocos2d::CCActionInterval {
  copyWithZone(cocos2d::CCZone*)
  create(float, float)
  initWithDuration(float, float)
  startWithTarget(cocos2d::CCNode*)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCRemoveSelf : cocos2d::CCActionInstant {
  copyWithZone(cocos2d::CCZone*)
  create(bool)
  init(bool)
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCRenderTexture : cocos2d::CCNode {
  CCRenderTexture()
  begin()
  beginWithClear(float, float, float, float)
  beginWithClear(float, float, float, float, float)
  beginWithClear(float, float, float, float, float, int)
  beginWithClear(float, float, float, float, float, int, unsigned int)
  clear(float, float, float, float)
  clearDepth(float)
  clearStencil(int)
  create(int, int)
  create(int, int, cocos2d::CCTexture2DPixelFormat)
  create(int, int, cocos2d::CCTexture2DPixelFormat, unsigned int)
  draw()
  end()
  getClearColor()
  getClearDepth()
  getClearFlags()
  getClearStencil()
  getSprite()
  initWithWidthAndHeight(int, int, cocos2d::CCTexture2DPixelFormat)
  initWithWidthAndHeight(int, int, cocos2d::CCTexture2DPixelFormat, unsigned int)
  isAutoDraw()
  listenToBackground(cocos2d::CCObject*)
  listenToForeground(cocos2d::CCObject*)
  newCCImage(bool)
  saveToFile(char const*)
  saveToFile(char const*, cocos2d::eImageFormat)
  setAutoDraw(bool)
  setClearColor(cocos2d::_ccColor4F const&)
  setClearDepth(float)
  setClearFlags(unsigned int)
  setClearStencil(float)
  setSprite(cocos2d::CCSprite*)
  visit()
  virtual draw(void)
  virtual getSprite(void)
  virtual setSprite(cocos2d::CCSprite *)
  virtual visit(void)
}
class cocos2d::CCRepeat : cocos2d::CCActionInterval {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCFiniteTimeAction*, unsigned int)
  initWithAction(cocos2d::CCFiniteTimeAction*, unsigned int)
  isDone()
  reverse()
  startWithTarget(cocos2d::CCNode*)
  stop()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual isDone(void)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual stop(void)
  virtual update(float)
}
class cocos2d::CCRepeatForever : cocos2d::CCActionInterval {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*)
  initWithAction(cocos2d::CCActionInterval*)
  isDone()
  reverse()
  startWithTarget(cocos2d::CCNode*)
  step(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual isDone(void)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual step(float)
}
class cocos2d::CCReuseGrid : cocos2d::CCActionInstant {
  create(int)
  initWithTimes(int)
  startWithTarget(cocos2d::CCNode*)
  virtual startWithTarget(cocos2d::CCNode *)
}
class cocos2d::CCReverseTime : cocos2d::CCActionInterval {
  CCReverseTime()
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCFiniteTimeAction*)
  initWithAction(cocos2d::CCFiniteTimeAction*)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  stop()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual stop(void)
  virtual update(float)
}
class cocos2d::CCRGBAProtocol {
}
class cocos2d::CCRipple3D : cocos2d::CCGrid3DAction {
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::CCSize const&, cocos2d::CCPoint const&, float, unsigned int, float)
  initWithDuration(float, cocos2d::CCSize const&, cocos2d::CCPoint const&, float, unsigned int, float)
  setPosition(cocos2d::CCPoint const&)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual update(float)
}
class cocos2d::CCRotateBy : cocos2d::CCActionInterval {
  copyWithZone(cocos2d::CCZone*)
  create(float, float)
  create(float, float, float)
  initWithDuration(float, float)
  initWithDuration(float, float, float)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCRotateTo : cocos2d::CCActionInterval {
  copyWithZone(cocos2d::CCZone*)
  create(float, float)
  create(float, float, float)
  initWithDuration(float, float)
  initWithDuration(float, float, float)
  startWithTarget(cocos2d::CCNode*)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual initWithDuration(float,float,float)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCSAXDelegator {
}
class cocos2d::CCScaleBy : cocos2d::CCScaleTo {
  copyWithZone(cocos2d::CCZone*)
  create(float, float)
  create(float, float, float)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
}
class cocos2d::CCScaleTo : cocos2d::CCActionInterval {
  copyWithZone(cocos2d::CCZone*)
  create(float, float)
  create(float, float, float)
  initWithDuration(float, float)
  initWithDuration(float, float, float)
  startWithTarget(cocos2d::CCNode*)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCScene : cocos2d::CCNode {
  CCScene()
  create()
  getHighestChildZ()
  init()
  virtual init(void)
}
class cocos2d::CCSceneDelegate {
  willSwitchToScene(cocos2d::CCScene*)
}
class cocos2d::CCSceneTransitionDelegate {
  sceneWillResume()
  virtual sceneWillResume(void)
}
class cocos2d::CCScheduler : cocos2d::CCObject {
  CCScheduler()
  appendIn(cocos2d::_listEntry**, cocos2d::CCObject*, bool)
  isTargetPaused(cocos2d::CCObject*)
  pauseAllTargets()
  pauseAllTargetsWithMinPriority(int)
  pauseTarget(cocos2d::CCObject*)
  priorityIn(cocos2d::_listEntry**, cocos2d::CCObject*, int, bool)
  removeHashElement(cocos2d::_hashSelectorEntry*)
  removeUpdateFromHash(cocos2d::_listEntry*)
  resumeTarget(cocos2d::CCObject*)
  resumeTargets(cocos2d::CCSet*)
  scheduleScriptFunc(unsigned int, float, bool)
  scheduleSelector(void (cocos2d::CCObject::*)(float), cocos2d::CCObject*, float, bool)
  scheduleSelector(void (cocos2d::CCObject::*)(float), cocos2d::CCObject*, float, unsigned int, float, bool)
  scheduleUpdateForTarget(cocos2d::CCObject*, int, bool)
  unscheduleAll()
  unscheduleAllForTarget(cocos2d::CCObject*)
  unscheduleAllWithMinPriority(int)
  unscheduleScriptEntry(unsigned int)
  unscheduleSelector(void (cocos2d::CCObject::*)(float), cocos2d::CCObject*)
  unscheduleUpdateForTarget(cocos2d::CCObject const*)
  update(float)
  virtual update(float)
}
class cocos2d::CCSchedulerScriptHandlerEntry : cocos2d::CCScriptHandlerEntry {
  create(int, float, bool)
  init(float, bool)
}
class cocos2d::CCScriptHandlerEntry : cocos2d::CCObject {
  CCScriptHandlerEntry(int)
  create(int)
}
class cocos2d::CCScrollLayer : cocos2d::CCLayer {
  CCScrollLayer()
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  initWithLayers(cocos2d::CCArray*, int)
  nodeWithLayers(cocos2d::CCArray*, int)
  setMaximumScrollHeight(float)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
}
class cocos2d::CCSequence : cocos2d::CCActionInterval {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCFiniteTimeAction*, ...)
  create(cocos2d::CCArray*)
  createWithTwoActions(cocos2d::CCFiniteTimeAction*, cocos2d::CCFiniteTimeAction*)
  createWithVariableList(cocos2d::CCFiniteTimeAction*, std::__va_list)
  initWithTwoActions(cocos2d::CCFiniteTimeAction*, cocos2d::CCFiniteTimeAction*)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  stop()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual stop(void)
  virtual update(float)
}
class cocos2d::CCSet : cocos2d::CCObject {
  CCSet(cocos2d::CCSet const&)
  CCSet()
  acceptVisitor(cocos2d::CCDataVisitor&)
  addObject(cocos2d::CCObject*)
  anyObject()
  begin()
  containsObject(cocos2d::CCObject*)
  copy()
  count()
  create()
  end()
  mutableCopy()
  removeAllObjects()
  removeObject(cocos2d::CCObject*)
  virtual acceptVisitor(cocos2d::CCDataVisitor &)
}
class cocos2d::CCShaderCache : cocos2d::CCObject {
  CCShaderCache()
  addProgram(cocos2d::CCGLProgram*, char const*)
  init()
  loadDefaultShader(cocos2d::CCGLProgram*, int)
  loadDefaultShaders()
  programForKey(char const*)
  purgeSharedShaderCache()
  reloadDefaultShaders()
  sharedShaderCache()
}
class cocos2d::CCShaky3D : cocos2d::CCGrid3DAction {
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::CCSize const&, int, bool)
  initWithDuration(float, cocos2d::CCSize const&, int, bool)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual update(float)
}
class cocos2d::CCShakyTiles3D : cocos2d::CCTiledGrid3DAction {
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::CCSize const&, int, bool)
  initWithDuration(float, cocos2d::CCSize const&, int, bool)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual initWithDuration(float,cocos2d::CCSize const&,int,bool)
  virtual update(float)
}
class cocos2d::CCShatteredTiles3D : cocos2d::CCTiledGrid3DAction {
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::CCSize const&, int, bool)
  initWithDuration(float, cocos2d::CCSize const&, int, bool)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual initWithDuration(float,cocos2d::CCSize const&,int,bool)
  virtual update(float)
}
class cocos2d::CCShow : cocos2d::CCActionInstant {
  copyWithZone(cocos2d::CCZone*)
  create()
  reverse()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual update(float)
}
class cocos2d::CCShuffleTiles : cocos2d::CCTiledGrid3DAction {
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::CCSize const&, unsigned int)
  getDelta(cocos2d::CCSize const&)
  initWithDuration(float, cocos2d::CCSize const&, unsigned int)
  placeTile(cocos2d::CCPoint const&, cocos2d::Tile*)
  shuffle(unsigned int*, unsigned int)
  startWithTarget(cocos2d::CCNode*)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual initWithDuration(float,cocos2d::CCSize const&,uint)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCSkewBy : cocos2d::CCSkewTo {
  create(float, float, float)
  initWithDuration(float, float, float)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  virtual initWithDuration(float,float,float)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
}
class cocos2d::CCSkewTo : cocos2d::CCActionInterval {
  CCSkewTo()
  copyWithZone(cocos2d::CCZone*)
  create(float, float, float)
  initWithDuration(float, float, float)
  startWithTarget(cocos2d::CCNode*)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual initWithDuration(float,float,float)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCSpawn : cocos2d::CCActionInterval {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCFiniteTimeAction*, ...)
  create(cocos2d::CCArray*)
  createWithTwoActions(cocos2d::CCFiniteTimeAction*, cocos2d::CCFiniteTimeAction*)
  createWithVariableList(cocos2d::CCFiniteTimeAction*, std::__va_list)
  initWithTwoActions(cocos2d::CCFiniteTimeAction*, cocos2d::CCFiniteTimeAction*)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  stop()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual stop(void)
  virtual update(float)
}
class cocos2d::CCSpeed : cocos2d::CCAction {
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCActionInterval*, float)
  initWithAction(cocos2d::CCActionInterval*, float)
  isDone()
  reverse()
  setInnerAction(cocos2d::CCActionInterval*)
  startWithTarget(cocos2d::CCNode*)
  step(float)
  stop()
  virtual copyWithZone(cocos2d::CCZone *)
  virtual isDone(void)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual step(float)
  virtual stop(void)
}
class cocos2d::CCSplitCols : cocos2d::CCTiledGrid3DAction {
  copyWithZone(cocos2d::CCZone*)
  create(float, unsigned int)
  initWithDuration(float, unsigned int)
  startWithTarget(cocos2d::CCNode*)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual initWithDuration(float,uint)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCSplitRows : cocos2d::CCTiledGrid3DAction {
  copyWithZone(cocos2d::CCZone*)
  create(float, unsigned int)
  initWithDuration(float, unsigned int)
  startWithTarget(cocos2d::CCNode*)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual initWithDuration(float,uint)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCSprite : cocos2d::CCNodeRGBA, cocos2d::CCTextureProtocol {
  CCSprite()
  addChild(cocos2d::CCNode*)
  addChild(cocos2d::CCNode*, int)
  addChild(cocos2d::CCNode*, int, int)
  create(char const*)
  create(char const*, cocos2d::CCRect const&)
  create()
  createWithSpriteFrame(cocos2d::CCSpriteFrame*)
  createWithSpriteFrameName(char const*)
  createWithTexture(cocos2d::CCTexture2D*)
  createWithTexture(cocos2d::CCTexture2D*, cocos2d::CCRect const&)
  displayFrame()
  draw()
  getBatchNode()
  getBlendFunc()
  getTexture()
  ignoreAnchorPointForPosition(bool)
  init()
  initWithFile(char const*)
  initWithFile(char const*, cocos2d::CCRect const&)
  initWithSpriteFrame(cocos2d::CCSpriteFrame*)
  initWithSpriteFrameName(char const*)
  initWithTexture(cocos2d::CCTexture2D*)
  initWithTexture(cocos2d::CCTexture2D*, cocos2d::CCRect const&)
  initWithTexture(cocos2d::CCTexture2D*, cocos2d::CCRect const&, bool)
  isDirty()
  isFlipX()
  isFlipY()
  isFrameDisplayed(cocos2d::CCSpriteFrame*)
  isOpacityModifyRGB()
  refreshTextureRect()
  removeAllChildrenWithCleanup(bool)
  removeChild(cocos2d::CCNode*, bool)
  reorderChild(cocos2d::CCNode*, int)
  setAnchorPoint(cocos2d::CCPoint const&)
  setBatchNode(cocos2d::CCSpriteBatchNode*)
  setBlendFunc(cocos2d::_ccBlendFunc)
  setChildColor(cocos2d::_ccColor3B const&)
  setChildOpacity(unsigned char)
  setColor(cocos2d::_ccColor3B const&)
  setDirty(bool)
  setDirtyRecursively(bool)
  setDisplayFrame(cocos2d::CCSpriteFrame*)
  setDisplayFrameWithAnimationName(char const*, int)
  setFlipX(bool)
  setFlipY(bool)
  setOpacity(unsigned char)
  setOpacityModifyRGB(bool)
  setPosition(cocos2d::CCPoint const&)
  setReorderChildDirtyRecursively()
  setRotation(float)
  setRotationX(float)
  setRotationY(float)
  setScale(float)
  setScaleX(float)
  setScaleY(float)
  setSkewX(float)
  setSkewY(float)
  setTexture(cocos2d::CCTexture2D*)
  setTextureCoords(cocos2d::CCRect const&)
  setTextureRect(cocos2d::CCRect const&)
  setTextureRect(cocos2d::CCRect const&, bool, cocos2d::CCSize const&)
  setVertexRect(cocos2d::CCRect const&)
  setVertexZ(float)
  setVisible(bool)
  sortAllChildren()
  updateBlendFunc()
  updateColor()
  updateDisplayedColor(cocos2d::_ccColor3B const&)
  updateDisplayedOpacity(unsigned char)
  updateTransform()
  virtual addChild(cocos2d::CCNode *)
  virtual addChild(cocos2d::CCNode *,int)
  virtual addChild(cocos2d::CCNode *,int,int)
  virtual displayFrame(void)
  virtual draw(void)
  virtual getBatchNode(void)
  virtual getBlendFunc(void)
  virtual getTexture(void)
  virtual ignoreAnchorPointForPosition(bool)
  virtual init(void)
  virtual initWithFile(char const*)
  virtual initWithFile(char const*,cocos2d::CCRect const&)
  virtual initWithSpriteFrame(cocos2d::CCSpriteFrame *)
  virtual initWithSpriteFrameName(char const*)
  virtual initWithTexture(cocos2d::CCTexture2D *)
  virtual initWithTexture(cocos2d::CCTexture2D *,cocos2d::CCRect const&)
  virtual initWithTexture(cocos2d::CCTexture2D *,cocos2d::CCRect const&,bool)
  virtual isDirty(void)
  virtual isFrameDisplayed(cocos2d::CCSpriteFrame *)
  virtual isOpacityModifyRGB(void)
  virtual refreshTextureRect(void)
  virtual removeAllChildrenWithCleanup(bool)
  virtual removeChild(cocos2d::CCNode *,bool)
  virtual reorderChild(cocos2d::CCNode *,int)
  virtual setAnchorPoint(cocos2d::CCPoint const&)
  virtual setBatchNode(cocos2d::CCSpriteBatchNode *)
  virtual setBlendFunc(cocos2d::_ccBlendFunc)
  virtual setChildColor(cocos2d::_ccColor3B const&)
  virtual setChildOpacity(uchar)
  virtual setColor(cocos2d::_ccColor3B const&)
  virtual setDirty(bool)
  virtual setDirtyRecursively(bool)
  virtual setDisplayFrame(cocos2d::CCSpriteFrame *)
  virtual setDisplayFrameWithAnimationName(char const*,int)
  virtual setOpacity(uchar)
  virtual setOpacityModifyRGB(bool)
  virtual setPosition(cocos2d::CCPoint const&)
  virtual setReorderChildDirtyRecursively(void)
  virtual setRotation(float)
  virtual setRotationX(float)
  virtual setRotationY(float)
  virtual setScale(float)
  virtual setScaleX(float)
  virtual setScaleY(float)
  virtual setSkewX(float)
  virtual setSkewY(float)
  virtual setTexture(cocos2d::CCTexture2D *)
  virtual setTextureCoords(cocos2d::CCRect const&)
  virtual setTextureRect(cocos2d::CCRect const&)
  virtual setTextureRect(cocos2d::CCRect const&,bool,cocos2d::CCSize const&)
  virtual setVertexRect(cocos2d::CCRect const&)
  virtual setVertexZ(float)
  virtual setVisible(bool)
  virtual sortAllChildren(void)
  virtual updateBlendFunc(void)
  virtual updateDisplayedColor(cocos2d::_ccColor3B const&)
  virtual updateDisplayedOpacity(uchar)
  virtual updateTransform(void)
}
class cocos2d::CCSpriteBatchNode : cocos2d::CCNode, cocos2d::CCTextureProtocol {
  CCSpriteBatchNode()
  addChild(cocos2d::CCNode*)
  addChild(cocos2d::CCNode*, int)
  addChild(cocos2d::CCNode*, int, int)
  addSpriteWithoutQuad(cocos2d::CCSprite*, unsigned int, int)
  appendChild(cocos2d::CCSprite*)
  atlasIndexForChild(cocos2d::CCSprite*, int)
  create(char const*, unsigned int)
  createWithTexture(cocos2d::CCTexture2D*)
  createWithTexture(cocos2d::CCTexture2D*, unsigned int)
  draw()
  getAtlasCapacity()
  getBlendFunc()
  getTexture()
  getUsedAtlasCapacity()
  highestAtlasIndexInChild(cocos2d::CCSprite*)
  increaseAtlasCapacity(unsigned int)
  increaseAtlasCapacity()
  init()
  initWithFile(char const*, unsigned int)
  initWithTexture(cocos2d::CCTexture2D*, unsigned int)
  insertChild(cocos2d::CCSprite*, unsigned int)
  insertQuadFromSprite(cocos2d::CCSprite*, unsigned int)
  lowestAtlasIndexInChild(cocos2d::CCSprite*)
  manualSortAllChildren()
  rebuildIndexInOrder(cocos2d::CCSprite*, unsigned int)
  removeAllChildrenWithCleanup(bool)
  removeChild(cocos2d::CCNode*, bool)
  removeChildAtIndex(unsigned int, bool)
  removeSpriteFromAtlas(cocos2d::CCSprite*)
  reorderBatch(bool)
  reorderChild(cocos2d::CCNode*, int)
  setBlendFunc(cocos2d::_ccBlendFunc)
  setTexture(cocos2d::CCTexture2D*)
  sortAllChildren()
  swap(int, int)
  updateAtlasIndex(cocos2d::CCSprite*, int*)
  updateBlendFunc()
  updateQuadFromSprite(cocos2d::CCSprite*, unsigned int)
  visit()
  virtual addChild(cocos2d::CCNode *)
  virtual addChild(cocos2d::CCNode *,int)
  virtual addChild(cocos2d::CCNode *,int,int)
  virtual draw(void)
  virtual getBlendFunc(void)
  virtual getTexture(void)
  virtual init(void)
  virtual removeAllChildrenWithCleanup(bool)
  virtual removeChild(cocos2d::CCNode *,bool)
  virtual reorderChild(cocos2d::CCNode *,int)
  virtual setBlendFunc(cocos2d::_ccBlendFunc)
  virtual setTexture(cocos2d::CCTexture2D *)
  virtual sortAllChildren(void)
  virtual visit(void)
}
class cocos2d::CCSpriteExtra : cocos2d::CCSprite {
}
class cocos2d::CCSpriteFrame : cocos2d::CCObject {
  CCSpriteFrame()
  copyWithZone(cocos2d::CCZone*)
  create(char const*, cocos2d::CCRect const&)
  create(char const*, cocos2d::CCRect const&, bool, cocos2d::CCPoint const&, cocos2d::CCSize const&)
  createWithTexture(cocos2d::CCTexture2D*, cocos2d::CCRect const&)
  createWithTexture(cocos2d::CCTexture2D*, cocos2d::CCRect const&, bool, cocos2d::CCPoint const&, cocos2d::CCSize const&)
  getOffset()
  getOffsetInPixels()
  getTexture()
  initWithTexture(cocos2d::CCTexture2D*, cocos2d::CCRect const&)
  initWithTexture(cocos2d::CCTexture2D*, cocos2d::CCRect const&, bool, cocos2d::CCPoint const&, cocos2d::CCSize const&)
  initWithTextureFilename(char const*, cocos2d::CCRect const&)
  initWithTextureFilename(char const*, cocos2d::CCRect const&, bool, cocos2d::CCPoint const&, cocos2d::CCSize const&)
  setOffset(cocos2d::CCPoint const&)
  setOffsetInPixels(cocos2d::CCPoint const&)
  setRect(cocos2d::CCRect const&)
  setRectInPixels(cocos2d::CCRect const&)
  setTexture(cocos2d::CCTexture2D*)
  virtual copyWithZone(cocos2d::CCZone *)
}
class cocos2d::CCSpriteFrameCache : cocos2d::CCObject {
  addSpriteFrame(cocos2d::CCSpriteFrame*, char const*)
  addSpriteFramesWithDictionary(cocos2d::CCDictionary*, cocos2d::CCTexture2D*)
  addSpriteFramesWithFile(char const*)
  addSpriteFramesWithFile(char const*, cocos2d::CCTexture2D*)
  addSpriteFramesWithFile(char const*, char const*)
  init()
  purgeSharedSpriteFrameCache()
  removeSpriteFrameByName(char const*)
  removeSpriteFrames()
  removeSpriteFramesFromDictionary(cocos2d::CCDictionary*)
  removeSpriteFramesFromFile(char const*)
  removeSpriteFramesFromTexture(cocos2d::CCTexture2D*)
  removeUnusedSpriteFrames()
  sharedSpriteFrameCache()
  spriteFrameByName(char const*)
}
class cocos2d::CCStandardTouchHandler : cocos2d::CCTouchHandler {
  handlerWithDelegate(cocos2d::CCTouchDelegate*, int)
  initWithDelegate(cocos2d::CCTouchDelegate*, int)
  virtual initWithDelegate(cocos2d::CCTouchDelegate *,int)
}
class cocos2d::CCStopGrid : cocos2d::CCActionInstant {
  create()
  startWithTarget(cocos2d::CCNode*)
  virtual startWithTarget(cocos2d::CCNode *)
}
class cocos2d::CCString : cocos2d::CCObject {
  CCString(char const*)
  CCString(cocos2d::CCString const&)
  CCString(std::string const&)
  CCString()
  acceptVisitor(cocos2d::CCDataVisitor&)
  boolValue()
  compare(char const*)
  copyWithZone(cocos2d::CCZone*)
  create(std::string const&)
  createWithContentsOfFile(char const*)
  createWithData(unsigned char const*, unsigned long)
  createWithFormat(char const*, ...)
  doubleValue()
  floatValue()
  getCString()
  initWithFormat(char const*, ...)
  initWithFormatAndValist(char const*, std::__va_list)
  intValue()
  isEqual(cocos2d::CCObject const*)
  length()
  operator=(cocos2d::CCString const&)
  uintValue()
  virtual acceptVisitor(cocos2d::CCDataVisitor &)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual isEqual(cocos2d::CCObject const*)
}
class cocos2d::CCTargetedAction : cocos2d::CCActionInterval {
  CCTargetedAction()
  copyWithZone(cocos2d::CCZone*)
  create(cocos2d::CCNode*, cocos2d::CCFiniteTimeAction*)
  initWithTarget(cocos2d::CCNode*, cocos2d::CCFiniteTimeAction*)
  startWithTarget(cocos2d::CCNode*)
  stop()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual stop(void)
  virtual update(float)
}
class cocos2d::CCTargetedTouchHandler : cocos2d::CCTouchHandler {
  getClaimedTouches()
  handlerWithDelegate(cocos2d::CCTouchDelegate*, int, bool)
  initWithDelegate(cocos2d::CCTouchDelegate*, int, bool)
  isSwallowsTouches()
  setSwallowsTouches(bool)
}
class cocos2d::CCTextFieldDelegate {
  onDraw(cocos2d::CCTextFieldTTF*)
  onTextFieldAttachWithIME(cocos2d::CCTextFieldTTF*)
  onTextFieldDeleteBackward(cocos2d::CCTextFieldTTF*, char const*, int)
  onTextFieldDetachWithIME(cocos2d::CCTextFieldTTF*)
  onTextFieldInsertText(cocos2d::CCTextFieldTTF*, char const*, int)
  textChanged()
  virtual onDraw(cocos2d::CCTextFieldTTF *)
  virtual onTextFieldAttachWithIME(cocos2d::CCTextFieldTTF *)
  virtual onTextFieldDeleteBackward(cocos2d::CCTextFieldTTF *,char const*,int)
  virtual onTextFieldDetachWithIME(cocos2d::CCTextFieldTTF *)
  virtual onTextFieldInsertText(cocos2d::CCTextFieldTTF *,char const*,int)
  virtual textChanged(void)
}
class cocos2d::CCTextFieldTTF : cocos2d::CCLabelTTF, cocos2d::CCIMEDelegate {
  CCTextFieldTTF()
  attachWithIME()
  canAttachWithIME()
  canDetachWithIME()
  deleteBackward()
  detachWithIME()
  draw()
  getColorSpaceHolder()
  getContentText()
  getPlaceHolder()
  getString()
  initWithPlaceHolder(char const*, cocos2d::CCSize const&, cocos2d::CCTextAlignment, char const*, float)
  initWithPlaceHolder(char const*, char const*, float)
  insertText(char const*, int)
  isSecureTextEntry()
  setColorSpaceHolder(cocos2d::_ccColor3B const&)
  setPlaceHolder(char const*)
  setSecureTextEntry(bool)
  setString(char const*)
  textFieldWithPlaceHolder(char const*, cocos2d::CCSize const&, cocos2d::CCTextAlignment, char const*, float)
  textFieldWithPlaceHolder(char const*, char const*, float)
  virtual attachWithIME(void)
  virtual canAttachWithIME(void)
  virtual canDetachWithIME(void)
  virtual deleteBackward(void)
  virtual detachWithIME(void)
  virtual draw(void)
  virtual getColorSpaceHolder(void)
  virtual getContentText(void)
  virtual getPlaceHolder(void)
  virtual getString(void)
  virtual insertText(char const*,int)
  virtual isSecureTextEntry(void)
  virtual setColorSpaceHolder(cocos2d::_ccColor3B const&)
  virtual setPlaceHolder(char const*)
  virtual setSecureTextEntry(bool)
  virtual setString(char const*)
}
class cocos2d::CCTexture2D : cocos2d::CCObject {
  CCTexture2D()
  PVRImagesHavePremultipliedAlpha(bool)
  bitsPerPixelForFormat(cocos2d::CCTexture2DPixelFormat)
  bitsPerPixelForFormat()
  defaultAlphaPixelFormat()
  description()
  drawAtPoint(cocos2d::CCPoint const&)
  drawInRect(cocos2d::CCRect const&)
  generateMipmap()
  getContentSize()
  getContentSizeInPixels()
  getMaxS()
  getMaxT()
  getName()
  getPixelFormat()
  getPixelsHigh()
  getPixelsWide()
  getShaderProgram()
  hasMipmaps()
  hasPremultipliedAlpha()
  initPremultipliedATextureWithImage(cocos2d::CCImage*, unsigned int, unsigned int)
  initWithData(void const*, cocos2d::CCTexture2DPixelFormat, unsigned int, unsigned int, cocos2d::CCSize const&)
  initWithETCFile(char const*)
  initWithImage(cocos2d::CCImage*)
  initWithPVRFile(char const*)
  initWithString(char const*, cocos2d::_ccFontDefinition*)
  initWithString(char const*, char const*, float)
  initWithString(char const*, char const*, float, cocos2d::CCSize const&, cocos2d::CCTextAlignment, cocos2d::CCVerticalTextAlignment)
  keepData(void*, unsigned int)
  releaseData(void*)
  releaseGLTexture()
  setAliasTexParameters()
  setAntiAliasTexParameters()
  setDefaultAlphaPixelFormat(cocos2d::CCTexture2DPixelFormat)
  setMaxS(float)
  setMaxT(float)
  setShaderProgram(cocos2d::CCGLProgram*)
  setTexParameters(cocos2d::_ccTexParams*)
  stringForFormat()
  virtual getContentSize(void)
  virtual getMaxS(void)
  virtual getMaxT(void)
  virtual getName(void)
  virtual getPixelFormat(void)
  virtual getPixelsHigh(void)
  virtual getPixelsWide(void)
  virtual getShaderProgram(void)
  virtual setMaxS(float)
  virtual setMaxT(float)
  virtual setShaderProgram(cocos2d::CCGLProgram *)
}
class cocos2d::CCTextureAtlas : cocos2d::CCObject {
  CCTextureAtlas()
  create(char const*, unsigned int)
  createWithTexture(cocos2d::CCTexture2D*, unsigned int)
  description()
  drawNumberOfQuads(unsigned int)
  drawNumberOfQuads(unsigned int, unsigned int)
  drawQuads()
  fillWithEmptyQuadsFromIndex(unsigned int, unsigned int)
  getCapacity()
  getQuads()
  getTexture()
  getTotalQuads()
  increaseTotalQuadsWith(unsigned int)
  initWithFile(char const*, unsigned int)
  initWithTexture(cocos2d::CCTexture2D*, unsigned int)
  insertQuad(cocos2d::_ccV3F_C4B_T2F_Quad*, unsigned int)
  insertQuadFromIndex(unsigned int, unsigned int)
  insertQuads(cocos2d::_ccV3F_C4B_T2F_Quad*, unsigned int, unsigned int)
  listenBackToForeground(cocos2d::CCObject*)
  mapBuffers()
  moveQuadsFromIndex(unsigned int, unsigned int)
  moveQuadsFromIndex(unsigned int, unsigned int, unsigned int)
  removeAllQuads()
  removeQuadAtIndex(unsigned int)
  removeQuadsAtIndex(unsigned int, unsigned int)
  resizeCapacity(unsigned int)
  setQuads(cocos2d::_ccV3F_C4B_T2F_Quad*)
  setTexture(cocos2d::CCTexture2D*)
  setupIndices()
  setupVBO()
  updateQuad(cocos2d::_ccV3F_C4B_T2F_Quad*, unsigned int)
  virtual getCapacity(void)
  virtual getQuads(void)
  virtual getTexture(void)
  virtual getTotalQuads(void)
  virtual setQuads(cocos2d::_ccV3F_C4B_T2F_Quad *)
  virtual setTexture(cocos2d::CCTexture2D *)
}
class cocos2d::CCTextureCache : cocos2d::CCObject {
  CCTextureCache()
  addETCImage(char const*)
  addImage(char const*, bool)
  addImageAsync(char const*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
  addImageAsyncCallBack(float)
  addPVRImage(char const*)
  addUIImage(cocos2d::CCImage*, char const*)
  description()
  dumpCachedTextureInfo()
  purgeSharedTextureCache()
  reloadAllTextures()
  reloadTexture(char const*)
  removeAllTextures()
  removeTexture(cocos2d::CCTexture2D*)
  removeTextureForKey(char const*)
  removeUnusedTextures()
  sharedTextureCache()
  snapshotTextures()
  textureForKey(char const*)
}
class cocos2d::CCTextureETC : cocos2d::CCObject {
  CCTextureETC()
  getHeight()
  getName()
  getWidth()
  initWithFile(char const*)
  loadTexture(char const*)
}
class cocos2d::CCTextureProtocol : cocos2d::CCBlendProtocol {
}
class cocos2d::CCTexturePVR : cocos2d::CCObject {
  CCTexturePVR()
  create(char const*)
  createGLTexture()
  initWithContentsOfFile(char const*)
  unpackPVRv2Data(unsigned char*, unsigned int)
  unpackPVRv3Data(unsigned char*, unsigned int)
}
class cocos2d::CCTiledGrid3D : cocos2d::CCGridBase {
  CCTiledGrid3D()
  blit()
  calculateVertexPoints()
  create(cocos2d::CCSize const&)
  create(cocos2d::CCSize const&, cocos2d::CCTexture2D*, bool)
  originalTile(cocos2d::CCPoint const&)
  reuse()
  setTile(cocos2d::CCPoint const&, cocos2d::_ccQuad3 const&)
  tile(cocos2d::CCPoint const&)
  virtual blit(void)
  virtual calculateVertexPoints(void)
  virtual reuse(void)
}
class cocos2d::CCTiledGrid3DAction : cocos2d::CCGridAction {
  CCTiledGrid3DAction()
  create(float, cocos2d::CCSize const&)
  getGrid()
  originalTile(cocos2d::CCPoint const&)
  setTile(cocos2d::CCPoint const&, cocos2d::_ccQuad3 const&)
  tile(cocos2d::CCPoint const&)
  virtual getGrid(void)
}
class cocos2d::CCTileMapAtlas : cocos2d::CCAtlasNode {
  CCTileMapAtlas()
  calculateItemsToRender()
  create(char const*, char const*, int, int)
  getTGAInfo()
  initWithTileFile(char const*, char const*, int, int)
  loadTGAfile(char const*)
  releaseMap()
  setTGAInfo(cocos2d::sImageTGA*)
  setTile(cocos2d::_ccColor3B const&, cocos2d::CCPoint const&)
  tileAt(cocos2d::CCPoint const&)
  updateAtlasValueAt(cocos2d::CCPoint const&, cocos2d::_ccColor3B const&, unsigned int)
  updateAtlasValues()
  virtual getTGAInfo(void)
  virtual setTGAInfo(cocos2d::sImageTGA *)
  virtual updateAtlasValues(void)
}
class cocos2d::CCTimer : cocos2d::CCObject {
  CCTimer()
  getInterval()
  getSelector()
  initWithScriptHandler(int, float)
  initWithTarget(cocos2d::CCObject*, void (cocos2d::CCObject::*)(float))
  initWithTarget(cocos2d::CCObject*, void (cocos2d::CCObject::*)(float), float, unsigned int, float)
  setInterval(float)
  timerWithScriptHandler(int, float)
  timerWithTarget(cocos2d::CCObject*, void (cocos2d::CCObject::*)(float))
  timerWithTarget(cocos2d::CCObject*, void (cocos2d::CCObject::*)(float), float)
  update(float)
  virtual update(float)
}
class cocos2d::CCTintBy : cocos2d::CCActionInterval {
  copyWithZone(cocos2d::CCZone*)
  create(float, short, short, short)
  initWithDuration(float, short, short, short)
  reverse()
  startWithTarget(cocos2d::CCNode*)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCTintTo : cocos2d::CCActionInterval {
  copyWithZone(cocos2d::CCZone*)
  create(float, unsigned char, unsigned char, unsigned char)
  initWithDuration(float, unsigned char, unsigned char, unsigned char)
  startWithTarget(cocos2d::CCNode*)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCTMXLayer : cocos2d::CCSpriteBatchNode {
  CCTMXLayer()
  addChild(cocos2d::CCNode*, int, int)
  appendTileForGID(unsigned int, cocos2d::CCPoint const&)
  atlasIndexForExistantZ(unsigned int)
  atlasIndexForNewZ(int)
  calculateLayerOffset(cocos2d::CCPoint const&)
  create(cocos2d::CCTMXTilesetInfo*, cocos2d::CCTMXLayerInfo*, cocos2d::CCTMXMapInfo*)
  getProperties()
  getTileSet()
  initWithTilesetInfo(cocos2d::CCTMXTilesetInfo*, cocos2d::CCTMXLayerInfo*, cocos2d::CCTMXMapInfo*)
  insertTileForGID(unsigned int, cocos2d::CCPoint const&)
  parseInternalProperties()
  positionAt(cocos2d::CCPoint const&)
  positionForHexAt(cocos2d::CCPoint const&)
  positionForIsoAt(cocos2d::CCPoint const&)
  positionForOrthoAt(cocos2d::CCPoint const&)
  propertyNamed(char const*)
  releaseMap()
  removeChild(cocos2d::CCNode*, bool)
  removeTileAt(cocos2d::CCPoint const&)
  reusedTileWithRect(cocos2d::CCRect)
  setProperties(cocos2d::CCDictionary*)
  setTileGID(unsigned int, cocos2d::CCPoint const&)
  setTileGID(unsigned int, cocos2d::CCPoint const&, cocos2d::ccTMXTileFlags_)
  setTileSet(cocos2d::CCTMXTilesetInfo*)
  setupTileSprite(cocos2d::CCSprite*, cocos2d::CCPoint, unsigned int)
  setupTiles()
  tileAt(cocos2d::CCPoint const&)
  tileGIDAt(cocos2d::CCPoint const&)
  tileGIDAt(cocos2d::CCPoint const&, cocos2d::ccTMXTileFlags_*)
  updateTileForGID(unsigned int, cocos2d::CCPoint const&)
  vertexZForPos(cocos2d::CCPoint const&)
  virtual addChild(cocos2d::CCNode *,int,int)
  virtual getProperties(void)
  virtual getTileSet(void)
  virtual removeChild(cocos2d::CCNode *,bool)
  virtual setProperties(cocos2d::CCDictionary *)
  virtual setTileSet(cocos2d::CCTMXTilesetInfo *)
}
class cocos2d::CCTMXLayerInfo : cocos2d::CCObject {
  CCTMXLayerInfo()
  getProperties()
  setProperties(cocos2d::CCDictionary*)
  virtual getProperties(void)
  virtual setProperties(cocos2d::CCDictionary *)
}
class cocos2d::CCTMXMapInfo : cocos2d::CCObject, cocos2d::CCSAXDelegator {
  CCTMXMapInfo()
  endElement(void*, char const*)
  formatWithTMXFile(char const*)
  formatWithXML(char const*, char const*)
  getLayers()
  getObjectGroups()
  getProperties()
  getTileProperties()
  getTilesets()
  initWithTMXFile(char const*)
  initWithXML(char const*, char const*)
  internalInit(char const*, char const*)
  parseXMLFile(char const*)
  parseXMLString(char const*)
  setLayers(cocos2d::CCArray*)
  setObjectGroups(cocos2d::CCArray*)
  setProperties(cocos2d::CCDictionary*)
  setTileProperties(cocos2d::CCDictionary*)
  setTilesets(cocos2d::CCArray*)
  startElement(void*, char const*, char const**)
  textHandler(void*, char const*, int)
  virtual endElement(void *,char const*)
  virtual getLayers(void)
  virtual getObjectGroups(void)
  virtual getProperties(void)
  virtual getTilesets(void)
  virtual setLayers(cocos2d::CCArray *)
  virtual setObjectGroups(cocos2d::CCArray *)
  virtual setProperties(cocos2d::CCDictionary *)
  virtual setTilesets(cocos2d::CCArray *)
  virtual startElement(void *,char const*,char const**)
  virtual textHandler(void *,char const*,int)
}
class cocos2d::CCTMXObjectGroup : cocos2d::CCObject {
  CCTMXObjectGroup()
  getObjects()
  getProperties()
  objectNamed(char const*)
  propertyNamed(char const*)
  setObjects(cocos2d::CCArray*)
  setProperties(cocos2d::CCDictionary*)
  virtual getObjects(void)
  virtual getProperties(void)
  virtual setObjects(cocos2d::CCArray *)
  virtual setProperties(cocos2d::CCDictionary *)
}
class cocos2d::CCTMXTiledMap : cocos2d::CCNode {
  CCTMXTiledMap()
  buildWithMapInfo(cocos2d::CCTMXMapInfo*)
  create(char const*)
  createWithXML(char const*, char const*)
  getObjectGroups()
  getProperties()
  initWithTMXFile(char const*)
  initWithXML(char const*, char const*)
  layerNamed(char const*)
  objectGroupNamed(char const*)
  parseLayer(cocos2d::CCTMXLayerInfo*, cocos2d::CCTMXMapInfo*)
  propertiesForGID(int)
  propertyNamed(char const*)
  setObjectGroups(cocos2d::CCArray*)
  setProperties(cocos2d::CCDictionary*)
  tilesetForLayer(cocos2d::CCTMXLayerInfo*, cocos2d::CCTMXMapInfo*)
  virtual getObjectGroups(void)
  virtual getProperties(void)
  virtual setObjectGroups(cocos2d::CCArray *)
  virtual setProperties(cocos2d::CCDictionary *)
}
class cocos2d::CCTMXTilesetInfo : cocos2d::CCObject {
  CCTMXTilesetInfo()
  rectForGID(unsigned int)
}
class cocos2d::CCToggleVisibility : cocos2d::CCActionInstant {
  copyWithZone(cocos2d::CCZone*)
  create()
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual update(float)
}
class cocos2d::CCTouch : cocos2d::CCObject {
  getDelta()
  getLocation()
  getLocationInView()
  getPreviousLocation()
  getPreviousLocationInView()
  getStartLocation()
  getStartLocationInView()
}
class cocos2d::CCTouchDelegate {
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchesBegan(cocos2d::CCSet*, cocos2d::CCEvent*)
  ccTouchesCancelled(cocos2d::CCSet*, cocos2d::CCEvent*)
  ccTouchesEnded(cocos2d::CCSet*, cocos2d::CCEvent*)
  ccTouchesMoved(cocos2d::CCSet*, cocos2d::CCEvent*)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchesBegan(cocos2d::CCSet *,cocos2d::CCEvent *)
  virtual ccTouchesCancelled(cocos2d::CCSet *,cocos2d::CCEvent *)
  virtual ccTouchesEnded(cocos2d::CCSet *,cocos2d::CCEvent *)
  virtual ccTouchesMoved(cocos2d::CCSet *,cocos2d::CCEvent *)
}
class cocos2d::CCTouchDispatcher : cocos2d::CCObject, cocos2d::EGLTouchDelegate {
  addStandardDelegate(cocos2d::CCTouchDelegate*, int)
  addTargetedDelegate(cocos2d::CCTouchDelegate*, int, bool)
  decrementForcePrio(int)
  findHandler(cocos2d::CCTouchDelegate*)
  findHandler(cocos2d::CCArray*, cocos2d::CCTouchDelegate*)
  forceAddHandler(cocos2d::CCTouchHandler*, cocos2d::CCArray*)
  forceRemoveAllDelegates()
  forceRemoveDelegate(cocos2d::CCTouchDelegate*)
  incrementForcePrio(int)
  init()
  isDispatchEvents()
  rearrangeHandlers(cocos2d::CCArray*)
  removeAllDelegates()
  removeDelegate(cocos2d::CCTouchDelegate*)
  setDispatchEvents(bool)
  setPriority(int, cocos2d::CCTouchDelegate*)
  touches(cocos2d::CCSet*, cocos2d::CCEvent*, unsigned int)
  touchesBegan(cocos2d::CCSet*, cocos2d::CCEvent*)
  touchesCancelled(cocos2d::CCSet*, cocos2d::CCEvent*)
  touchesEnded(cocos2d::CCSet*, cocos2d::CCEvent*)
  touchesMoved(cocos2d::CCSet*, cocos2d::CCEvent*)
  virtual touchesBegan(cocos2d::CCSet *,cocos2d::CCEvent *)
  virtual touchesCancelled(cocos2d::CCSet *,cocos2d::CCEvent *)
  virtual touchesEnded(cocos2d::CCSet *,cocos2d::CCEvent *)
  virtual touchesMoved(cocos2d::CCSet *,cocos2d::CCEvent *)
}
class cocos2d::CCTouchHandler : cocos2d::CCObject {
  getDelegate()
  getEnabledSelectors()
  getPriority()
  handlerWithDelegate(cocos2d::CCTouchDelegate*, int)
  initWithDelegate(cocos2d::CCTouchDelegate*, int)
  setDelegate(cocos2d::CCTouchDelegate*)
  setEnalbedSelectors(int)
  setPriority(int)
  virtual initWithDelegate(cocos2d::CCTouchDelegate *,int)
}
class cocos2d::CCTouchScriptHandlerEntry : cocos2d::CCScriptHandlerEntry {
  create(int, bool, int, bool)
  init(bool, int, bool)
}
class cocos2d::CCTransitionCrossFade : cocos2d::CCTransitionScene {
  CCTransitionCrossFade()
  create(float, cocos2d::CCScene*)
  draw()
  onEnter()
  onExit()
  virtual draw(void)
  virtual onEnter(void)
  virtual onExit(void)
}
class cocos2d::CCTransitionEaseScene {
}
class cocos2d::CCTransitionFade : cocos2d::CCTransitionScene {
  CCTransitionFade()
  create(float, cocos2d::CCScene*)
  create(float, cocos2d::CCScene*, cocos2d::_ccColor3B const&)
  initWithDuration(float, cocos2d::CCScene*)
  initWithDuration(float, cocos2d::CCScene*, cocos2d::_ccColor3B const&)
  onEnter()
  onExit()
  virtual initWithDuration(float,cocos2d::CCScene *)
  virtual initWithDuration(float,cocos2d::CCScene *,cocos2d::_ccColor3B const&)
  virtual onEnter(void)
  virtual onExit(void)
}
class cocos2d::CCTransitionFadeBL : cocos2d::CCTransitionFadeTR {
  CCTransitionFadeBL()
  actionWithSize(cocos2d::CCSize const&)
  create(float, cocos2d::CCScene*)
  virtual actionWithSize(cocos2d::CCSize const&)
}
class cocos2d::CCTransitionFadeDown : cocos2d::CCTransitionFadeTR {
  CCTransitionFadeDown()
  actionWithSize(cocos2d::CCSize const&)
  create(float, cocos2d::CCScene*)
  virtual actionWithSize(cocos2d::CCSize const&)
}
class cocos2d::CCTransitionFadeTR : cocos2d::CCTransitionScene, cocos2d::CCTransitionEaseScene {
  CCTransitionFadeTR()
  actionWithSize(cocos2d::CCSize const&)
  create(float, cocos2d::CCScene*)
  easeActionWithAction(cocos2d::CCActionInterval*)
  onEnter()
  sceneOrder()
  virtual actionWithSize(cocos2d::CCSize const&)
  virtual easeActionWithAction(cocos2d::CCActionInterval *)
  virtual onEnter(void)
  virtual sceneOrder(void)
}
class cocos2d::CCTransitionFadeUp : cocos2d::CCTransitionFadeTR {
  CCTransitionFadeUp()
  actionWithSize(cocos2d::CCSize const&)
  create(float, cocos2d::CCScene*)
  virtual actionWithSize(cocos2d::CCSize const&)
}
class cocos2d::CCTransitionFlipAngular : cocos2d::CCTransitionSceneOriented {
  CCTransitionFlipAngular()
  create(float, cocos2d::CCScene*)
  create(float, cocos2d::CCScene*, cocos2d::tOrientation)
  onEnter()
  virtual onEnter(void)
}
class cocos2d::CCTransitionFlipX : cocos2d::CCTransitionSceneOriented {
  CCTransitionFlipX()
  create(float, cocos2d::CCScene*)
  create(float, cocos2d::CCScene*, cocos2d::tOrientation)
  onEnter()
  virtual onEnter(void)
}
class cocos2d::CCTransitionFlipY : cocos2d::CCTransitionSceneOriented {
  CCTransitionFlipY()
  create(float, cocos2d::CCScene*)
  create(float, cocos2d::CCScene*, cocos2d::tOrientation)
  onEnter()
  virtual onEnter(void)
}
class cocos2d::CCTransitionJumpZoom : cocos2d::CCTransitionScene {
  CCTransitionJumpZoom()
  create(float, cocos2d::CCScene*)
  onEnter()
  virtual onEnter(void)
}
class cocos2d::CCTransitionMoveInB : cocos2d::CCTransitionMoveInL {
  CCTransitionMoveInB()
  create(float, cocos2d::CCScene*)
  initScenes()
  virtual initScenes(void)
}
class cocos2d::CCTransitionMoveInL : cocos2d::CCTransitionScene, cocos2d::CCTransitionEaseScene {
  CCTransitionMoveInL()
  action()
  create(float, cocos2d::CCScene*)
  easeActionWithAction(cocos2d::CCActionInterval*)
  initScenes()
  onEnter()
  virtual action(void)
  virtual easeActionWithAction(cocos2d::CCActionInterval *)
  virtual initScenes(void)
  virtual onEnter(void)
}
class cocos2d::CCTransitionMoveInR : cocos2d::CCTransitionMoveInL {
  CCTransitionMoveInR()
  create(float, cocos2d::CCScene*)
  initScenes()
  virtual initScenes(void)
}
class cocos2d::CCTransitionMoveInT : cocos2d::CCTransitionMoveInL {
  CCTransitionMoveInT()
  create(float, cocos2d::CCScene*)
  initScenes()
  virtual initScenes(void)
}
class cocos2d::CCTransitionPageTurn : cocos2d::CCTransitionScene {
  CCTransitionPageTurn()
  actionWithSize(cocos2d::CCSize const&)
  create(float, cocos2d::CCScene*, bool)
  initWithDuration(float, cocos2d::CCScene*, bool)
  onEnter()
  sceneOrder()
  virtual initWithDuration(float,cocos2d::CCScene *,bool)
  virtual onEnter(void)
  virtual sceneOrder(void)
}
class cocos2d::CCTransitionProgress : cocos2d::CCTransitionScene {
  CCTransitionProgress()
  create(float, cocos2d::CCScene*)
  onEnter()
  onExit()
  progressTimerNodeWithRenderTexture(cocos2d::CCRenderTexture*)
  sceneOrder()
  setupTransition()
  virtual onEnter(void)
  virtual onExit(void)
  virtual progressTimerNodeWithRenderTexture(cocos2d::CCRenderTexture *)
  virtual sceneOrder(void)
  virtual setupTransition(void)
}
class cocos2d::CCTransitionProgressHorizontal : cocos2d::CCTransitionProgress {
  create(float, cocos2d::CCScene*)
  progressTimerNodeWithRenderTexture(cocos2d::CCRenderTexture*)
  virtual progressTimerNodeWithRenderTexture(cocos2d::CCRenderTexture *)
}
class cocos2d::CCTransitionProgressInOut : cocos2d::CCTransitionProgress {
  create(float, cocos2d::CCScene*)
  progressTimerNodeWithRenderTexture(cocos2d::CCRenderTexture*)
  sceneOrder()
  setupTransition()
  virtual progressTimerNodeWithRenderTexture(cocos2d::CCRenderTexture *)
  virtual sceneOrder(void)
  virtual setupTransition(void)
}
class cocos2d::CCTransitionProgressOutIn : cocos2d::CCTransitionProgress {
  create(float, cocos2d::CCScene*)
  progressTimerNodeWithRenderTexture(cocos2d::CCRenderTexture*)
  virtual progressTimerNodeWithRenderTexture(cocos2d::CCRenderTexture *)
}
class cocos2d::CCTransitionProgressRadialCCW : cocos2d::CCTransitionProgress {
  create(float, cocos2d::CCScene*)
  progressTimerNodeWithRenderTexture(cocos2d::CCRenderTexture*)
  virtual progressTimerNodeWithRenderTexture(cocos2d::CCRenderTexture *)
}
class cocos2d::CCTransitionProgressRadialCW : cocos2d::CCTransitionProgress {
  create(float, cocos2d::CCScene*)
  progressTimerNodeWithRenderTexture(cocos2d::CCRenderTexture*)
  virtual progressTimerNodeWithRenderTexture(cocos2d::CCRenderTexture *)
}
class cocos2d::CCTransitionProgressVertical : cocos2d::CCTransitionProgress {
  create(float, cocos2d::CCScene*)
  progressTimerNodeWithRenderTexture(cocos2d::CCRenderTexture*)
  virtual progressTimerNodeWithRenderTexture(cocos2d::CCRenderTexture *)
}
class cocos2d::CCTransitionRotoZoom : cocos2d::CCTransitionScene {
  CCTransitionRotoZoom()
  create(float, cocos2d::CCScene*)
  onEnter()
  virtual onEnter(void)
}
class cocos2d::CCTransitionScene : cocos2d::CCScene {
  CCTransitionScene()
  cleanup()
  create(float, cocos2d::CCScene*)
  draw()
  finish()
  hideOutShowIn()
  initWithDuration(float, cocos2d::CCScene*)
  onEnter()
  onExit()
  sceneOrder()
  setNewScene(float)
  virtual cleanup(void)
  virtual draw(void)
  virtual initWithDuration(float,cocos2d::CCScene *)
  virtual onEnter(void)
  virtual onExit(void)
  virtual sceneOrder(void)
}
class cocos2d::CCTransitionSceneOriented : cocos2d::CCTransitionScene {
  CCTransitionSceneOriented()
  create(float, cocos2d::CCScene*, cocos2d::tOrientation)
  initWithDuration(float, cocos2d::CCScene*, cocos2d::tOrientation)
  virtual initWithDuration(float,cocos2d::CCScene *,cocos2d::tOrientation)
}
class cocos2d::CCTransitionShrinkGrow : cocos2d::CCTransitionScene, cocos2d::CCTransitionEaseScene {
  CCTransitionShrinkGrow()
  create(float, cocos2d::CCScene*)
  easeActionWithAction(cocos2d::CCActionInterval*)
  onEnter()
  virtual easeActionWithAction(cocos2d::CCActionInterval *)
  virtual onEnter(void)
}
class cocos2d::CCTransitionSlideInB : cocos2d::CCTransitionSlideInL {
  CCTransitionSlideInB()
  action()
  create(float, cocos2d::CCScene*)
  initScenes()
  sceneOrder()
  virtual action(void)
  virtual initScenes(void)
  virtual sceneOrder(void)
}
class cocos2d::CCTransitionSlideInL : cocos2d::CCTransitionScene, cocos2d::CCTransitionEaseScene {
  CCTransitionSlideInL()
  action()
  create(float, cocos2d::CCScene*)
  easeActionWithAction(cocos2d::CCActionInterval*)
  initScenes()
  onEnter()
  sceneOrder()
  virtual action(void)
  virtual easeActionWithAction(cocos2d::CCActionInterval *)
  virtual initScenes(void)
  virtual onEnter(void)
  virtual sceneOrder(void)
}
class cocos2d::CCTransitionSlideInR : cocos2d::CCTransitionSlideInL {
  CCTransitionSlideInR()
  action()
  create(float, cocos2d::CCScene*)
  initScenes()
  sceneOrder()
  virtual action(void)
  virtual initScenes(void)
  virtual sceneOrder(void)
}
class cocos2d::CCTransitionSlideInT : cocos2d::CCTransitionSlideInL {
  CCTransitionSlideInT()
  action()
  create(float, cocos2d::CCScene*)
  initScenes()
  sceneOrder()
  virtual action(void)
  virtual initScenes(void)
  virtual sceneOrder(void)
}
class cocos2d::CCTransitionSplitCols : cocos2d::CCTransitionScene, cocos2d::CCTransitionEaseScene {
  CCTransitionSplitCols()
  action()
  create(float, cocos2d::CCScene*)
  easeActionWithAction(cocos2d::CCActionInterval*)
  onEnter()
  virtual action(void)
  virtual easeActionWithAction(cocos2d::CCActionInterval *)
  virtual onEnter(void)
}
class cocos2d::CCTransitionSplitRows : cocos2d::CCTransitionSplitCols {
  CCTransitionSplitRows()
  action()
  create(float, cocos2d::CCScene*)
  virtual action(void)
}
class cocos2d::CCTransitionTurnOffTiles : cocos2d::CCTransitionScene, cocos2d::CCTransitionEaseScene {
  CCTransitionTurnOffTiles()
  create(float, cocos2d::CCScene*)
  easeActionWithAction(cocos2d::CCActionInterval*)
  onEnter()
  sceneOrder()
  virtual easeActionWithAction(cocos2d::CCActionInterval *)
  virtual onEnter(void)
  virtual sceneOrder(void)
}
class cocos2d::CCTransitionZoomFlipAngular : cocos2d::CCTransitionSceneOriented {
  CCTransitionZoomFlipAngular()
  create(float, cocos2d::CCScene*)
  create(float, cocos2d::CCScene*, cocos2d::tOrientation)
  onEnter()
  virtual onEnter(void)
}
class cocos2d::CCTransitionZoomFlipX : cocos2d::CCTransitionSceneOriented {
  CCTransitionZoomFlipX()
  create(float, cocos2d::CCScene*)
  create(float, cocos2d::CCScene*, cocos2d::tOrientation)
  onEnter()
  virtual onEnter(void)
}
class cocos2d::CCTransitionZoomFlipY : cocos2d::CCTransitionSceneOriented {
  CCTransitionZoomFlipY()
  create(float, cocos2d::CCScene*)
  create(float, cocos2d::CCScene*, cocos2d::tOrientation)
  onEnter()
  virtual onEnter(void)
}
class cocos2d::CCTurnOffTiles : cocos2d::CCTiledGrid3DAction {
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::CCSize const&)
  create(float, cocos2d::CCSize const&, unsigned int)
  initWithDuration(float, cocos2d::CCSize const&, unsigned int)
  shuffle(unsigned int*, unsigned int)
  startWithTarget(cocos2d::CCNode*)
  turnOffTile(cocos2d::CCPoint const&)
  turnOnTile(cocos2d::CCPoint const&)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual initWithDuration(float,cocos2d::CCSize const&,uint)
  virtual startWithTarget(cocos2d::CCNode *)
  virtual update(float)
}
class cocos2d::CCTwirl : cocos2d::CCGrid3DAction {
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::CCSize const&, cocos2d::CCPoint, unsigned int, float)
  initWithDuration(float, cocos2d::CCSize const&, cocos2d::CCPoint, unsigned int, float)
  setPosition(cocos2d::CCPoint const&)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual update(float)
}
class cocos2d::CCWaves : cocos2d::CCGrid3DAction {
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::CCSize const&, unsigned int, float, bool, bool)
  initWithDuration(float, cocos2d::CCSize const&, unsigned int, float, bool, bool)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual update(float)
}
class cocos2d::CCWaves3D : cocos2d::CCGrid3DAction {
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::CCSize const&, unsigned int, float)
  initWithDuration(float, cocos2d::CCSize const&, unsigned int, float)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual update(float)
}
class cocos2d::CCWavesTiles3D : cocos2d::CCTiledGrid3DAction {
  copyWithZone(cocos2d::CCZone*)
  create(float, cocos2d::CCSize const&, unsigned int, float)
  initWithDuration(float, cocos2d::CCSize const&, unsigned int, float)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual initWithDuration(float,cocos2d::CCSize const&,uint,float)
  virtual update(float)
}
class cocos2d::EGLTouchDelegate {
}
class cocos2d::extension::AssetsManager {
  AssetsManager(char const*, char const*, char const*)
  Helper::Helper()
  Helper::handleUpdateSucceed(cocos2d::extension::AssetsManager::_Message*)
  Helper::sendMessage(cocos2d::extension::AssetsManager::_Message*)
  Helper::update(float)
  Helper::~Helper()
  checkStoragePath()
  checkUpdate()
  createDirectory(char const*)
  deleteVersion()
  downLoad()
  getConnectionTimeout()
  getPackageUrl()
  getStoragePath()
  getVersion()
  getVersionFileUrl()
  sendErrorMessage(cocos2d::extension::AssetsManager::ErrorCode)
  setConnectionTimeout(unsigned int)
  setDelegate(cocos2d::extension::AssetsManagerDelegateProtocol*)
  setPackageUrl(char const*)
  setSearchPath()
  setStoragePath(char const*)
  setVersionFileUrl(char const*)
  uncompress()
  update()
  virtual checkUpdate(void)
  virtual update(void)
}
class cocos2d::extension::AssetsManager::Helper : cocos2d::CCObject {
  Helper()
  handleUpdateSucceed(cocos2d::extension::AssetsManager::_Message*)
  sendMessage(cocos2d::extension::AssetsManager::_Message*)
  update(float)
  virtual update(float)
}
class cocos2d::extension::CCArrayForObjectSorting : cocos2d::CCArray {
  indexOfSortedObject(cocos2d::extension::CCSortableObject*)
  insertSortedObject(cocos2d::extension::CCSortableObject*)
  objectWithObjectID(unsigned int)
  removeSortedObject(cocos2d::extension::CCSortableObject*)
  setObjectID_ofSortedObject(unsigned int, cocos2d::extension::CCSortableObject*)
}
class cocos2d::extension::CCColor3bObject : cocos2d::CCObject {
}
class cocos2d::extension::CCControl : cocos2d::CCLayerRGBA {
  CCControl()
  addHandleOfControlEvent(int, unsigned int)
  addTargetWithActionForControlEvent(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*, unsigned int), unsigned int)
  addTargetWithActionForControlEvents(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*, unsigned int), unsigned int)
  create()
  dispatchListforControlEvent(unsigned int)
  getHandleOfControlEvent(unsigned int)
  getTouchLocation(cocos2d::CCTouch*)
  hasVisibleParents()
  init()
  isEnabled()
  isHighlighted()
  isOpacityModifyRGB()
  isSelected()
  isTouchInside(cocos2d::CCTouch*)
  needsLayout()
  onEnter()
  onExit()
  registerWithTouchDispatcher()
  removeHandleOfControlEvent(unsigned int)
  removeTargetWithActionForControlEvent(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*, unsigned int), unsigned int)
  removeTargetWithActionForControlEvents(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*, unsigned int), unsigned int)
  sendActionsForControlEvents(unsigned int)
  setEnabled(bool)
  setHighlighted(bool)
  setOpacityModifyRGB(bool)
  setSelected(bool)
  virtual addTargetWithActionForControlEvents(cocos2d::CCObject *,void (cocos2d::CCObject::*)(cocos2d::CCObject *,uint),uint)
  virtual getTouchLocation(cocos2d::CCTouch *)
  virtual init(void)
  virtual isEnabled(void)
  virtual isHighlighted(void)
  virtual isOpacityModifyRGB(void)
  virtual isSelected(void)
  virtual isTouchInside(cocos2d::CCTouch *)
  virtual needsLayout(void)
  virtual onEnter(void)
  virtual onExit(void)
  virtual registerWithTouchDispatcher(void)
  virtual removeTargetWithActionForControlEvents(cocos2d::CCObject *,void (cocos2d::CCObject::*)(cocos2d::CCObject *,uint),uint)
  virtual sendActionsForControlEvents(uint)
  virtual setEnabled(bool)
  virtual setHighlighted(bool)
  virtual setOpacityModifyRGB(bool)
  virtual setSelected(bool)
}
class cocos2d::extension::CCControlButton : cocos2d::extension::CCControl {
  CCControlButton()
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create(cocos2d::extension::CCScale9Sprite*)
  create(cocos2d::CCNode*, cocos2d::extension::CCScale9Sprite*)
  create(std::string, char const*, float)
  create()
  doesAdjustBackgroundImage()
  getBackgroundSpriteForState(unsigned int)
  getColor()
  getLabelAnchorPoint()
  getOpacity()
  getPreferredSize()
  getTitleBMFontForState(unsigned int)
  getTitleColorForState(unsigned int)
  getTitleForState(unsigned int)
  getTitleLabelForState(unsigned int)
  getTitleTTFForState(unsigned int)
  getTitleTTFSizeForState(unsigned int)
  getZoomOnTouchDown()
  init()
  initWithBackgroundSprite(cocos2d::extension::CCScale9Sprite*)
  initWithLabelAndBackgroundSprite(cocos2d::CCNode*, cocos2d::extension::CCScale9Sprite*)
  initWithTitleAndFontNameAndFontSize(std::string, char const*, float)
  needsLayout()
  setAdjustBackgroundImage(bool)
  setBackgroundSprite(cocos2d::extension::CCScale9Sprite*)
  setBackgroundSpriteForState(cocos2d::extension::CCScale9Sprite*, unsigned int)
  setBackgroundSpriteFrameForState(cocos2d::CCSpriteFrame*, unsigned int)
  setColor(cocos2d::_ccColor3B const&)
  setEnabled(bool)
  setHighlighted(bool)
  setLabelAnchorPoint(cocos2d::CCPoint)
  setMargins(int, int)
  setOpacity(unsigned char)
  setPreferredSize(cocos2d::CCSize)
  setSelected(bool)
  setTitleBMFontForState(char const*, unsigned int)
  setTitleColorForState(cocos2d::_ccColor3B, unsigned int)
  setTitleForState(cocos2d::CCString*, unsigned int)
  setTitleLabel(cocos2d::CCNode*)
  setTitleLabelForState(cocos2d::CCNode*, unsigned int)
  setTitleTTFForState(char const*, unsigned int)
  setTitleTTFSizeForState(float, unsigned int)
  setZoomOnTouchDown(bool)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual getBackgroundSpriteForState(uint)
  virtual getColor(void)
  virtual getLabelAnchorPoint(void)
  virtual getOpacity(void)
  virtual getPreferredSize(void)
  virtual getTitleBMFontForState(uint)
  virtual getTitleColorForState(uint)
  virtual getTitleForState(uint)
  virtual getTitleLabelForState(uint)
  virtual getTitleTTFForState(uint)
  virtual getTitleTTFSizeForState(uint)
  virtual getZoomOnTouchDown(void)
  virtual init(void)
  virtual initWithBackgroundSprite(cocos2d::extension::CCScale9Sprite *)
  virtual initWithLabelAndBackgroundSprite(cocos2d::CCNode *,cocos2d::extension::CCScale9Sprite *)
  virtual initWithTitleAndFontNameAndFontSize(std::string,char const*,float)
  virtual needsLayout(void)
  virtual setBackgroundSpriteForState(cocos2d::extension::CCScale9Sprite *,uint)
  virtual setBackgroundSpriteFrameForState(cocos2d::CCSpriteFrame *,uint)
  virtual setColor(cocos2d::_ccColor3B const&)
  virtual setEnabled(bool)
  virtual setHighlighted(bool)
  virtual setLabelAnchorPoint(cocos2d::CCPoint)
  virtual setMargins(int,int)
  virtual setOpacity(uchar)
  virtual setPreferredSize(cocos2d::CCSize)
  virtual setSelected(bool)
  virtual setTitleBMFontForState(char const*,uint)
  virtual setTitleColorForState(cocos2d::_ccColor3B,uint)
  virtual setTitleForState(cocos2d::CCString *,uint)
  virtual setTitleLabelForState(cocos2d::CCNode *,uint)
  virtual setTitleTTFForState(char const*,uint)
  virtual setTitleTTFSizeForState(float,uint)
  virtual setZoomOnTouchDown(bool)
}
class cocos2d::extension::CCControlColourPicker : cocos2d::extension::CCControl {
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  colourPicker()
  colourSliderValueChanged(cocos2d::CCObject*, unsigned int)
  create()
  hueSliderValueChanged(cocos2d::CCObject*, unsigned int)
  init()
  setColorValue(cocos2d::_ccColor3B const&)
  updateControlPicker()
  updateHueAndControlPicker()
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual init(void)
  virtual setColorValue(cocos2d::_ccColor3B const&)
}
class cocos2d::extension::CCControlHuePicker : cocos2d::extension::CCControl {
  CCControlHuePicker()
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  checkSliderPosition(cocos2d::CCPoint, bool)
  create(cocos2d::CCNode*, cocos2d::CCPoint)
  initWithTargetAndPos(cocos2d::CCNode*, cocos2d::CCPoint)
  registerWithTouchDispatcher()
  setEnabled(bool)
  setHue(float)
  setHuePercentage(float)
  updateSliderPosition(cocos2d::CCPoint)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual initWithTargetAndPos(cocos2d::CCNode *,cocos2d::CCPoint)
  virtual registerWithTouchDispatcher(void)
  virtual setEnabled(bool)
  virtual setHue(float)
  virtual setHuePercentage(float)
}
class cocos2d::extension::CCControlPotentiometer : cocos2d::extension::CCControl {
  CCControlPotentiometer()
  angleInDegreesBetweenLineFromPoint_toPoint_toLineFromPoint_toPoint(cocos2d::CCPoint, cocos2d::CCPoint, cocos2d::CCPoint, cocos2d::CCPoint)
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create(char const*, char const*, char const*)
  distanceBetweenPointAndPoint(cocos2d::CCPoint, cocos2d::CCPoint)
  getMaximumValue()
  getMinimumValue()
  getValue()
  initWithTrackSprite_ProgressTimer_ThumbSprite(cocos2d::CCSprite*, cocos2d::CCProgressTimer*, cocos2d::CCSprite*)
  isTouchInside(cocos2d::CCTouch*)
  potentiometerBegan(cocos2d::CCPoint)
  potentiometerEnded(cocos2d::CCPoint)
  potentiometerMoved(cocos2d::CCPoint)
  setEnabled(bool)
  setMaximumValue(float)
  setMinimumValue(float)
  setValue(float)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual isTouchInside(cocos2d::CCTouch *)
  virtual setEnabled(bool)
}
class cocos2d::extension::CCControlSaturationBrightnessPicker : cocos2d::extension::CCControl {
  CCControlSaturationBrightnessPicker()
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  checkSliderPosition(cocos2d::CCPoint, bool)
  create(cocos2d::CCNode*, cocos2d::CCPoint)
  initWithTargetAndPos(cocos2d::CCNode*, cocos2d::CCPoint)
  registerWithTouchDispatcher()
  setEnabled(bool)
  updateDraggerWithHSV(cocos2d::extension::HSV)
  updateSliderPosition(cocos2d::CCPoint)
  updateWithHSV(cocos2d::extension::HSV)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual initWithTargetAndPos(cocos2d::CCNode *,cocos2d::CCPoint)
  virtual registerWithTouchDispatcher(void)
  virtual setEnabled(bool)
  virtual updateDraggerWithHSV(cocos2d::extension::HSV)
  virtual updateWithHSV(cocos2d::extension::HSV)
}
class cocos2d::extension::CCControlSlider : cocos2d::extension::CCControl {
  CCControlSlider()
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create(char const*, char const*, char const*)
  create(cocos2d::CCSprite*, cocos2d::CCSprite*, cocos2d::CCSprite*)
  initWithSprites(cocos2d::CCSprite*, cocos2d::CCSprite*, cocos2d::CCSprite*)
  isTouchInside(cocos2d::CCTouch*)
  locationFromTouch(cocos2d::CCTouch*)
  needsLayout()
  setEnabled(bool)
  setMaximumValue(float)
  setMinimumValue(float)
  setValue(float)
  sliderBegan(cocos2d::CCPoint)
  sliderEnded(cocos2d::CCPoint)
  sliderMoved(cocos2d::CCPoint)
  valueForLocation(cocos2d::CCPoint)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual initWithSprites(cocos2d::CCSprite *,cocos2d::CCSprite *,cocos2d::CCSprite *)
  virtual isTouchInside(cocos2d::CCTouch *)
  virtual needsLayout(void)
  virtual setEnabled(bool)
  virtual setMaximumValue(float)
  virtual setMinimumValue(float)
  virtual setValue(float)
}
class cocos2d::extension::CCControlStepper : cocos2d::extension::CCControl {
  CCControlStepper()
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create(cocos2d::CCSprite*, cocos2d::CCSprite*)
  getValue()
  initWithMinusSpriteAndPlusSprite(cocos2d::CCSprite*, cocos2d::CCSprite*)
  isContinuous()
  setMaximumValue(double)
  setMinimumValue(double)
  setStepValue(double)
  setValue(double)
  setValueWithSendingEvent(double, bool)
  setWraps(bool)
  startAutorepeat()
  stopAutorepeat()
  update(float)
  updateLayoutUsingTouchLocation(cocos2d::CCPoint)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual getValue(void)
  virtual isContinuous(void)
  virtual setMaximumValue(double)
  virtual setMinimumValue(double)
  virtual setStepValue(double)
  virtual setValue(double)
  virtual setValueWithSendingEvent(double,bool)
  virtual setWraps(bool)
  virtual update(float)
}
class cocos2d::extension::CCControlSwitch : cocos2d::extension::CCControl {
  CCControlSwitch()
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create(cocos2d::CCSprite*, cocos2d::CCSprite*, cocos2d::CCSprite*, cocos2d::CCSprite*)
  create(cocos2d::CCSprite*, cocos2d::CCSprite*, cocos2d::CCSprite*, cocos2d::CCSprite*, cocos2d::CCLabelTTF*, cocos2d::CCLabelTTF*)
  initWithMaskSprite(cocos2d::CCSprite*, cocos2d::CCSprite*, cocos2d::CCSprite*, cocos2d::CCSprite*)
  initWithMaskSprite(cocos2d::CCSprite*, cocos2d::CCSprite*, cocos2d::CCSprite*, cocos2d::CCSprite*, cocos2d::CCLabelTTF*, cocos2d::CCLabelTTF*)
  locationFromTouch(cocos2d::CCTouch*)
  setEnabled(bool)
  setOn(bool)
  setOn(bool, bool)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual setEnabled(bool)
}
class cocos2d::extension::CCControlSwitchSprite : cocos2d::CCSprite, cocos2d::CCActionTweenDelegate {
  CCControlSwitchSprite()
  draw()
  initWithMaskSprite(cocos2d::CCSprite*, cocos2d::CCSprite*, cocos2d::CCSprite*, cocos2d::CCSprite*, cocos2d::CCLabelTTF*, cocos2d::CCLabelTTF*)
  needsLayout()
  offSideWidth()
  onSideWidth()
  setSliderXPosition(float)
  updateTweenAction(float, char const*)
  virtual draw(void)
  virtual updateTweenAction(float,char const*)
}
class cocos2d::extension::CCEditBox : cocos2d::extension::CCControlButton, cocos2d::CCIMEDelegate {
  CCEditBox()
  create(cocos2d::CCSize const&, cocos2d::extension::CCScale9Sprite*, cocos2d::extension::CCScale9Sprite*, cocos2d::extension::CCScale9Sprite*)
  getDelegate()
  getMaxLength()
  getPlaceHolder()
  getText()
  initWithSizeAndBackgroundSprite(cocos2d::CCSize const&, cocos2d::extension::CCScale9Sprite*)
  keyboardDidHide(cocos2d::CCIMEKeyboardNotificationInfo&)
  keyboardDidShow(cocos2d::CCIMEKeyboardNotificationInfo&)
  keyboardWillHide(cocos2d::CCIMEKeyboardNotificationInfo&)
  keyboardWillShow(cocos2d::CCIMEKeyboardNotificationInfo&)
  onEnter()
  onExit()
  registerScriptEditBoxHandler(int)
  setAnchorPoint(cocos2d::CCPoint const&)
  setContentSize(cocos2d::CCSize const&)
  setDelegate(cocos2d::extension::CCEditBoxDelegate*)
  setFont(char const*, int)
  setFontColor(cocos2d::_ccColor3B const&)
  setFontName(char const*)
  setFontSize(int)
  setInputFlag(cocos2d::extension::EditBoxInputFlag)
  setInputMode(cocos2d::extension::EditBoxInputMode)
  setMaxLength(int)
  setPlaceHolder(char const*)
  setPlaceholderFont(char const*, int)
  setPlaceholderFontColor(cocos2d::_ccColor3B const&)
  setPlaceholderFontName(char const*)
  setPlaceholderFontSize(int)
  setPosition(cocos2d::CCPoint const&)
  setReturnType(cocos2d::extension::KeyboardReturnType)
  setText(char const*)
  setVisible(bool)
  touchDownAction(cocos2d::CCObject*, unsigned int)
  unregisterScriptEditBoxHandler()
  visit()
  virtual keyboardDidHide(cocos2d::CCIMEKeyboardNotificationInfo &)
  virtual keyboardDidShow(cocos2d::CCIMEKeyboardNotificationInfo &)
  virtual keyboardWillHide(cocos2d::CCIMEKeyboardNotificationInfo &)
  virtual keyboardWillShow(cocos2d::CCIMEKeyboardNotificationInfo &)
  virtual onEnter(void)
  virtual onExit(void)
  virtual setAnchorPoint(cocos2d::CCPoint const&)
  virtual setContentSize(cocos2d::CCSize const&)
  virtual setPosition(cocos2d::CCPoint const&)
  virtual setVisible(bool)
  virtual visit(void)
}
class cocos2d::extension::CCEditBoxImpl {
}
class cocos2d::extension::CCEditBoxImplAndroid : cocos2d::extension::CCEditBoxImpl {
  CCEditBoxImplAndroid(cocos2d::extension::CCEditBox*)
  closeKeyboard()
  doAnimationWhenKeyboardMove(float, float)
  getMaxLength()
  getText()
  initWithSize(cocos2d::CCSize const&)
  isEditing()
  onEnter()
  openKeyboard()
  setAnchorPoint(cocos2d::CCPoint const&)
  setContentSize(cocos2d::CCSize const&)
  setFont(char const*, int)
  setFontColor(cocos2d::_ccColor3B const&)
  setInputFlag(cocos2d::extension::EditBoxInputFlag)
  setInputMode(cocos2d::extension::EditBoxInputMode)
  setMaxLength(int)
  setPlaceHolder(char const*)
  setPlaceholderFont(char const*, int)
  setPlaceholderFontColor(cocos2d::_ccColor3B const&)
  setPosition(cocos2d::CCPoint const&)
  setReturnType(cocos2d::extension::KeyboardReturnType)
  setText(char const*)
  setVisible(bool)
  visit()
  virtual closeKeyboard(void)
  virtual doAnimationWhenKeyboardMove(float,float)
  virtual getMaxLength(void)
  virtual getText(void)
  virtual initWithSize(cocos2d::CCSize const&)
  virtual isEditing(void)
  virtual onEnter(void)
  virtual openKeyboard(void)
  virtual setAnchorPoint(cocos2d::CCPoint const&)
  virtual setContentSize(cocos2d::CCSize const&)
  virtual setFont(char const*,int)
  virtual setFontColor(cocos2d::_ccColor3B const&)
  virtual setInputFlag(cocos2d::extension::EditBoxInputFlag)
  virtual setInputMode(cocos2d::extension::EditBoxInputMode)
  virtual setMaxLength(int)
  virtual setPlaceHolder(char const*)
  virtual setPlaceholderFont(char const*,int)
  virtual setPlaceholderFontColor(cocos2d::_ccColor3B const&)
  virtual setPosition(cocos2d::CCPoint const&)
  virtual setReturnType(cocos2d::extension::KeyboardReturnType)
  virtual setText(char const*)
  virtual setVisible(bool)
  virtual visit(void)
}
class cocos2d::extension::CCHttpClient : cocos2d::CCObject {
  CCHttpClient()
  destroyInstance()
  dispatchResponseCallbacks(float)
  getInstance()
  lazyInitThreadSemphore()
  send(cocos2d::extension::CCHttpRequest*)
}
class cocos2d::extension::CCHttpRequest : cocos2d::CCObject {
  CCHttpRequest()
}
class cocos2d::extension::CCHttpResponse : cocos2d::CCObject {
  CCHttpResponse(cocos2d::extension::CCHttpRequest*)
}
class cocos2d::extension::CCInvocation : cocos2d::CCObject {
  CCInvocation(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*, unsigned int), unsigned int)
  create(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*, unsigned int), unsigned int)
  invoke(cocos2d::CCObject*)
}
class cocos2d::extension::CCScale9Sprite : cocos2d::CCNodeRGBA {
  CCScale9Sprite()
  create(cocos2d::CCRect, char const*)
  create(char const*)
  create(char const*, cocos2d::CCRect)
  create(char const*, cocos2d::CCRect, cocos2d::CCRect)
  create()
  createWithSpriteFrame(cocos2d::CCSpriteFrame*)
  createWithSpriteFrame(cocos2d::CCSpriteFrame*, cocos2d::CCRect)
  createWithSpriteFrameName(char const*)
  createWithSpriteFrameName(char const*, cocos2d::CCRect)
  getCapInsets()
  getColor()
  getInsetBottom()
  getInsetLeft()
  getInsetRight()
  getInsetTop()
  getOpacity()
  getPreferredSize()
  init()
  initWithBatchNode(cocos2d::CCSpriteBatchNode*, cocos2d::CCRect, bool, cocos2d::CCRect)
  initWithBatchNode(cocos2d::CCSpriteBatchNode*, cocos2d::CCRect, cocos2d::CCRect)
  initWithFile(cocos2d::CCRect, char const*)
  initWithFile(char const*)
  initWithFile(char const*, cocos2d::CCRect)
  initWithFile(char const*, cocos2d::CCRect, cocos2d::CCRect)
  initWithSpriteFrame(cocos2d::CCSpriteFrame*)
  initWithSpriteFrame(cocos2d::CCSpriteFrame*, cocos2d::CCRect)
  initWithSpriteFrameName(char const*)
  initWithSpriteFrameName(char const*, cocos2d::CCRect)
  isOpacityModifyRGB()
  resizableSpriteWithCapInsets(cocos2d::CCRect)
  setBlendAdditive(bool)
  setCapInsets(cocos2d::CCRect)
  setColor(cocos2d::_ccColor3B const&)
  setContentSize(cocos2d::CCSize const&)
  setInsetBottom(float)
  setInsetLeft(float)
  setInsetRight(float)
  setInsetTop(float)
  setOpacity(unsigned char)
  setOpacityModifyRGB(bool)
  setPreferredSize(cocos2d::CCSize)
  setSpriteFrame(cocos2d::CCSpriteFrame*)
  updateCapInset()
  updateDisplayedColor(cocos2d::_ccColor3B const&)
  updateDisplayedOpacity(unsigned char)
  updatePositions()
  updateWithBatchNode(cocos2d::CCSpriteBatchNode*, cocos2d::CCRect, bool, cocos2d::CCRect)
  visit()
  virtual getCapInsets(void)
  virtual getColor(void)
  virtual getInsetBottom(void)
  virtual getInsetLeft(void)
  virtual getInsetRight(void)
  virtual getInsetTop(void)
  virtual getOpacity(void)
  virtual getPreferredSize(void)
  virtual init(void)
  virtual initWithBatchNode(cocos2d::CCSpriteBatchNode *,cocos2d::CCRect,bool,cocos2d::CCRect)
  virtual initWithBatchNode(cocos2d::CCSpriteBatchNode *,cocos2d::CCRect,cocos2d::CCRect)
  virtual initWithFile(char const*,cocos2d::CCRect,cocos2d::CCRect)
  virtual initWithFile(char const*,cocos2d::CCRect)
  virtual initWithFile(cocos2d::CCRect,char const*)
  virtual initWithFile(char const*)
  virtual initWithSpriteFrame(cocos2d::CCSpriteFrame *,cocos2d::CCRect)
  virtual initWithSpriteFrame(cocos2d::CCSpriteFrame *)
  virtual initWithSpriteFrameName(char const*,cocos2d::CCRect)
  virtual initWithSpriteFrameName(char const*)
  virtual isOpacityModifyRGB(void)
  virtual setCapInsets(cocos2d::CCRect)
  virtual setColor(cocos2d::_ccColor3B const&)
  virtual setContentSize(cocos2d::CCSize const&)
  virtual setInsetBottom(float)
  virtual setInsetLeft(float)
  virtual setInsetRight(float)
  virtual setInsetTop(float)
  virtual setOpacity(uchar)
  virtual setOpacityModifyRGB(bool)
  virtual setPreferredSize(cocos2d::CCSize)
  virtual setSpriteFrame(cocos2d::CCSpriteFrame *)
  virtual updateDisplayedColor(cocos2d::_ccColor3B const&)
  virtual updateDisplayedOpacity(uchar)
  virtual updateWithBatchNode(cocos2d::CCSpriteBatchNode *,cocos2d::CCRect,bool,cocos2d::CCRect)
  virtual visit(void)
}
class cocos2d::extension::CCScrollView : cocos2d::CCLayer {
  CCScrollView()
  addChild(cocos2d::CCNode*)
  addChild(cocos2d::CCNode*, int)
  addChild(cocos2d::CCNode*, int, int)
  afterDraw()
  beforeDraw()
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  create(cocos2d::CCSize, cocos2d::CCNode*)
  create()
  deaccelerateScrolling(float)
  getContainer()
  getContentOffset()
  getContentSize()
  getScriptHandler(int)
  getViewRect()
  getZoomScale()
  init()
  initWithViewSize(cocos2d::CCSize, cocos2d::CCNode*)
  isNodeVisible(cocos2d::CCNode*)
  maxContainerOffset()
  minContainerOffset()
  pause(cocos2d::CCObject*)
  performedAnimatedScroll(float)
  registerScriptHandler(int, int)
  registerWithTouchDispatcher()
  relocateContainer(bool)
  resume(cocos2d::CCObject*)
  setContainer(cocos2d::CCNode*)
  setContentOffset(cocos2d::CCPoint, bool)
  setContentOffsetInDuration(cocos2d::CCPoint, float)
  setContentSize(cocos2d::CCSize const&)
  setDirection(cocos2d::extension::CCScrollViewDirection)
  setTouchEnabled(bool)
  setViewSize(cocos2d::CCSize)
  setZoomScale(float)
  setZoomScale(float, bool)
  setZoomScaleInDuration(float, float)
  stoppedAnimatedScroll(cocos2d::CCNode*)
  unregisterScriptHandler(int)
  updateInset()
  visit()
  virtual addChild(cocos2d::CCNode *)
  virtual addChild(cocos2d::CCNode *,int)
  virtual addChild(cocos2d::CCNode *,int,int)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual getContentSize(void)
  virtual init(void)
  virtual registerWithTouchDispatcher(void)
  virtual setContentSize(cocos2d::CCSize const&)
  virtual setDirection(cocos2d::extension::CCScrollViewDirection)
  virtual setTouchEnabled(bool)
  virtual visit(void)
}
class cocos2d::extension::CCScrollViewDelegate {
}
class cocos2d::extension::CCSortableObject {
}
class cocos2d::extension::CCSortedObject : cocos2d::CCObject, cocos2d::extension::CCSortableObject {
  getObjectID()
  setObjectID(unsigned int)
  virtual getObjectID(void)
  virtual setObjectID(uint)
}
class cocos2d::extension::CCTableView : cocos2d::extension::CCScrollView, cocos2d::extension::CCScrollViewDelegate {
  CCTableView()
  __indexFromOffset(cocos2d::CCPoint)
  __offsetFromIndex(unsigned int)
  _addCellIfNecessary(cocos2d::extension::CCTableViewCell*)
  _indexFromOffset(cocos2d::CCPoint)
  _moveCellOutOfSight(cocos2d::extension::CCTableViewCell*)
  _offsetFromIndex(unsigned int)
  _setIndexForCell(unsigned int, cocos2d::extension::CCTableViewCell*)
  _updateCellPositions()
  _updateContentSize()
  ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*)
  ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*)
  cellAtIndex(unsigned int)
  create(cocos2d::extension::CCTableViewDataSource*, cocos2d::CCSize)
  create(cocos2d::extension::CCTableViewDataSource*, cocos2d::CCSize, cocos2d::CCNode*)
  dequeueCell()
  getVerticalFillOrder()
  initWithViewSize(cocos2d::CCSize, cocos2d::CCNode*)
  insertCellAtIndex(unsigned int)
  reloadData()
  removeCellAtIndex(unsigned int)
  scrollViewDidScroll(cocos2d::extension::CCScrollView*)
  scrollViewDidZoom(cocos2d::extension::CCScrollView*)
  setVerticalFillOrder(cocos2d::extension::CCTableViewVerticalFillOrder)
  unregisterAllScriptHandler()
  updateCellAtIndex(unsigned int)
  virtual ccTouchBegan(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchCancelled(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchEnded(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual ccTouchMoved(cocos2d::CCTouch *,cocos2d::CCEvent *)
  virtual scrollViewDidScroll(cocos2d::extension::CCScrollView *)
  virtual scrollViewDidZoom(cocos2d::extension::CCScrollView *)
}
class cocos2d::extension::CCTableViewCell : cocos2d::CCNode, cocos2d::extension::CCSortableObject {
  getIdx()
  getObjectID()
  reset()
  setIdx(unsigned int)
  setObjectID(unsigned int)
  virtual getObjectID(void)
  virtual setObjectID(uint)
}
class cocos2d::extension::ColorPickerDelegate {
  colorValueChanged(cocos2d::_ccColor3B)
  virtual colorValueChanged(cocos2d::_ccColor3B)
}
class cocos2d::extension::WebSocket {
  WebSocket()
  close()
  getReadyState()
  init(cocos2d::extension::WebSocket::Delegate const&, std::string const&, std::vector<std::string, std::allocator<std::string > > const*)
  onSocketCallback(lws*, lws_callback_reasons, void*, void*, unsigned int)
  onSubThreadEnded()
  onSubThreadLoop()
  onSubThreadStarted()
  onUIThreadReceiveMessage(cocos2d::extension::WsMessage*)
  send(unsigned char const*, unsigned int)
  send(std::string const&)
  virtual onSubThreadEnded(void)
  virtual onSubThreadLoop(void)
  virtual onSubThreadStarted(void)
  virtual onUIThreadReceiveMessage(cocos2d::extension::WsMessage *)
}
class cocos2d::extension::WsThreadHelper : cocos2d::CCObject {
  WsThreadHelper()
  createThread(cocos2d::extension::WebSocket const&)
  joinSubThread()
  quitSubThread()
  sendMessageToSubThread(cocos2d::extension::WsMessage*)
  sendMessageToUIThread(cocos2d::extension::WsMessage*)
  update(float)
  wsThreadEntryFunc(void*)
  virtual update(float)
}
class cocos2d::ExtraAction : cocos2d::CCFiniteTimeAction {
  copyWithZone(cocos2d::CCZone*)
  create()
  reverse()
  step(float)
  update(float)
  virtual copyWithZone(cocos2d::CCZone *)
  virtual reverse(void)
  virtual step(float)
  virtual update(float)
}
class cocos2d::TypeInfo {
}
class cocos2d::XmlSaxHander : tinyxml2::XMLVisitor {
  Visit(tinyxml2::XMLUnknown const&)
  Visit(tinyxml2::XMLText const&)
  VisitEnter(tinyxml2::XMLElement const&, tinyxml2::XMLAttribute const*)
  VisitExit(tinyxml2::XMLElement const&)
  virtual Visit(tinyxml2::XMLText const&)
  virtual Visit(tinyxml2::XMLUnknown const&)
  virtual VisitEnter(tinyxml2::XMLElement const&,tinyxml2::XMLAttribute const*)
  virtual VisitExit(tinyxml2::XMLElement const&)
}
class cocos2d::ZipFile {
  ZipFile(std::string const&, std::string const&)
  fileExists(std::string const&)
  getFileData(std::string const&, unsigned long*)
  getFileData(std::string const&, unsigned long*, cocos2d::ZipFilePrivate*)
  setFilter(std::string const&)
  setFilter(std::string const&, cocos2d::ZipFilePrivate*)
}
